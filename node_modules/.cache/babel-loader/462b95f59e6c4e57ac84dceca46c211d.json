{"ast":null,"code":"import { existsSync, open, read, closeSync, close } from 'fs';\nimport { hostname } from 'os';\nimport { Stream } from 'stream';\nimport { TextEncoder, TextDecoder } from 'util';\nimport { createHmac } from 'crypto';\nimport { EventEmitter } from 'events';\nimport { Socket } from 'net';\nimport { connect, TLSSocket, createSecureContext } from 'tls';\n/*\n * Operator tokens and which tokens are expected to end the sequence\n */\n\nconst OPERATORS = new Map([['\"', '\"'], ['(', ')'], ['<', '>'], [',', ''], // Groups are ended by semicolons\n[':', ';'], // Semicolons are not a legal delimiter per the RFC2822 grammar other\n// than for terminating a group, but they are also not valid for any\n// other use in this context.  Given that some mail clients have\n// historically allowed the semicolon as a delimiter equivalent to the\n// comma in their UI, it makes sense to treat them the same as a comma\n// when used outside of a group.\n[';', '']]);\n/**\n * Tokenizes the original input string\n *\n * @param {string | string[] | undefined} address string(s) to tokenize\n * @return {AddressToken[]} An array of operator|text tokens\n */\n\nfunction tokenizeAddress() {\n  let address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  var _a, _b;\n\n  const tokens = [];\n  let token = undefined;\n  let operator = undefined;\n\n  for (const character of address.toString()) {\n    if (((_a = operator === null || operator === void 0 ? void 0 : operator.length) !== null && _a !== void 0 ? _a : 0) > 0 && character === operator) {\n      tokens.push({\n        type: 'operator',\n        value: character\n      });\n      token = undefined;\n      operator = undefined;\n    } else if (((_b = operator === null || operator === void 0 ? void 0 : operator.length) !== null && _b !== void 0 ? _b : 0) === 0 && OPERATORS.has(character)) {\n      tokens.push({\n        type: 'operator',\n        value: character\n      });\n      token = undefined;\n      operator = OPERATORS.get(character);\n    } else {\n      if (token == null) {\n        token = {\n          type: 'text',\n          value: character\n        };\n        tokens.push(token);\n      } else {\n        token.value += character;\n      }\n    }\n  }\n\n  return tokens.map(x => {\n    x.value = x.value.trim();\n    return x;\n  }).filter(x => x.value.length > 0);\n}\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {AddressToken[]} tokens Tokens object\n * @return {AddressObject[]} addresses object array\n */\n\n\nfunction convertAddressTokens(tokens) {\n  const addressObjects = [];\n  const groups = [];\n  let addresses = [];\n  let comments = [];\n  let texts = [];\n  let state = 'text';\n  let isGroup = false;\n\n  function handleToken(token) {\n    if (token.type === 'operator') {\n      switch (token.value) {\n        case '<':\n          state = 'address';\n          break;\n\n        case '(':\n          state = 'comment';\n          break;\n\n        case ':':\n          state = 'group';\n          isGroup = true;\n          break;\n\n        default:\n          state = 'text';\n          break;\n      }\n    } else if (token.value.length > 0) {\n      switch (state) {\n        case 'address':\n          addresses.push(token.value);\n          break;\n\n        case 'comment':\n          comments.push(token.value);\n          break;\n\n        case 'group':\n          groups.push(token.value);\n          break;\n\n        default:\n          texts.push(token.value);\n          break;\n      }\n    }\n  } // Filter out <addresses>, (comments) and regular text\n\n\n  for (const token of tokens) {\n    handleToken(token);\n  } // If there is no text but a comment, replace the two\n\n\n  if (texts.length === 0 && comments.length > 0) {\n    texts = [...comments];\n    comments = [];\n  } // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n\n\n  if (isGroup) {\n    addressObjects.push({\n      name: texts.length === 0 ? undefined : texts.join(' '),\n      group: groups.length > 0 ? addressparser(groups.join(',')) : []\n    });\n  } else {\n    // If no address was found, try to detect one from regular text\n    if (addresses.length === 0 && texts.length > 0) {\n      for (let i = texts.length - 1; i >= 0; i--) {\n        if (texts[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n          addresses = texts.splice(i, 1);\n          break;\n        }\n      } // still no address\n\n\n      if (addresses.length === 0) {\n        for (let i = texts.length - 1; i >= 0; i--) {\n          texts[i] = texts[i].replace(/\\s*\\b[^@\\s]+@[^@\\s]+\\b\\s*/, address => {\n            if (addresses.length === 0) {\n              addresses = [address.trim()];\n              return ' ';\n            } else {\n              return address;\n            }\n          }).trim();\n\n          if (addresses.length > 0) {\n            break;\n          }\n        }\n      }\n    } // If there's still is no text but a comment exixts, replace the two\n\n\n    if (texts.length === 0 && comments.length > 0) {\n      texts = [...comments];\n      comments = [];\n    } // Keep only the first address occurence, push others to regular text\n\n\n    if (addresses.length > 1) {\n      texts = [...texts, ...addresses.splice(1)];\n    }\n\n    if (addresses.length === 0 && isGroup) {\n      return [];\n    } else {\n      // Join values with spaces\n      let address = addresses.join(' ');\n      let name = texts.length === 0 ? address : texts.join(' ');\n\n      if (address === name) {\n        if (address.match(/@/)) {\n          name = '';\n        } else {\n          address = '';\n        }\n      }\n\n      addressObjects.push({\n        address,\n        name\n      });\n    }\n  }\n\n  return addressObjects;\n}\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    \"Name <address@domain>\"\n *\n * will be converted to\n *\n *     [{name: \"Name\", address: \"address@domain\"}]\n *\n * @param {string | string[] | undefined} address Address field\n * @return {AddressObject[]} An array of address objects\n */\n\n\nfunction addressparser(address) {\n  const addresses = [];\n  let tokens = [];\n\n  for (const token of tokenizeAddress(address)) {\n    if (token.type === 'operator' && (token.value === ',' || token.value === ';')) {\n      if (tokens.length > 0) {\n        addresses.push(...convertAddressTokens(tokens));\n      }\n\n      tokens = [];\n    } else {\n      tokens.push(token);\n    }\n  }\n\n  if (tokens.length > 0) {\n    addresses.push(...convertAddressTokens(tokens));\n  }\n\n  return addresses;\n}\n/**\n * @param {Date} [date] an optional date to convert to RFC2822 format\n * @param {boolean} [useUtc] whether to parse the date as UTC (default: false)\n * @returns {string} the converted date\n */\n\n\nfunction getRFC2822Date() {\n  let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n  let useUtc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (useUtc) {\n    return getRFC2822DateUTC(date);\n  }\n\n  const dates = date.toString().replace('GMT', '').replace(/\\s\\(.*\\)$/, '').split(' ');\n  dates[0] = dates[0] + ',';\n  const day = dates[1];\n  dates[1] = dates[2];\n  dates[2] = day;\n  return dates.join(' ');\n}\n/**\n * @param {Date} [date] an optional date to convert to RFC2822 format (UTC)\n * @returns {string} the converted date\n */\n\n\nfunction getRFC2822DateUTC() {\n  let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n  const dates = date.toUTCString().split(' ');\n  dates.pop(); // remove timezone\n\n  dates.push('+0000');\n  return dates.join(' ');\n}\n/**\n * RFC 2822 regex\n * @see https://tools.ietf.org/html/rfc2822#section-3.3\n * @see https://github.com/moment/moment/blob/a831fc7e2694281ce31e4f090bbcf90a690f0277/src/lib/create/from-string.js#L101\n */\n\n\nconst rfc2822re = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n/**\n * @param {string} [date] a string to check for conformance to the [rfc2822](https://tools.ietf.org/html/rfc2822#section-3.3) standard\n * @returns {boolean} the result of the conformance check\n */\n\nfunction isRFC2822Date(date) {\n  return rfc2822re.test(date);\n} // adapted from https://github.com/emailjs/emailjs-mime-codec/blob/6909c706b9f09bc0e5c3faf48f723cca53e5b352/src/mimecodec.js\n\n\nconst encoder = new TextEncoder();\n/**\n * @see https://tools.ietf.org/html/rfc2045#section-6.7\n */\n\nconst RANGES = [[0x09], [0x0a], [0x0d], [0x20, 0x3c], [0x3e, 0x7e] // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\n];\nconst LOOKUP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\nconst MAX_CHUNK_LENGTH = 16383; // must be multiple of 3\n\nconst MAX_MIME_WORD_LENGTH = 52;\nconst MAX_B64_MIME_WORD_BYTE_LENGTH = 39;\n\nfunction tripletToBase64(num) {\n  return LOOKUP[num >> 18 & 0x3f] + LOOKUP[num >> 12 & 0x3f] + LOOKUP[num >> 6 & 0x3f] + LOOKUP[num & 0x3f];\n}\n\nfunction encodeChunk(uint8, start, end) {\n  let output = '';\n\n  for (let i = start; i < end; i += 3) {\n    output += tripletToBase64((uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]);\n  }\n\n  return output;\n}\n\nfunction encodeBase64(data) {\n  const len = data.length;\n  const extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\n  let output = ''; // go through the array every three bytes, we'll deal with trailing stuff later\n\n  for (let i = 0, len2 = len - extraBytes; i < len2; i += MAX_CHUNK_LENGTH) {\n    output += encodeChunk(data, i, i + MAX_CHUNK_LENGTH > len2 ? len2 : i + MAX_CHUNK_LENGTH);\n  } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n  if (extraBytes === 1) {\n    const tmp = data[len - 1];\n    output += LOOKUP[tmp >> 2];\n    output += LOOKUP[tmp << 4 & 0x3f];\n    output += '==';\n  } else if (extraBytes === 2) {\n    const tmp = (data[len - 2] << 8) + data[len - 1];\n    output += LOOKUP[tmp >> 10];\n    output += LOOKUP[tmp >> 4 & 0x3f];\n    output += LOOKUP[tmp << 2 & 0x3f];\n    output += '=';\n  }\n\n  return output;\n}\n/**\n * Splits a mime encoded string. Needed for dividing mime words into smaller chunks\n *\n * @param {string} str Mime encoded string to be split up\n * @param {number} maxlen Maximum length of characters for one part (minimum 12)\n * @return {string[]} lines\n */\n\n\nfunction splitMimeEncodedString(str) {\n  let maxlen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n  const minWordLength = 12; // require at least 12 symbols to fit possible 4 octet UTF-8 sequences\n\n  const maxWordLength = Math.max(maxlen, minWordLength);\n  const lines = [];\n\n  while (str.length) {\n    let curLine = str.substr(0, maxWordLength);\n    const match = curLine.match(/=[0-9A-F]?$/i); // skip incomplete escaped char\n\n    if (match) {\n      curLine = curLine.substr(0, match.index);\n    }\n\n    let done = false;\n\n    while (!done) {\n      let chr;\n      done = true;\n      const match = str.substr(curLine.length).match(/^=([0-9A-F]{2})/i); // check if not middle of a unicode char sequence\n\n      if (match) {\n        chr = parseInt(match[1], 16); // invalid sequence, move one char back anc recheck\n\n        if (chr < 0xc2 && chr > 0x7f) {\n          curLine = curLine.substr(0, curLine.length - 3);\n          done = false;\n        }\n      }\n    }\n\n    if (curLine.length) {\n      lines.push(curLine);\n    }\n\n    str = str.substr(curLine.length);\n  }\n\n  return lines;\n}\n/**\n *\n * @param {number} nr number\n * @returns {boolean} if number is in range\n */\n\n\nfunction checkRanges(nr) {\n  return RANGES.reduce((val, range) => val || range.length === 1 && nr === range[0] || range.length === 2 && nr >= range[0] && nr <= range[1], false);\n}\n/**\n * Encodes all non printable and non ascii bytes to =XX form, where XX is the\n * byte value in hex. This function does not convert linebreaks etc. it\n * only escapes character sequences\n *\n * NOTE: Encoding support depends on util.TextDecoder, which is severely limited\n * prior to Node.js 13.\n *\n * @see https://nodejs.org/api/util.html#util_whatwg_supported_encodings\n * @see https://github.com/nodejs/node/issues/19214\n *\n * @param {string|Uint8Array} data Either a string or an Uint8Array\n * @param {string} encoding WHATWG supported encoding\n * @return {string} Mime encoded string\n */\n\n\nfunction mimeEncode() {\n  let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf-8';\n  const decoder = new TextDecoder(encoding);\n  const buffer = typeof data === 'string' ? encoder.encode(data) : encoder.encode(decoder.decode(data));\n  return buffer.reduce((aggregate, ord, index) => checkRanges(ord) && !((ord === 0x20 || ord === 0x09) && (index === buffer.length - 1 || buffer[index + 1] === 0x0a || buffer[index + 1] === 0x0d)) ? // if the char is in allowed range, then keep as is, unless it is a ws in the end of a line\n  aggregate + String.fromCharCode(ord) : `${aggregate}=${ord < 0x10 ? '0' : ''}${ord.toString(16).toUpperCase()}`, '');\n}\n/**\n * Encodes a string or an Uint8Array to an UTF-8 MIME Word\n *\n * NOTE: Encoding support depends on util.TextDecoder, which is severely limited\n * prior to Node.js 13.\n *\n * @see https://tools.ietf.org/html/rfc2047\n * @see https://nodejs.org/api/util.html#util_whatwg_supported_encodings\n * @see https://github.com/nodejs/node/issues/19214\n *\n * @param {string|Uint8Array} data String to be encoded\n * @param {'Q' | 'B'} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n * @param {string} encoding WHATWG supported encoding\n * @return {string} Single or several mime words joined together\n */\n\n\nfunction mimeWordEncode(data) {\n  let mimeWordEncoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Q';\n  let encoding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'utf-8';\n  let parts = [];\n  const decoder = new TextDecoder(encoding);\n  const str = typeof data === 'string' ? data : decoder.decode(data);\n\n  if (mimeWordEncoding === 'Q') {\n    const encodedStr = mimeEncode(str, encoding).replace(/[^a-z0-9!*+\\-/=]/gi, chr => chr === ' ' ? '_' : '=' + (chr.charCodeAt(0) < 0x10 ? '0' : '') + chr.charCodeAt(0).toString(16).toUpperCase());\n    parts = encodedStr.length < MAX_MIME_WORD_LENGTH ? [encodedStr] : splitMimeEncodedString(encodedStr, MAX_MIME_WORD_LENGTH);\n  } else {\n    // Fits as much as possible into every line without breaking utf-8 multibyte characters' octets up across lines\n    let j = 0;\n    let i = 0;\n\n    while (i < str.length) {\n      if (encoder.encode(str.substring(j, i)).length > MAX_B64_MIME_WORD_BYTE_LENGTH) {\n        // we went one character too far, substring at the char before\n        parts.push(str.substring(j, i - 1));\n        j = i - 1;\n      } else {\n        i++;\n      }\n    } // add the remainder of the string\n\n\n    str.substring(j) && parts.push(str.substring(j));\n    parts = parts.map(x => encoder.encode(x)).map(x => encodeBase64(x));\n  }\n\n  return parts.map(p => `=?UTF-8?${mimeWordEncoding}?${p}?= `).join('').trim();\n}\n\nconst CRLF$1 = '\\r\\n';\n/**\n * MIME standard wants 76 char chunks when sending out.\n */\n\nconst MIMECHUNK = 76;\n/**\n * meets both base64 and mime divisibility\n */\n\nconst MIME64CHUNK = MIMECHUNK * 6;\n/**\n * size of the message stream buffer\n */\n\nconst BUFFERSIZE = MIMECHUNK * 24 * 7;\nlet counter = 0;\n\nfunction generateBoundary() {\n  let text = '';\n  const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'()+_,-./:=?\";\n\n  for (let i = 0; i < 69; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n\n  return text;\n}\n\nfunction convertPersonToAddress(person) {\n  return addressparser(person).map(_ref => {\n    let {\n      name,\n      address\n    } = _ref;\n    return name ? `${mimeWordEncode(name).replace(/,/g, '=2C')} <${address}>` : address;\n  }).join(', ');\n}\n\nfunction convertDashDelimitedTextToSnakeCase(text) {\n  return text.toLowerCase().replace(/^(.)|-(.)/g, match => match.toUpperCase());\n}\n\nclass Message {\n  /**\n   * Construct an rfc2822-compliant message object.\n   *\n   * Special notes:\n   * - The `from` field is required.\n   * - At least one `to`, `cc`, or `bcc` header is also required.\n   * - You can also add whatever other headers you want.\n   *\n   * @see https://tools.ietf.org/html/rfc2822\n   * @param {Partial<MessageHeaders>} headers Message headers\n   */\n  constructor(headers) {\n    this.attachments = [];\n    this.header = {\n      'message-id': `<${new Date().getTime()}.${counter++}.${process.pid}@${hostname()}>`,\n      date: getRFC2822Date()\n    };\n    this.content = 'text/plain; charset=utf-8';\n    this.alternative = null;\n\n    for (const header in headers) {\n      // allow user to override default content-type to override charset or send a single non-text message\n      if (/^content-type$/i.test(header)) {\n        this.content = headers[header];\n      } else if (header === 'text') {\n        this.text = headers[header];\n      } else if (header === 'attachment' && typeof headers[header] === 'object') {\n        const attachment = headers[header];\n\n        if (Array.isArray(attachment)) {\n          for (let i = 0; i < attachment.length; i++) {\n            this.attach(attachment[i]);\n          }\n        } else if (attachment != null) {\n          this.attach(attachment);\n        }\n      } else if (header === 'subject') {\n        this.header.subject = mimeWordEncode(headers.subject);\n      } else if (/^(cc|bcc|to|from)/i.test(header)) {\n        this.header[header.toLowerCase()] = convertPersonToAddress(headers[header]);\n      } else {\n        // allow any headers the user wants to set??\n        this.header[header.toLowerCase()] = headers[header];\n      }\n    }\n  }\n  /**\n   * Attach a file to the message.\n   *\n   * Can be called multiple times, each adding a new attachment.\n   *\n   * @public\n   * @param {MessageAttachment} options attachment options\n   * @returns {Message} the current instance for chaining\n   */\n\n\n  attach(options) {\n    // sender can specify an attachment as an alternative\n    if (options.alternative) {\n      this.alternative = options;\n      this.alternative.charset = options.charset || 'utf-8';\n      this.alternative.type = options.type || 'text/html';\n      this.alternative.inline = true;\n    } else {\n      this.attachments.push(options);\n    }\n\n    return this;\n  }\n  /**\n   * @public\n   * @returns {{ isValid: boolean, validationError: (string | undefined) }} an object specifying whether this message is validly formatted, and the first validation error if it is not.\n   */\n\n\n  checkValidity() {\n    if (typeof this.header.from !== 'string' && Array.isArray(this.header.from) === false) {\n      return {\n        isValid: false,\n        validationError: 'Message must have a `from` header'\n      };\n    }\n\n    if (typeof this.header.to !== 'string' && Array.isArray(this.header.to) === false && typeof this.header.cc !== 'string' && Array.isArray(this.header.cc) === false && typeof this.header.bcc !== 'string' && Array.isArray(this.header.bcc) === false) {\n      return {\n        isValid: false,\n        validationError: 'Message must have at least one `to`, `cc`, or `bcc` header'\n      };\n    }\n\n    if (this.attachments.length > 0) {\n      const failed = [];\n      this.attachments.forEach(attachment => {\n        if (attachment.path) {\n          if (existsSync(attachment.path) === false) {\n            failed.push(`${attachment.path} does not exist`);\n          }\n        } else if (attachment.stream) {\n          if (!attachment.stream.readable) {\n            failed.push('attachment stream is not readable');\n          }\n        } else if (!attachment.data) {\n          failed.push('attachment has no data associated with it');\n        }\n      });\n      return {\n        isValid: failed.length === 0,\n        validationError: failed.join(', ')\n      };\n    }\n\n    return {\n      isValid: true,\n      validationError: undefined\n    };\n  }\n  /**\n   * @public\n   * @deprecated does not conform to the `errback` style followed by the rest of the library, and will be removed in the next major version. use `checkValidity` instead.\n   * @param {function(isValid: boolean, invalidReason: (string | undefined)): void} callback .\n   * @returns {void}\n   */\n\n\n  valid(callback) {\n    const {\n      isValid,\n      validationError\n    } = this.checkValidity();\n    callback(isValid, validationError);\n  }\n  /**\n   * @public\n   * @returns {MessageStream} a stream of the current message\n   */\n\n\n  stream() {\n    return new MessageStream(this);\n  }\n  /**\n   * @public\n   * @param {function(Error, string): void} callback the function to call with the error and buffer\n   * @returns {void}\n   */\n\n\n  read(callback) {\n    let buffer = '';\n    const str = this.stream();\n    str.on('data', data => buffer += data);\n    str.on('end', err => callback(err, buffer));\n    str.on('error', err => callback(err, buffer));\n  }\n\n  readAsync() {\n    return new Promise((resolve, reject) => {\n      this.read((err, buffer) => {\n        if (err != null) {\n          reject(err);\n        } else {\n          resolve(buffer);\n        }\n      });\n    });\n  }\n\n}\n\nclass MessageStream extends Stream {\n  /**\n   * @param {Message} message the message to stream\n   */\n  constructor(message) {\n    super();\n    this.message = message;\n    this.readable = true;\n    this.paused = false;\n    this.buffer = Buffer.alloc(MIMECHUNK * 24 * 7);\n    this.bufferIndex = 0;\n    /**\n     * @param {string} [data] the data to output\n     * @param {Function} [callback] the function\n     * @param {any[]} [args] array of arguments to pass to the callback\n     * @returns {void}\n     */\n\n    const output = data => {\n      // can we buffer the data?\n      if (this.buffer != null) {\n        const bytes = Buffer.byteLength(data);\n\n        if (bytes + this.bufferIndex < this.buffer.length) {\n          this.buffer.write(data, this.bufferIndex);\n          this.bufferIndex += bytes;\n        } // we can't buffer the data, so ship it out!\n        else if (bytes > this.buffer.length) {\n          if (this.bufferIndex) {\n            this.emit('data', this.buffer.toString('utf-8', 0, this.bufferIndex));\n            this.bufferIndex = 0;\n          }\n\n          const loops = Math.ceil(data.length / this.buffer.length);\n          let loop = 0;\n\n          while (loop < loops) {\n            this.emit('data', data.substring(this.buffer.length * loop, this.buffer.length * (loop + 1)));\n            loop++;\n          }\n        } // we need to clean out the buffer, it is getting full\n        else {\n          if (!this.paused) {\n            this.emit('data', this.buffer.toString('utf-8', 0, this.bufferIndex));\n            this.buffer.write(data, 0);\n            this.bufferIndex = bytes;\n          } else {\n            // we can't empty out the buffer, so let's wait till we resume before adding to it\n            this.once('resume', () => output(data));\n          }\n        }\n      }\n    };\n    /**\n     * @param {MessageAttachment} [attachment] the attachment whose headers you would like to output\n     * @returns {void}\n     */\n\n\n    const outputAttachmentHeaders = attachment => {\n      let data = [];\n      const headers = {\n        'content-type': attachment.type + (attachment.charset ? `; charset=${attachment.charset}` : '') + (attachment.method ? `; method=${attachment.method}` : ''),\n        'content-transfer-encoding': 'base64',\n        'content-disposition': attachment.inline ? 'inline' : `attachment; filename=\"${mimeWordEncode(attachment.name)}\"`\n      }; // allow sender to override default headers\n\n      if (attachment.headers != null) {\n        for (const header in attachment.headers) {\n          headers[header.toLowerCase()] = attachment.headers[header];\n        }\n      }\n\n      for (const header in headers) {\n        data = data.concat([convertDashDelimitedTextToSnakeCase(header), ': ', headers[header], CRLF$1]);\n      }\n\n      output(data.concat([CRLF$1]).join(''));\n    };\n    /**\n     * @param {string} data the data to output as base64\n     * @param {function(): void} [callback] the function to call after output is finished\n     * @returns {void}\n     */\n\n\n    const outputBase64 = (data, callback) => {\n      const loops = Math.ceil(data.length / MIMECHUNK);\n      let loop = 0;\n\n      while (loop < loops) {\n        output(data.substring(MIMECHUNK * loop, MIMECHUNK * (loop + 1)) + CRLF$1);\n        loop++;\n      }\n\n      if (callback) {\n        callback();\n      }\n    };\n\n    const outputFile = (attachment, next) => {\n      var _a;\n\n      const chunk = MIME64CHUNK * 16;\n      const buffer = Buffer.alloc(chunk);\n      const inputEncoding = ((_a = attachment === null || attachment === void 0 ? void 0 : attachment.headers) === null || _a === void 0 ? void 0 : _a['content-transfer-encoding']) || 'base64';\n      const encoding = inputEncoding === '7bit' ? 'ascii' : inputEncoding === '8bit' ? 'binary' : inputEncoding;\n      /**\n       * @param {Error} err the error to emit\n       * @param {number} fd the file descriptor\n       * @returns {void}\n       */\n\n      const opened = (err, fd) => {\n        if (err) {\n          this.emit('error', err);\n          return;\n        }\n\n        const readBytes = (err, bytes) => {\n          if (err || this.readable === false) {\n            this.emit('error', err || new Error('message stream was interrupted somehow!'));\n            return;\n          } // guaranteed to be encoded without padding unless it is our last read\n\n\n          outputBase64(buffer.toString(encoding, 0, bytes), () => {\n            if (bytes == chunk) {\n              // we read a full chunk, there might be more\n              read(fd, buffer, 0, chunk, null, readBytes);\n            } // that was the last chunk, we are done reading the file\n            else {\n              this.removeListener('error', closeSync);\n              close(fd, next);\n            }\n          });\n        };\n\n        read(fd, buffer, 0, chunk, null, readBytes);\n        this.once('error', closeSync);\n      };\n\n      open(attachment.path, 'r', opened);\n    };\n    /**\n     * @param {MessageAttachment} attachment the metadata to use as headers\n     * @param {function(): void} callback the function to call after output is finished\n     * @returns {void}\n     */\n\n\n    const outputStream = (attachment, callback) => {\n      const {\n        stream\n      } = attachment;\n\n      if (stream === null || stream === void 0 ? void 0 : stream.readable) {\n        let previous = Buffer.alloc(0);\n        stream.resume();\n        stream.on('end', () => {\n          outputBase64(previous.toString('base64'), callback);\n          this.removeListener('pause', stream.pause);\n          this.removeListener('resume', stream.resume);\n          this.removeListener('error', stream.resume);\n        });\n        stream.on('data', buff => {\n          // do we have bytes from a previous stream data event?\n          let buffer = Buffer.isBuffer(buff) ? buff : Buffer.from(buff);\n\n          if (previous.byteLength > 0) {\n            buffer = Buffer.concat([previous, buffer]);\n          }\n\n          const padded = buffer.length % MIME64CHUNK;\n          previous = Buffer.alloc(padded); // encode as much of the buffer to base64 without empty bytes\n\n          if (padded > 0) {\n            // copy dangling bytes into previous buffer\n            buffer.copy(previous, 0, buffer.length - padded);\n          }\n\n          outputBase64(buffer.toString('base64', 0, buffer.length - padded));\n        });\n        this.on('pause', stream.pause);\n        this.on('resume', stream.resume);\n        this.on('error', stream.resume);\n      } else {\n        this.emit('error', {\n          message: 'stream not readable'\n        });\n      }\n    };\n\n    const outputAttachment = (attachment, callback) => {\n      const build = attachment.path ? outputFile : attachment.stream ? outputStream : outputData;\n      outputAttachmentHeaders(attachment);\n      build(attachment, callback);\n    };\n    /**\n     * @param {string} boundary the boundary text between outputs\n     * @param {MessageAttachment[]} list the list of potential messages to output\n     * @param {number} index the index of the list item to output\n     * @param {function(): void} callback the function to call if index is greater than upper bound\n     * @returns {void}\n     */\n\n\n    const outputMessage = (boundary, list, index, callback) => {\n      if (index < list.length) {\n        output(`--${boundary}${CRLF$1}`);\n\n        if (list[index].related) {\n          outputRelated(list[index], () => outputMessage(boundary, list, index + 1, callback));\n        } else {\n          outputAttachment(list[index], () => outputMessage(boundary, list, index + 1, callback));\n        }\n      } else {\n        output(`${CRLF$1}--${boundary}--${CRLF$1}${CRLF$1}`);\n        callback();\n      }\n    };\n\n    const outputMixed = () => {\n      const boundary = generateBoundary();\n      output(`Content-Type: multipart/mixed; boundary=\"${boundary}\"${CRLF$1}${CRLF$1}--${boundary}${CRLF$1}`);\n\n      if (this.message.alternative == null) {\n        outputText(this.message);\n        outputMessage(boundary, this.message.attachments, 0, close$1);\n      } else {\n        outputAlternative( // typescript bug; should narrow to { alternative: MessageAttachment }\n        this.message, () => outputMessage(boundary, this.message.attachments, 0, close$1));\n      }\n    };\n    /**\n     * @param {MessageAttachment} attachment the metadata to use as headers\n     * @param {function(): void} callback the function to call after output is finished\n     * @returns {void}\n     */\n\n\n    const outputData = (attachment, callback) => {\n      var _a, _b;\n\n      outputBase64(attachment.encoded ? (_a = attachment.data) !== null && _a !== void 0 ? _a : '' : Buffer.from((_b = attachment.data) !== null && _b !== void 0 ? _b : '').toString('base64'), callback);\n    };\n    /**\n     * @param {Message} message the message to output\n     * @returns {void}\n     */\n\n\n    const outputText = message => {\n      let data = [];\n      data = data.concat(['Content-Type:', message.content, CRLF$1, 'Content-Transfer-Encoding: 7bit', CRLF$1]);\n      data = data.concat(['Content-Disposition: inline', CRLF$1, CRLF$1]);\n      data = data.concat([message.text || '', CRLF$1, CRLF$1]);\n      output(data.join(''));\n    };\n    /**\n     * @param {MessageAttachment} message the message to output\n     * @param {function(): void} callback the function to call after output is finished\n     * @returns {void}\n     */\n\n\n    const outputRelated = (message, callback) => {\n      const boundary = generateBoundary();\n      output(`Content-Type: multipart/related; boundary=\"${boundary}\"${CRLF$1}${CRLF$1}--${boundary}${CRLF$1}`);\n      outputAttachment(message, () => {\n        var _a;\n\n        outputMessage(boundary, (_a = message.related) !== null && _a !== void 0 ? _a : [], 0, () => {\n          output(`${CRLF$1}--${boundary}--${CRLF$1}${CRLF$1}`);\n          callback();\n        });\n      });\n    };\n    /**\n     * @param {Message} message the message to output\n     * @param {function(): void} callback the function to call after output is finished\n     * @returns {void}\n     */\n\n\n    const outputAlternative = (message, callback) => {\n      const boundary = generateBoundary();\n      output(`Content-Type: multipart/alternative; boundary=\"${boundary}\"${CRLF$1}${CRLF$1}--${boundary}${CRLF$1}`);\n      outputText(message);\n      output(`--${boundary}${CRLF$1}`);\n      /**\n       * @returns {void}\n       */\n\n      const finish = () => {\n        output([CRLF$1, '--', boundary, '--', CRLF$1, CRLF$1].join(''));\n        callback();\n      };\n\n      if (message.alternative.related) {\n        outputRelated(message.alternative, finish);\n      } else {\n        outputAttachment(message.alternative, finish);\n      }\n    };\n\n    const close$1 = err => {\n      var _a, _b;\n\n      if (err) {\n        this.emit('error', err);\n      } else {\n        this.emit('data', (_b = (_a = this.buffer) === null || _a === void 0 ? void 0 : _a.toString('utf-8', 0, this.bufferIndex)) !== null && _b !== void 0 ? _b : '');\n        this.emit('end');\n      }\n\n      this.buffer = null;\n      this.bufferIndex = 0;\n      this.readable = false;\n      this.removeAllListeners('resume');\n      this.removeAllListeners('pause');\n      this.removeAllListeners('error');\n      this.removeAllListeners('data');\n      this.removeAllListeners('end');\n    };\n    /**\n     * @returns {void}\n     */\n\n\n    const outputHeaderData = () => {\n      if (this.message.attachments.length || this.message.alternative) {\n        output(`MIME-Version: 1.0${CRLF$1}`);\n        outputMixed();\n      } // you only have a text message!\n      else {\n        outputText(this.message);\n        close$1();\n      }\n    };\n    /**\n     * @returns {void}\n     */\n\n\n    const outputHeader = () => {\n      let data = [];\n\n      for (const header in this.message.header) {\n        // do not output BCC in the headers (regex) nor custom Object.prototype functions...\n        if (!/bcc/i.test(header) && Object.prototype.hasOwnProperty.call(this.message.header, header)) {\n          data = data.concat([convertDashDelimitedTextToSnakeCase(header), ': ', this.message.header[header], CRLF$1]);\n        }\n      }\n\n      output(data.join(''));\n      outputHeaderData();\n    };\n\n    this.once('destroy', close$1);\n    process.nextTick(outputHeader);\n  }\n  /**\n   * @public\n   * pause the stream\n   * @returns {void}\n   */\n\n\n  pause() {\n    this.paused = true;\n    this.emit('pause');\n  }\n  /**\n   * @public\n   * resume the stream\n   * @returns {void}\n   */\n\n\n  resume() {\n    this.paused = false;\n    this.emit('resume');\n  }\n  /**\n   * @public\n   * destroy the stream\n   * @returns {void}\n   */\n\n\n  destroy() {\n    this.emit('destroy', this.bufferIndex > 0 ? {\n      message: 'message stream destroyed'\n    } : null);\n  }\n  /**\n   * @public\n   * destroy the stream at first opportunity\n   * @returns {void}\n   */\n\n\n  destroySoon() {\n    this.emit('destroy');\n  }\n\n}\n/**\n * @readonly\n * @enum\n */\n\n\nconst SMTPErrorStates = {\n  COULDNOTCONNECT: 1,\n  BADRESPONSE: 2,\n  AUTHFAILED: 3,\n  TIMEDOUT: 4,\n  ERROR: 5,\n  NOCONNECTION: 6,\n  AUTHNOTSUPPORTED: 7,\n  CONNECTIONCLOSED: 8,\n  CONNECTIONENDED: 9,\n  CONNECTIONAUTH: 10\n};\n\nclass SMTPError extends Error {\n  /**\n   * @protected\n   * @param {string} message error message\n   */\n  constructor(message) {\n    super(message);\n    this.code = null;\n    this.smtp = null;\n    this.previous = null;\n  }\n  /**\n   *\n   * @param {string} message error message\n   * @param {number} code smtp error state\n   * @param {Error | null} error previous error\n   * @param {unknown} smtp arbitrary data\n   * @returns {SMTPError} error\n   */\n\n\n  static create(message, code, error, smtp) {\n    const msg = (error === null || error === void 0 ? void 0 : error.message) ? `${message} (${error.message})` : message;\n    const err = new SMTPError(msg);\n    err.code = code;\n    err.smtp = smtp;\n\n    if (error) {\n      err.previous = error;\n    }\n\n    return err;\n  }\n\n}\n\nclass SMTPResponseMonitor {\n  constructor(stream, timeout, onerror) {\n    let buffer = '';\n\n    const notify = () => {\n      var _a, _b;\n\n      if (buffer.length) {\n        // parse buffer for response codes\n        const line = buffer.replace('\\r', '');\n\n        if (!((_b = (_a = line.trim().split(/\\n/).pop()) === null || _a === void 0 ? void 0 : _a.match(/^(\\d{3})\\s/)) !== null && _b !== void 0 ? _b : false)) {\n          return;\n        }\n\n        const match = line ? line.match(/(\\d+)\\s?(.*)/) : null;\n        const data = match !== null ? {\n          code: match[1],\n          message: match[2],\n          data: line\n        } : {\n          code: -1,\n          data: line\n        };\n        stream.emit('response', null, data);\n        buffer = '';\n      }\n    };\n\n    const error = err => {\n      stream.emit('response', SMTPError.create('connection encountered an error', SMTPErrorStates.ERROR, err));\n    };\n\n    const timedout = err => {\n      stream.end();\n      stream.emit('response', SMTPError.create('timedout while connecting to smtp server', SMTPErrorStates.TIMEDOUT, err));\n    };\n\n    const watch = data => {\n      if (data !== null) {\n        buffer += data.toString();\n        notify();\n      }\n    };\n\n    const close = err => {\n      stream.emit('response', SMTPError.create('connection has closed', SMTPErrorStates.CONNECTIONCLOSED, err));\n    };\n\n    const end = err => {\n      stream.emit('response', SMTPError.create('connection has ended', SMTPErrorStates.CONNECTIONENDED, err));\n    };\n\n    this.stop = err => {\n      stream.removeAllListeners('response');\n      stream.removeListener('data', watch);\n      stream.removeListener('end', end);\n      stream.removeListener('close', close);\n      stream.removeListener('error', error);\n\n      if (err != null && typeof onerror === 'function') {\n        onerror(err);\n      }\n    };\n\n    stream.on('data', watch);\n    stream.on('end', end);\n    stream.on('close', close);\n    stream.on('error', error);\n    stream.setTimeout(timeout, timedout);\n  }\n\n}\n/**\n * @readonly\n * @enum\n */\n\n\nconst AUTH_METHODS = {\n  PLAIN: 'PLAIN',\n  'CRAM-MD5': 'CRAM-MD5',\n  LOGIN: 'LOGIN',\n  XOAUTH2: 'XOAUTH2'\n};\n/**\n * @readonly\n * @enum\n */\n\nconst SMTPState = {\n  NOTCONNECTED: 0,\n  CONNECTING: 1,\n  CONNECTED: 2\n};\nconst DEFAULT_TIMEOUT = 5000;\nconst SMTP_PORT = 25;\nconst SMTP_SSL_PORT = 465;\nconst SMTP_TLS_PORT = 587;\nconst CRLF = '\\r\\n';\nconst GREYLIST_DELAY = 300;\nlet DEBUG = 0;\n/**\n * @param {...any[]} args the message(s) to log\n * @returns {void}\n */\n\nconst log = function () {\n  if (DEBUG === 1) {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    args.forEach(d => console.log(typeof d === 'object' ? d instanceof Error ? d.message : JSON.stringify(d) : d));\n  }\n};\n/**\n * @param {function(...any[]): void} callback the function to call\n * @param {...any[]} args the arguments to apply to the function\n * @returns {void}\n */\n\n\nconst caller = function (callback) {\n  if (typeof callback === 'function') {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    callback(...args);\n  }\n};\n\nclass SMTPConnection extends EventEmitter {\n  /**\n   * SMTP class written using python's (2.7) smtplib.py as a base.\n   *\n   * To target a Message Transfer Agent (MTA), omit all options.\n   *\n   * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n   */\n  constructor() {\n    let {\n      timeout,\n      host,\n      user,\n      password,\n      domain,\n      port,\n      ssl,\n      tls,\n      logger,\n      authentication\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _a;\n\n    super();\n    this.timeout = DEFAULT_TIMEOUT;\n    this.log = log;\n    this.authentication = [AUTH_METHODS['CRAM-MD5'], AUTH_METHODS.LOGIN, AUTH_METHODS.PLAIN, AUTH_METHODS.XOAUTH2];\n    this._state = SMTPState.NOTCONNECTED;\n    this._secure = false;\n    this.loggedin = false;\n    this.sock = null;\n    this.features = null;\n    this.monitor = null;\n    this.domain = hostname();\n    this.host = 'localhost';\n    this.ssl = false;\n    this.tls = false;\n    this.greylistResponseTracker = new WeakSet();\n\n    if (Array.isArray(authentication)) {\n      this.authentication = authentication;\n    }\n\n    if (typeof timeout === 'number') {\n      this.timeout = timeout;\n    }\n\n    if (typeof domain === 'string') {\n      this.domain = domain;\n    }\n\n    if (typeof host === 'string') {\n      this.host = host;\n    }\n\n    if (ssl != null && (typeof ssl === 'boolean' || typeof ssl === 'object' && Array.isArray(ssl) === false)) {\n      this.ssl = ssl;\n    }\n\n    if (tls != null && (typeof tls === 'boolean' || typeof tls === 'object' && Array.isArray(tls) === false)) {\n      this.tls = tls;\n    }\n\n    this.port = port || (ssl ? SMTP_SSL_PORT : tls ? SMTP_TLS_PORT : SMTP_PORT);\n    this.loggedin = user && password ? false : true;\n\n    if (!user && ((_a = password === null || password === void 0 ? void 0 : password.length) !== null && _a !== void 0 ? _a : 0) > 0) {\n      throw new Error('`password` cannot be set without `user`');\n    } // keep these strings hidden when quicky debugging/logging\n\n\n    this.user = () => user;\n\n    this.password = () => password;\n\n    if (typeof logger === 'function') {\n      this.log = log;\n    }\n  }\n  /**\n   * @public\n   * @param {0 | 1} level -\n   * @returns {void}\n   */\n\n\n  debug(level) {\n    DEBUG = level;\n  }\n  /**\n   * @public\n   * @returns {SMTPState} the current state\n   */\n\n\n  state() {\n    return this._state;\n  }\n  /**\n   * @public\n   * @returns {boolean} whether or not the instance is authorized\n   */\n\n\n  authorized() {\n    return this.loggedin;\n  }\n  /**\n   * Establish an SMTP connection.\n   *\n   * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n   *\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {number} [port] the port to use for the connection\n   * @param {string} [host] the hostname to use for the connection\n   * @param {ConnectOptions} [options={}] the options\n   * @returns {void}\n   */\n\n\n  connect(callback) {\n    let port = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.port;\n    let host = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.host;\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    this.port = port;\n    this.host = host;\n    this.ssl = options.ssl || this.ssl;\n\n    if (this._state !== SMTPState.NOTCONNECTED) {\n      this.quit(() => this.connect(callback, port, host, options));\n    }\n    /**\n     * @returns {void}\n     */\n\n\n    const connected = () => {\n      this.log(`connected: ${this.host}:${this.port}`);\n\n      if (this.ssl && !this.tls) {\n        // if key/ca/cert was passed in, check if connection is authorized\n        if (typeof this.ssl !== 'boolean' && this.sock instanceof TLSSocket && !this.sock.authorized) {\n          this.close(true);\n          caller(callback, SMTPError.create('could not establish an ssl connection', SMTPErrorStates.CONNECTIONAUTH));\n        } else {\n          this._secure = true;\n        }\n      }\n    };\n    /**\n     * @param {Error} err err\n     * @returns {void}\n     */\n\n\n    const connectedErrBack = err => {\n      if (!err) {\n        connected();\n      } else {\n        this.close(true);\n        this.log(err);\n        caller(callback, SMTPError.create('could not connect', SMTPErrorStates.COULDNOTCONNECT, err));\n      }\n    };\n\n    const response = (err, msg) => {\n      if (err) {\n        if (this._state === SMTPState.NOTCONNECTED && !this.sock) {\n          return;\n        }\n\n        this.close(true);\n        caller(callback, err);\n      } else if (msg.code == '220') {\n        this.log(msg.data); // might happen first, so no need to wait on connected()\n\n        this._state = SMTPState.CONNECTED;\n        caller(callback, null, msg.data);\n      } else {\n        this.log(`response (data): ${msg.data}`);\n        this.quit(() => {\n          caller(callback, SMTPError.create('bad response on connection', SMTPErrorStates.BADRESPONSE, err, msg.data));\n        });\n      }\n    };\n\n    this._state = SMTPState.CONNECTING;\n    this.log(`connecting: ${this.host}:${this.port}`);\n\n    if (this.ssl) {\n      this.sock = connect(this.port, this.host.trim(), typeof this.ssl === 'object' ? this.ssl : {}, connected);\n    } else {\n      this.sock = new Socket();\n      this.sock.connect(this.port, this.host.trim(), connectedErrBack);\n    }\n\n    this.monitor = new SMTPResponseMonitor(this.sock, this.timeout, () => this.close(true));\n    this.sock.once('response', response);\n    this.sock.once('error', response); // the socket could reset or throw, so let's handle it and let the user know\n  }\n  /**\n   * @public\n   * @param {string} str the string to send\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n\n\n  send(str, callback) {\n    if (this.sock != null && this._state === SMTPState.CONNECTED) {\n      this.log(str);\n      this.sock.once('response', (err, msg) => {\n        if (err) {\n          caller(callback, err);\n        } else {\n          this.log(msg.data);\n          caller(callback, null, msg);\n        }\n      });\n\n      if (this.sock.writable) {\n        this.sock.write(str);\n      }\n    } else {\n      this.close(true);\n      caller(callback, SMTPError.create('no connection has been established', SMTPErrorStates.NOCONNECTION));\n    }\n  }\n  /**\n   * @public\n   * @param {string} cmd command to issue\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {(number[] | number)} [codes=[250]] array codes\n   * @returns {void}\n   */\n\n\n  command(cmd, callback) {\n    let codes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [250];\n    const codesArray = Array.isArray(codes) ? codes : typeof codes === 'number' ? [codes] : [250];\n\n    const response = (err, msg) => {\n      if (err) {\n        caller(callback, err);\n      } else {\n        const code = Number(msg.code);\n\n        if (codesArray.indexOf(code) !== -1) {\n          caller(callback, err, msg.data, msg.message);\n        } else if ((code === 450 || code === 451) && msg.message.toLowerCase().includes('greylist') && this.greylistResponseTracker.has(response) === false) {\n          this.greylistResponseTracker.add(response);\n          setTimeout(() => {\n            this.send(cmd + CRLF, response);\n          }, GREYLIST_DELAY);\n        } else {\n          const suffix = msg.message ? `: ${msg.message}` : '';\n          const errorMessage = `bad response on command '${cmd.split(' ')[0]}'${suffix}`;\n          caller(callback, SMTPError.create(errorMessage, SMTPErrorStates.BADRESPONSE, null, msg.data));\n        }\n      }\n    };\n\n    this.greylistResponseTracker.delete(response);\n    this.send(cmd + CRLF, response);\n  }\n  /**\n   * @public\n   * @description SMTP 'helo' command.\n   *\n   * Hostname to send for self command defaults to the FQDN of the local\n   * host.\n   *\n   * As this command was deprecated by rfc2821, it should only be used for compatibility with non-compliant servers.\n   * @see https://tools.ietf.org/html/rfc2821#appendix-F.3\n   *\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} domain the domain to associate with the 'helo' request\n   * @returns {void}\n   */\n\n\n  helo(callback, domain) {\n    this.command(`helo ${domain || this.domain}`, (err, data) => {\n      if (err) {\n        caller(callback, err);\n      } else {\n        this.parse_smtp_features(data);\n        caller(callback, err, data);\n      }\n    });\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n\n\n  starttls(callback) {\n    const response = (err, msg) => {\n      if (this.sock == null) {\n        throw new Error('null socket');\n      }\n\n      if (err) {\n        err.message += ' while establishing a starttls session';\n        caller(callback, err);\n      } else {\n        const secureContext = createSecureContext(typeof this.tls === 'object' ? this.tls : {});\n        const secureSocket = new TLSSocket(this.sock, {\n          secureContext\n        });\n        secureSocket.on('error', err => {\n          this.close(true);\n          caller(callback, err);\n        });\n        this._secure = true;\n        this.sock = secureSocket;\n        new SMTPResponseMonitor(this.sock, this.timeout, () => this.close(true));\n        caller(callback, msg.data);\n      }\n    };\n\n    this.command('starttls', response, [220]);\n  }\n  /**\n   * @public\n   * @param {string} data the string to parse for features\n   * @returns {void}\n   */\n\n\n  parse_smtp_features(data) {\n    //  According to RFC1869 some (badly written)\n    //  MTA's will disconnect on an ehlo. Toss an exception if\n    //  that happens -ddm\n    data.split('\\n').forEach(ext => {\n      const parse = ext.match(/^(?:\\d+[-=]?)\\s*?([^\\s]+)(?:\\s+(.*)\\s*?)?$/); // To be able to communicate with as many SMTP servers as possible,\n      // we have to take the old-style auth advertisement into account,\n      // because:\n      // 1) Else our SMTP feature parser gets confused.\n      // 2) There are some servers that only advertise the auth methods we\n      // support using the old style.\n\n      if (parse != null && this.features != null) {\n        // RFC 1869 requires a space between ehlo keyword and parameters.\n        // It's actually stricter, in that only spaces are allowed between\n        // parameters, but were not going to check for that here.  Note\n        // that the space isn't present if there are no parameters.\n        this.features[parse[1].toLowerCase()] = parse[2] || true;\n      }\n    });\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} domain the domain to associate with the 'ehlo' request\n   * @returns {void}\n   */\n\n\n  ehlo(callback, domain) {\n    this.features = {};\n    this.command(`ehlo ${domain || this.domain}`, (err, data) => {\n      if (err) {\n        caller(callback, err);\n      } else {\n        this.parse_smtp_features(data);\n\n        if (this.tls && !this._secure) {\n          this.starttls(() => this.ehlo(callback, domain));\n        } else {\n          caller(callback, err, data);\n        }\n      }\n    });\n  }\n  /**\n   * @public\n   * @param {string} opt the features keyname to check\n   * @returns {boolean} whether the extension exists\n   */\n\n\n  has_extn(opt) {\n    var _a;\n\n    return ((_a = this.features) !== null && _a !== void 0 ? _a : {})[opt.toLowerCase()] === undefined;\n  }\n  /**\n   * @public\n   * @description SMTP 'help' command, returns text from the server\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} domain the domain to associate with the 'help' request\n   * @returns {void}\n   */\n\n\n  help(callback, domain) {\n    this.command(domain ? `help ${domain}` : 'help', callback, [211, 214]);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n\n\n  rset(callback) {\n    this.command('rset', callback);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n\n\n  noop(callback) {\n    this.send('noop', callback);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} from the sender\n   * @returns {void}\n   */\n\n\n  mail(callback, from) {\n    this.command(`mail FROM:${from}`, callback);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} to the receiver\n   * @returns {void}\n   */\n\n\n  rcpt(callback, to) {\n    this.command(`RCPT TO:${to}`, callback, [250, 251]);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n\n\n  data(callback) {\n    this.command('data', callback, [354]);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n\n\n  data_end(callback) {\n    this.command(`${CRLF}.`, callback);\n  }\n  /**\n   * @public\n   * @param {string} data the message to send\n   * @returns {void}\n   */\n\n\n  message(data) {\n    var _a, _b;\n\n    this.log(data);\n    (_b = (_a = this.sock) === null || _a === void 0 ? void 0 : _a.write(data)) !== null && _b !== void 0 ? _b : this.log('no socket to write to');\n  }\n  /**\n   * @public\n   * @description SMTP 'verify' command -- checks for address validity.\n   * @param {string} address the address to validate\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n\n\n  verify(address, callback) {\n    this.command(`vrfy ${address}`, callback, [250, 251, 252]);\n  }\n  /**\n   * @public\n   * @description SMTP 'expn' command -- expands a mailing list.\n   * @param {string} address the mailing list to expand\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n\n\n  expn(address, callback) {\n    this.command(`expn ${address}`, callback);\n  }\n  /**\n   * @public\n   * @description Calls this.ehlo() and, if an error occurs, this.helo().\n   *\n   * If there has been no previous EHLO or HELO command self session, self\n   * method tries ESMTP EHLO first.\n   *\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} [domain] the domain to associate with the command\n   * @returns {void}\n   */\n\n\n  ehlo_or_helo_if_needed(callback, domain) {\n    // is this code callable...?\n    if (!this.features) {\n      const response = (err, data) => caller(callback, err, data);\n\n      this.ehlo((err, data) => {\n        if (err) {\n          this.helo(response, domain);\n        } else {\n          caller(callback, err, data);\n        }\n      }, domain);\n    }\n  }\n  /**\n   * @public\n   *\n   * Log in on an SMTP server that requires authentication.\n   *\n   * If there has been no previous EHLO or HELO command self session, self\n   * method tries ESMTP EHLO first.\n   *\n   * This method will return normally if the authentication was successful.\n   *\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} [user] the username to authenticate with\n   * @param {string} [password] the password for the authentication\n   * @param {{ method: string, domain: string }} [options] login options\n   * @returns {void}\n   */\n\n\n  login(callback, user, password) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    var _a, _b;\n\n    const login = {\n      user: user ? () => user : this.user,\n      password: password ? () => password : this.password,\n      method: (_b = (_a = options === null || options === void 0 ? void 0 : options.method) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : ''\n    };\n    const domain = (options === null || options === void 0 ? void 0 : options.domain) || this.domain;\n\n    const initiate = (err, data) => {\n      var _a;\n\n      if (err) {\n        caller(callback, err);\n        return;\n      }\n\n      let method = null;\n      /**\n       * @param {string} challenge challenge\n       * @returns {string} base64 cram hash\n       */\n\n      const encodeCramMd5 = challenge => {\n        const hmac = createHmac('md5', login.password());\n        hmac.update(Buffer.from(challenge, 'base64').toString('ascii'));\n        return Buffer.from(`${login.user()} ${hmac.digest('hex')}`).toString('base64');\n      };\n      /**\n       * @returns {string} base64 login/password\n       */\n\n\n      const encodePlain = () => Buffer.from(`\\u0000${login.user()}\\u0000${login.password()}`).toString('base64');\n      /**\n       * @see https://developers.google.com/gmail/xoauth2_protocol\n       * @returns {string} base64 xoauth2 auth token\n       */\n\n\n      const encodeXoauth2 = () => Buffer.from(`user=${login.user()}\\u0001auth=Bearer ${login.password()}\\u0001\\u0001`).toString('base64'); // List of authentication methods we support: from preferred to\n      // less preferred methods.\n\n\n      if (!method) {\n        const preferred = this.authentication;\n        let auth = '';\n\n        if (typeof ((_a = this.features) === null || _a === void 0 ? void 0 : _a['auth']) === 'string') {\n          auth = this.features['auth'];\n        }\n\n        for (let i = 0; i < preferred.length; i++) {\n          if (auth.includes(preferred[i])) {\n            method = preferred[i];\n            break;\n          }\n        }\n      }\n      /**\n       * handle bad responses from command differently\n       * @param {Error} err err\n       * @param {unknown} data data\n       * @returns {void}\n       */\n\n\n      const failed = (err, data) => {\n        this.loggedin = false;\n        this.close(); // if auth is bad, close the connection, it won't get better by itself\n\n        caller(callback, SMTPError.create('authorization.failed', SMTPErrorStates.AUTHFAILED, err, data));\n      };\n      /**\n       * @param {Error} err err\n       * @param {unknown} data data\n       * @returns {void}\n       */\n\n\n      const response = (err, data) => {\n        if (err) {\n          failed(err, data);\n        } else {\n          this.loggedin = true;\n          caller(callback, err, data);\n        }\n      };\n      /**\n       * @param {Error} err err\n       * @param {unknown} data data\n       * @param {string} msg msg\n       * @returns {void}\n       */\n\n\n      const attempt = (err, data, msg) => {\n        if (err) {\n          failed(err, data);\n        } else {\n          if (method === AUTH_METHODS['CRAM-MD5']) {\n            this.command(encodeCramMd5(msg), response, [235, 503]);\n          } else if (method === AUTH_METHODS.LOGIN) {\n            this.command(Buffer.from(login.password()).toString('base64'), response, [235, 503]);\n          }\n        }\n      };\n      /**\n       * @param {Error} err err\n       * @param {unknown} data data\n       * @param {string} msg msg\n       * @returns {void}\n       */\n\n\n      const attemptUser = (err, data) => {\n        if (err) {\n          failed(err, data);\n        } else {\n          if (method === AUTH_METHODS.LOGIN) {\n            this.command(Buffer.from(login.user()).toString('base64'), attempt, [334]);\n          }\n        }\n      };\n\n      switch (method) {\n        case AUTH_METHODS['CRAM-MD5']:\n          this.command(`AUTH  ${AUTH_METHODS['CRAM-MD5']}`, attempt, [334]);\n          break;\n\n        case AUTH_METHODS.LOGIN:\n          this.command(`AUTH ${AUTH_METHODS.LOGIN}`, attemptUser, [334]);\n          break;\n\n        case AUTH_METHODS.PLAIN:\n          this.command(`AUTH ${AUTH_METHODS.PLAIN} ${encodePlain()}`, response, [235, 503]);\n          break;\n\n        case AUTH_METHODS.XOAUTH2:\n          this.command(`AUTH ${AUTH_METHODS.XOAUTH2} ${encodeXoauth2()}`, response, [235, 503]);\n          break;\n\n        default:\n          caller(callback, SMTPError.create('no form of authorization supported', SMTPErrorStates.AUTHNOTSUPPORTED, null, data));\n          break;\n      }\n    };\n\n    this.ehlo_or_helo_if_needed(initiate, domain);\n  }\n  /**\n   * @public\n   * @param {boolean} [force=false] whether or not to force destroy the connection\n   * @returns {void}\n   */\n\n\n  close() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (this.sock) {\n      if (force) {\n        this.log('smtp connection destroyed!');\n        this.sock.destroy();\n      } else {\n        this.log('smtp connection closed.');\n        this.sock.end();\n      }\n    }\n\n    if (this.monitor) {\n      this.monitor.stop();\n      this.monitor = null;\n    }\n\n    this._state = SMTPState.NOTCONNECTED;\n    this._secure = false;\n    this.sock = null;\n    this.features = null;\n    this.loggedin = !(this.user() && this.password());\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} [callback] function to call after response\n   * @returns {void}\n   */\n\n\n  quit(callback) {\n    this.command('quit', (err, data) => {\n      caller(callback, err, data);\n      this.close();\n    }, [221, 250]);\n  }\n\n}\n\nclass SMTPClient {\n  /**\n   * Create a standard SMTP client backed by a self-managed SMTP connection.\n   *\n   * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n   *\n   * @param {SMTPConnectionOptions} server smtp options\n   */\n  constructor(server) {\n    this.queue = [];\n    this.sending = false;\n    this.ready = false;\n    this.timer = null;\n    this.smtp = new SMTPConnection(server);\n  }\n  /**\n   * @public\n   * @param {Message} msg the message to send\n   * @param {function(err: Error, msg: Message): void} callback .\n   * @returns {void}\n   */\n\n\n  send(msg, callback) {\n    const message = msg instanceof Message ? msg : this._canMakeMessage(msg) ? new Message(msg) : null;\n\n    if (message == null) {\n      callback(new Error('message is not a valid Message instance'), msg);\n      return;\n    }\n\n    const {\n      isValid,\n      validationError\n    } = message.checkValidity();\n\n    if (isValid) {\n      const stack = this.createMessageStack(message, callback);\n\n      if (stack.to.length === 0) {\n        return callback(new Error('No recipients found in message'), msg);\n      }\n\n      this.queue.push(stack);\n\n      this._poll();\n    } else {\n      callback(new Error(validationError), msg);\n    }\n  }\n  /**\n   * @public\n   * @param {Message} msg the message to send\n   * @returns {Promise<Message>} a promise that resolves to the fully processed message\n   */\n\n\n  sendAsync(msg) {\n    return new Promise((resolve, reject) => {\n      this.send(msg, (err, msg) => {\n        if (err != null) {\n          reject(err);\n        } else {\n          resolve(msg);\n        }\n      });\n    });\n  }\n  /**\n   * @public\n   * @description Converts a message to the raw object used by the internal stack.\n   * @param {Message} message message to convert\n   * @param {function(err: Error, msg: Message): void} callback errback\n   * @returns {MessageStack} raw message object\n   */\n\n\n  createMessageStack(message) {\n    let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n      /* ø */\n    };\n    const [{\n      address: from\n    }] = addressparser(message.header.from);\n    const stack = {\n      message,\n      to: [],\n      from,\n      callback: callback.bind(this)\n    };\n    const {\n      header: {\n        to,\n        cc,\n        bcc,\n        'return-path': returnPath\n      }\n    } = message;\n\n    if ((typeof to === 'string' || Array.isArray(to)) && to.length > 0) {\n      stack.to = addressparser(to);\n    }\n\n    if ((typeof cc === 'string' || Array.isArray(cc)) && cc.length > 0) {\n      stack.to = stack.to.concat(addressparser(cc).filter(x => stack.to.some(y => y.address === x.address) === false));\n    }\n\n    if ((typeof bcc === 'string' || Array.isArray(bcc)) && bcc.length > 0) {\n      stack.to = stack.to.concat(addressparser(bcc).filter(x => stack.to.some(y => y.address === x.address) === false));\n    }\n\n    if (typeof returnPath === 'string' && returnPath.length > 0) {\n      const parsedReturnPath = addressparser(returnPath);\n\n      if (parsedReturnPath.length > 0) {\n        const [{\n          address: returnPathAddress\n        }] = parsedReturnPath;\n        stack.returnPath = returnPathAddress;\n      }\n    }\n\n    return stack;\n  }\n  /**\n   * @protected\n   * @returns {void}\n   */\n\n\n  _poll() {\n    if (this.timer != null) {\n      clearTimeout(this.timer);\n    }\n\n    if (this.queue.length) {\n      if (this.smtp.state() == SMTPState.NOTCONNECTED) {\n        this._connect(this.queue[0]);\n      } else if (this.smtp.state() == SMTPState.CONNECTED && !this.sending && this.ready) {\n        this._sendmail(this.queue.shift());\n      }\n    } // wait around 1 seconds in case something does come in,\n    // otherwise close out SMTP connection if still open\n    else if (this.smtp.state() == SMTPState.CONNECTED) {\n      this.timer = setTimeout(() => this.smtp.quit(), 1000);\n    }\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n\n\n  _connect(stack) {\n    /**\n     * @param {Error} err callback error\n     * @returns {void}\n     */\n    const connect = err => {\n      if (!err) {\n        const begin = err => {\n          if (!err) {\n            this.ready = true;\n\n            this._poll();\n          } else {\n            stack.callback(err, stack.message); // clear out the queue so all callbacks can be called with the same error message\n\n            this.queue.shift();\n\n            this._poll();\n          }\n        };\n\n        if (!this.smtp.authorized()) {\n          this.smtp.login(begin);\n        } else {\n          this.smtp.ehlo_or_helo_if_needed(begin);\n        }\n      } else {\n        stack.callback(err, stack.message); // clear out the queue so all callbacks can be called with the same error message\n\n        this.queue.shift();\n\n        this._poll();\n      }\n    };\n\n    this.ready = false;\n    this.smtp.connect(connect);\n  }\n  /**\n   * @protected\n   * @param {MessageStack} msg message stack\n   * @returns {boolean} can make message\n   */\n\n\n  _canMakeMessage(msg) {\n    return msg.from && (msg.to || msg.cc || msg.bcc) && (msg.text !== undefined || this._containsInlinedHtml(msg.attachment));\n  }\n  /**\n   * @protected\n   * @param {MessageAttachment | MessageAttachment[]} attachment attachment\n   * @returns {boolean} whether the attachment contains inlined html\n   */\n\n\n  _containsInlinedHtml(attachment) {\n    if (Array.isArray(attachment)) {\n      return attachment.some(att => {\n        return this._isAttachmentInlinedHtml(att);\n      });\n    } else {\n      return this._isAttachmentInlinedHtml(attachment);\n    }\n  }\n  /**\n   * @protected\n   * @param {MessageAttachment} attachment attachment\n   * @returns {boolean} whether the attachment is inlined html\n   */\n\n\n  _isAttachmentInlinedHtml(attachment) {\n    return attachment && (attachment.data || attachment.path) && attachment.alternative === true;\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @param {function(MessageStack): void} next next\n   * @returns {function(Error): void} callback\n   */\n\n\n  _sendsmtp(stack, next) {\n    /**\n     * @param {Error} [err] error\n     * @returns {void}\n     */\n    return err => {\n      if (!err && next) {\n        next.apply(this, [stack]);\n      } else {\n        // if we snag on SMTP commands, call done, passing the error\n        // but first reset SMTP state so queue can continue polling\n        this.smtp.rset(() => this._senddone(err, stack));\n      }\n    };\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n\n\n  _sendmail(stack) {\n    const from = stack.returnPath || stack.from;\n    this.sending = true;\n    this.smtp.mail(this._sendsmtp(stack, this._sendrcpt), '<' + from + '>');\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n\n\n  _sendrcpt(stack) {\n    var _a;\n\n    if (stack.to == null || typeof stack.to === 'string') {\n      throw new TypeError('stack.to must be array');\n    }\n\n    const to = (_a = stack.to.shift()) === null || _a === void 0 ? void 0 : _a.address;\n    this.smtp.rcpt(this._sendsmtp(stack, stack.to.length ? this._sendrcpt : this._senddata), `<${to}>`);\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n\n\n  _senddata(stack) {\n    this.smtp.data(this._sendsmtp(stack, this._sendmessage));\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n\n\n  _sendmessage(stack) {\n    const stream = stack.message.stream();\n    stream.on('data', data => this.smtp.message(data));\n    stream.on('end', () => {\n      this.smtp.data_end(this._sendsmtp(stack, () => this._senddone(null, stack)));\n    }); // there is no way to cancel a message while in the DATA portion,\n    // so we have to close the socket to prevent a bad email from going out\n\n    stream.on('error', err => {\n      this.smtp.close();\n\n      this._senddone(err, stack);\n    });\n  }\n  /**\n   * @protected\n   * @param {Error} err err\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n\n\n  _senddone(err, stack) {\n    this.sending = false;\n    stack.callback(err, stack.message);\n\n    this._poll();\n  }\n\n}\n\nexport { AUTH_METHODS, BUFFERSIZE, DEFAULT_TIMEOUT, MIME64CHUNK, MIMECHUNK, Message, SMTPClient, SMTPConnection, SMTPError, SMTPErrorStates, SMTPResponseMonitor, SMTPState, addressparser, getRFC2822Date, getRFC2822DateUTC, isRFC2822Date, mimeEncode, mimeWordEncode };","map":{"version":3,"mappings":";;;;;;;;AAWA;;;;AAGA,MAAMA,SAAS,GAAG,IAAIC,GAAJ,CAAQ,CACzB,CAAC,GAAD,EAAM,GAAN,CADyB,EAEzB,CAAC,GAAD,EAAM,GAAN,CAFyB,EAGzB,CAAC,GAAD,EAAM,GAAN,CAHyB,EAIzB,CAAC,GAAD,EAAM,EAAN,CAJyB;AAMzB,CAAC,GAAD,EAAM,GAAN,CANyB;;;;;;AAazB,CAAC,GAAD,EAAM,EAAN,CAbyB,CAAR,CAAlB;AAgBA;;;;;;;AAMA,SAASC,eAAT,GAAwD;AAAA,MAA/BC,OAA+B,uEAAF,EAAE;;;;AACvD,QAAMC,MAAM,GAAmB,EAA/B;AACA,MAAIC,KAAK,GAA6BC,SAAtC;AACA,MAAIC,QAAQ,GAAuBD,SAAnC;;AAEA,OAAK,MAAME,SAAX,IAAwBL,OAAO,CAACM,QAAR,EAAxB,EAA4C;AAC3C,QAAI,CAAC,cAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEC,MAAV,MAAgB,IAAhB,IAAgBC,aAAhB,GAAgBA,EAAhB,GAAoB,CAArB,IAA0B,CAA1B,IAA+BH,SAAS,KAAKD,QAAjD,EAA2D;AAC1DH,YAAM,CAACQ,IAAP,CAAY;AAAEC,YAAI,EAAE,UAAR;AAAoBC,aAAK,EAAEN;AAA3B,OAAZ;AACAH,WAAK,GAAGC,SAAR;AACAC,cAAQ,GAAGD,SAAX;AACA,KAJD,MAIO,IAAI,CAAC,cAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEI,MAAV,MAAgB,IAAhB,IAAgBK,aAAhB,GAAgBA,EAAhB,GAAoB,CAArB,MAA4B,CAA5B,IAAiCf,SAAS,CAACgB,GAAV,CAAcR,SAAd,CAArC,EAA+D;AACrEJ,YAAM,CAACQ,IAAP,CAAY;AAAEC,YAAI,EAAE,UAAR;AAAoBC,aAAK,EAAEN;AAA3B,OAAZ;AACAH,WAAK,GAAGC,SAAR;AACAC,cAAQ,GAAGP,SAAS,CAACiB,GAAV,CAAcT,SAAd,CAAX;AACA,KAJM,MAIA;AACN,UAAIH,KAAK,IAAI,IAAb,EAAmB;AAClBA,aAAK,GAAG;AAAEQ,cAAI,EAAE,MAAR;AAAgBC,eAAK,EAAEN;AAAvB,SAAR;AACAJ,cAAM,CAACQ,IAAP,CAAYP,KAAZ;AACA,OAHD,MAGO;AACNA,aAAK,CAACS,KAAN,IAAeN,SAAf;AACA;AACD;AACD;;AAED,SAAOJ,MAAM,CACXc,GADK,CACAC,CAAD,IAAE;AACNA,KAAC,CAACL,KAAF,GAAUK,CAAC,CAACL,KAAF,CAAQM,IAAR,EAAV;AACA,WAAOD,CAAP;AACA,GAJK,EAKLE,MALK,CAKGF,CAAD,IAAOA,CAAC,CAACL,KAAF,CAAQJ,MAAR,GAAiB,CAL1B,CAAP;AAMA;AAED;;;;;;;;AAMA,SAASY,oBAAT,CAA8BlB,MAA9B,EAAoD;AACnD,QAAMmB,cAAc,GAAoB,EAAxC;AACA,QAAMC,MAAM,GAAa,EAAzB;AACA,MAAIC,SAAS,GAAa,EAA1B;AACA,MAAIC,QAAQ,GAAa,EAAzB;AACA,MAAIC,KAAK,GAAa,EAAtB;AAEA,MAAIC,KAAK,GAAG,MAAZ;AACA,MAAIC,OAAO,GAAG,KAAd;;AACA,WAASC,WAAT,CAAqBzB,KAArB,EAAwC;AACvC,QAAIA,KAAK,CAACQ,IAAN,KAAe,UAAnB,EAA+B;AAC9B,cAAQR,KAAK,CAACS,KAAd;AACC,aAAK,GAAL;AACCc,eAAK,GAAG,SAAR;AACA;;AACD,aAAK,GAAL;AACCA,eAAK,GAAG,SAAR;AACA;;AACD,aAAK,GAAL;AACCA,eAAK,GAAG,OAAR;AACAC,iBAAO,GAAG,IAAV;AACA;;AACD;AACCD,eAAK,GAAG,MAAR;AACA;AAbF;AAeA,KAhBD,MAgBO,IAAIvB,KAAK,CAACS,KAAN,CAAYJ,MAAZ,GAAqB,CAAzB,EAA4B;AAClC,cAAQkB,KAAR;AACC,aAAK,SAAL;AACCH,mBAAS,CAACb,IAAV,CAAeP,KAAK,CAACS,KAArB;AACA;;AACD,aAAK,SAAL;AACCY,kBAAQ,CAACd,IAAT,CAAcP,KAAK,CAACS,KAApB;AACA;;AACD,aAAK,OAAL;AACCU,gBAAM,CAACZ,IAAP,CAAYP,KAAK,CAACS,KAAlB;AACA;;AACD;AACCa,eAAK,CAACf,IAAN,CAAWP,KAAK,CAACS,KAAjB;AACA;AAZF;AAcA;AACD,GA1CkD;;;AA6CnD,OAAK,MAAMT,KAAX,IAAoBD,MAApB,EAA4B;AAC3B0B,eAAW,CAACzB,KAAD,CAAX;AACA,GA/CkD;;;AAkDnD,MAAIsB,KAAK,CAACjB,MAAN,KAAiB,CAAjB,IAAsBgB,QAAQ,CAAChB,MAAT,GAAkB,CAA5C,EAA+C;AAC9CiB,SAAK,GAAG,CAAC,GAAGD,QAAJ,CAAR;AACAA,YAAQ,GAAG,EAAX;AACA,GArDkD;;;AAwDnD,MAAIG,OAAJ,EAAa;AACZN,kBAAc,CAACX,IAAf,CAAoB;AACnBmB,UAAI,EAAEJ,KAAK,CAACjB,MAAN,KAAiB,CAAjB,GAAqBJ,SAArB,GAAiCqB,KAAK,CAACK,IAAN,CAAW,GAAX,CADpB;AAEnBC,WAAK,EAAET,MAAM,CAACd,MAAP,GAAgB,CAAhB,GAAoBwB,aAAa,CAACV,MAAM,CAACQ,IAAP,CAAY,GAAZ,CAAD,CAAjC,GAAsD;AAF1C,KAApB;AAIA,GALD,MAKO;;AAEN,QAAIP,SAAS,CAACf,MAAV,KAAqB,CAArB,IAA0BiB,KAAK,CAACjB,MAAN,GAAe,CAA7C,EAAgD;AAC/C,WAAK,IAAIyB,CAAC,GAAGR,KAAK,CAACjB,MAAN,GAAe,CAA5B,EAA+ByB,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;AAC3C,YAAIR,KAAK,CAACQ,CAAD,CAAL,CAASC,KAAT,CAAe,mBAAf,CAAJ,EAAyC;AACxCX,mBAAS,GAAGE,KAAK,CAACU,MAAN,CAAaF,CAAb,EAAgB,CAAhB,CAAZ;AACA;AACA;AACD,OAN8C;;;AAS/C,UAAIV,SAAS,CAACf,MAAV,KAAqB,CAAzB,EAA4B;AAC3B,aAAK,IAAIyB,CAAC,GAAGR,KAAK,CAACjB,MAAN,GAAe,CAA5B,EAA+ByB,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;AAC3CR,eAAK,CAACQ,CAAD,CAAL,GAAWR,KAAK,CAACQ,CAAD,CAAL,CACTG,OADS,CACD,2BADC,EAC6BnC,OAAD,IAAgB;AACrD,gBAAIsB,SAAS,CAACf,MAAV,KAAqB,CAAzB,EAA4B;AAC3Be,uBAAS,GAAG,CAACtB,OAAO,CAACiB,IAAR,EAAD,CAAZ;AACA,qBAAO,GAAP;AACA,aAHD,MAGO;AACN,qBAAOjB,OAAP;AACA;AACD,WARS,EASTiB,IATS,EAAX;;AAWA,cAAIK,SAAS,CAACf,MAAV,GAAmB,CAAvB,EAA0B;AACzB;AACA;AACD;AACD;AACD,KA7BK;;;AAgCN,QAAIiB,KAAK,CAACjB,MAAN,KAAiB,CAAjB,IAAsBgB,QAAQ,CAAChB,MAAT,GAAkB,CAA5C,EAA+C;AAC9CiB,WAAK,GAAG,CAAC,GAAGD,QAAJ,CAAR;AACAA,cAAQ,GAAG,EAAX;AACA,KAnCK;;;AAsCN,QAAID,SAAS,CAACf,MAAV,GAAmB,CAAvB,EAA0B;AACzBiB,WAAK,GAAG,CAAC,GAAGA,KAAJ,EAAW,GAAGF,SAAS,CAACY,MAAV,CAAiB,CAAjB,CAAd,CAAR;AACA;;AAED,QAAIZ,SAAS,CAACf,MAAV,KAAqB,CAArB,IAA0BmB,OAA9B,EAAuC;AACtC,aAAO,EAAP;AACA,KAFD,MAEO;;AAEN,UAAI1B,OAAO,GAAGsB,SAAS,CAACO,IAAV,CAAe,GAAf,CAAd;AACA,UAAID,IAAI,GAAGJ,KAAK,CAACjB,MAAN,KAAiB,CAAjB,GAAqBP,OAArB,GAA+BwB,KAAK,CAACK,IAAN,CAAW,GAAX,CAA1C;;AAEA,UAAI7B,OAAO,KAAK4B,IAAhB,EAAsB;AACrB,YAAI5B,OAAO,CAACiC,KAAR,CAAc,GAAd,CAAJ,EAAwB;AACvBL,cAAI,GAAG,EAAP;AACA,SAFD,MAEO;AACN5B,iBAAO,GAAG,EAAV;AACA;AACD;;AAEDoB,oBAAc,CAACX,IAAf,CAAoB;AAAET,eAAF;AAAW4B;AAAX,OAApB;AACA;AACD;;AAED,SAAOR,cAAP;AACA;AAED;;;;;;;;;;;;;;;;SAcgBW,cAAc/B,SAA2B;AACxD,QAAMsB,SAAS,GAAoB,EAAnC;AACA,MAAIrB,MAAM,GAAmB,EAA7B;;AAEA,OAAK,MAAMC,KAAX,IAAoBH,eAAe,CAACC,OAAD,CAAnC,EAA8C;AAC7C,QACCE,KAAK,CAACQ,IAAN,KAAe,UAAf,KACCR,KAAK,CAACS,KAAN,KAAgB,GAAhB,IAAuBT,KAAK,CAACS,KAAN,KAAgB,GADxC,CADD,EAGE;AACD,UAAIV,MAAM,CAACM,MAAP,GAAgB,CAApB,EAAuB;AACtBe,iBAAS,CAACb,IAAV,CAAe,GAAGU,oBAAoB,CAAClB,MAAD,CAAtC;AACA;;AACDA,YAAM,GAAG,EAAT;AACA,KARD,MAQO;AACNA,YAAM,CAACQ,IAAP,CAAYP,KAAZ;AACA;AACD;;AAED,MAAID,MAAM,CAACM,MAAP,GAAgB,CAApB,EAAuB;AACtBe,aAAS,CAACb,IAAV,CAAe,GAAGU,oBAAoB,CAAClB,MAAD,CAAtC;AACA;;AAED,SAAOqB,SAAP;AACD;AC5OA;;;;;;;SAKgBc,iBAAgD;AAAA,MAAjCC,IAAiC,uEAA1B,IAAIC,IAAJ,EAA0B;AAAA,MAAdC,MAAc,uEAAL,KAAK;;AAC/D,MAAIA,MAAJ,EAAY;AACX,WAAOC,iBAAiB,CAACH,IAAD,CAAxB;AACA;;AAED,QAAMI,KAAK,GAAGJ,IAAI,CAChB/B,QADY,GAEZ6B,OAFY,CAEJ,KAFI,EAEG,EAFH,EAGZA,OAHY,CAGJ,WAHI,EAGS,EAHT,EAIZO,KAJY,CAIN,GAJM,CAAd;AAMAD,OAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,GAAW,GAAtB;AAEA,QAAME,GAAG,GAAGF,KAAK,CAAC,CAAD,CAAjB;AACAA,OAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAhB;AACAA,OAAK,CAAC,CAAD,CAAL,GAAWE,GAAX;AAEA,SAAOF,KAAK,CAACZ,IAAN,CAAW,GAAX,CAAP;AACA;AAED;;;;;;SAIgBW,oBAAmC;AAAA,MAAjBH,IAAiB,uEAAV,IAAIC,IAAJ,EAAU;AAClD,QAAMG,KAAK,GAAGJ,IAAI,CAACO,WAAL,GAAmBF,KAAnB,CAAyB,GAAzB,CAAd;AACAD,OAAK,CAACI,GAAN,GAFkD,CAEtC;;AACZJ,OAAK,CAAChC,IAAN,CAAW,OAAX;AACA,SAAOgC,KAAK,CAACZ,IAAN,CAAW,GAAX,CAAP;AACA;AAED;;;;;;;AAKA,MAAMiB,SAAS,GACd,yLADD;AAGA;;;;;SAIgBC,cAAcV,MAAY;AACzC,SAAOS,SAAS,CAACE,IAAV,CAAeX,IAAf,CAAP;AACD,C,CClDA;;;AAGA,MAAMY,OAAO,GAAG,IAAIC,WAAJ,EAAhB;AAEA;;;;AAGA,MAAMC,MAAM,GAAG,CACd,CAAC,IAAD,CADc,EAEd,CAAC,IAAD,CAFc,EAGd,CAAC,IAAD,CAHc,EAId,CAAC,IAAD,EAAO,IAAP,CAJc,EAKd,CAAC,IAAD,EAAO,IAAP,CALc,CAKF;AALE,CAAf;AAOA,MAAMC,MAAM,GACX,mEAAmEV,KAAnE,CAAyE,EAAzE,CADD;AAEA,MAAMW,gBAAgB,GAAG,KAAzB,C,CAA+B;;AAC/B,MAAMC,oBAAoB,GAAG,EAA7B;AACA,MAAMC,6BAA6B,GAAG,EAAtC;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAAoC;AACnC,SACCL,MAAM,CAAEK,GAAG,IAAI,EAAR,GAAc,IAAf,CAAN,GACAL,MAAM,CAAEK,GAAG,IAAI,EAAR,GAAc,IAAf,CADN,GAEAL,MAAM,CAAEK,GAAG,IAAI,CAAR,GAAa,IAAd,CAFN,GAGAL,MAAM,CAACK,GAAG,GAAG,IAAP,CAJP;AAMA;;AAED,SAASC,WAAT,CAAqBC,KAArB,EAAwCC,KAAxC,EAAuDC,GAAvD,EAAkE;AACjE,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAI9B,CAAC,GAAG4B,KAAb,EAAoB5B,CAAC,GAAG6B,GAAxB,EAA6B7B,CAAC,IAAI,CAAlC,EAAqC;AACpC8B,UAAM,IAAIN,eAAe,CACxB,CAACG,KAAK,CAAC3B,CAAD,CAAL,IAAY,EAAb,KAAoB2B,KAAK,CAAC3B,CAAC,GAAG,CAAL,CAAL,IAAgB,CAApC,IAAyC2B,KAAK,CAAC3B,CAAC,GAAG,CAAL,CADtB,CAAzB;AAGA;;AACD,SAAO8B,MAAP;AACA;;AAED,SAASC,YAAT,CAAsBC,IAAtB,EAAsC;AACrC,QAAMC,GAAG,GAAGD,IAAI,CAACzD,MAAjB;AACA,QAAM2D,UAAU,GAAGD,GAAG,GAAG,CAAzB,CAFqC,CAEV;;AAC3B,MAAIH,MAAM,GAAG,EAAb,CAHqC;;AAMrC,OAAK,IAAI9B,CAAC,GAAG,CAAR,EAAWmC,IAAI,GAAGF,GAAG,GAAGC,UAA7B,EAAyClC,CAAC,GAAGmC,IAA7C,EAAmDnC,CAAC,IAAIqB,gBAAxD,EAA0E;AACzES,UAAM,IAAIJ,WAAW,CACpBM,IADoB,EAEpBhC,CAFoB,EAGpBA,CAAC,GAAGqB,gBAAJ,GAAuBc,IAAvB,GAA8BA,IAA9B,GAAqCnC,CAAC,GAAGqB,gBAHrB,CAArB;AAKA,GAZoC;;;AAerC,MAAIa,UAAU,KAAK,CAAnB,EAAsB;AACrB,UAAME,GAAG,GAAGJ,IAAI,CAACC,GAAG,GAAG,CAAP,CAAhB;AACAH,UAAM,IAAIV,MAAM,CAACgB,GAAG,IAAI,CAAR,CAAhB;AACAN,UAAM,IAAIV,MAAM,CAAEgB,GAAG,IAAI,CAAR,GAAa,IAAd,CAAhB;AACAN,UAAM,IAAI,IAAV;AACA,GALD,MAKO,IAAII,UAAU,KAAK,CAAnB,EAAsB;AAC5B,UAAME,GAAG,GAAG,CAACJ,IAAI,CAACC,GAAG,GAAG,CAAP,CAAJ,IAAiB,CAAlB,IAAuBD,IAAI,CAACC,GAAG,GAAG,CAAP,CAAvC;AACAH,UAAM,IAAIV,MAAM,CAACgB,GAAG,IAAI,EAAR,CAAhB;AACAN,UAAM,IAAIV,MAAM,CAAEgB,GAAG,IAAI,CAAR,GAAa,IAAd,CAAhB;AACAN,UAAM,IAAIV,MAAM,CAAEgB,GAAG,IAAI,CAAR,GAAa,IAAd,CAAhB;AACAN,UAAM,IAAI,GAAV;AACA;;AAED,SAAOA,MAAP;AACA;AAED;;;;;;;;;AAOA,SAASO,sBAAT,CAAgCC,GAAhC,EAAwD;AAAA,MAAXC,MAAW,uEAAF,EAAE;AACvD,QAAMC,aAAa,GAAG,EAAtB,CADuD,CAC9B;;AACzB,QAAMC,aAAa,GAAGC,IAAI,CAACC,GAAL,CAASJ,MAAT,EAAiBC,aAAjB,CAAtB;AACA,QAAMI,KAAK,GAAa,EAAxB;;AAEA,SAAON,GAAG,CAAC/D,MAAX,EAAmB;AAClB,QAAIsE,OAAO,GAAGP,GAAG,CAACQ,MAAJ,CAAW,CAAX,EAAcL,aAAd,CAAd;AAEA,UAAMxC,KAAK,GAAG4C,OAAO,CAAC5C,KAAR,CAAc,cAAd,CAAd,CAHkB,CAG0B;;AAC5C,QAAIA,KAAJ,EAAW;AACV4C,aAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,CAAf,EAAkB7C,KAAK,CAAC8C,KAAxB,CAAV;AACA;;AAED,QAAIC,IAAI,GAAG,KAAX;;AACA,WAAO,CAACA,IAAR,EAAc;AACb,UAAIC,GAAJ;AACAD,UAAI,GAAG,IAAP;AACA,YAAM/C,KAAK,GAAGqC,GAAG,CAACQ,MAAJ,CAAWD,OAAO,CAACtE,MAAnB,EAA2B0B,KAA3B,CAAiC,kBAAjC,CAAd,CAHa,CAGsD;;AACnE,UAAIA,KAAJ,EAAW;AACVgD,WAAG,GAAGC,QAAQ,CAACjD,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAd,CADU;;AAGV,YAAIgD,GAAG,GAAG,IAAN,IAAcA,GAAG,GAAG,IAAxB,EAA8B;AAC7BJ,iBAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,CAAf,EAAkBD,OAAO,CAACtE,MAAR,GAAiB,CAAnC,CAAV;AACAyE,cAAI,GAAG,KAAP;AACA;AACD;AACD;;AAED,QAAIH,OAAO,CAACtE,MAAZ,EAAoB;AACnBqE,WAAK,CAACnE,IAAN,CAAWoE,OAAX;AACA;;AACDP,OAAG,GAAGA,GAAG,CAACQ,MAAJ,CAAWD,OAAO,CAACtE,MAAnB,CAAN;AACA;;AAED,SAAOqE,KAAP;AACA;AAED;;;;;;;AAKA,SAASO,WAAT,CAAqBC,EAArB,EAA+B;AAC9B,SAAOjC,MAAM,CAACkC,MAAP,CACN,CAACC,GAAD,EAAMC,KAAN,KACCD,GAAG,IACFC,KAAK,CAAChF,MAAN,KAAiB,CAAjB,IAAsB6E,EAAE,KAAKG,KAAK,CAAC,CAAD,CADnC,IAECA,KAAK,CAAChF,MAAN,KAAiB,CAAjB,IAAsB6E,EAAE,IAAIG,KAAK,CAAC,CAAD,CAAjC,IAAwCH,EAAE,IAAIG,KAAK,CAAC,CAAD,CAJ/C,EAKN,KALM,CAAP;AAOA;AAED;;;;;;;;;;;;;;;;;SAegBC,aAA6D;AAAA,MAAlDxB,IAAkD,uEAAtB,EAAsB;AAAA,MAAlByB,QAAkB,uEAAP,OAAO;AAC5E,QAAMC,OAAO,GAAG,IAAIC,WAAJ,CAAgBF,QAAhB,CAAhB;AACA,QAAMG,MAAM,GACX,OAAO5B,IAAP,KAAgB,QAAhB,GACGf,OAAO,CAAC4C,MAAR,CAAe7B,IAAf,CADH,GAEGf,OAAO,CAAC4C,MAAR,CAAeH,OAAO,CAACI,MAAR,CAAe9B,IAAf,CAAf,CAHJ;AAKA,SAAO4B,MAAM,CAACP,MAAP,CACN,CAACU,SAAD,EAAYC,GAAZ,EAAiBjB,KAAjB,KACCI,WAAW,CAACa,GAAD,CAAX,IACA,EACC,CAACA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,IAAzB,MACCjB,KAAK,KAAKa,MAAM,CAACrF,MAAP,GAAgB,CAA1B,IACAqF,MAAM,CAACb,KAAK,GAAG,CAAT,CAAN,KAAsB,IADtB,IAEAa,MAAM,CAACb,KAAK,GAAG,CAAT,CAAN,KAAsB,IAHvB,CADD,CADA;AAQGgB,WAAS,GAAGE,MAAM,CAACC,YAAP,CAAoBF,GAApB,CARf,GASG,GAAGD,SAAS,IAAIC,GAAG,GAAG,IAAN,GAAa,GAAb,GAAmB,EAAE,GAAGA,GAAG,CAC1C1F,QADuC,CAC9B,EAD8B,EAEvC6F,WAFuC,EAE1B,EAbZ,EAcN,EAdM,CAAP;AAgBA;AAED;;;;;;;;;;;;;;;;;SAegBC,eACfpC,MAEkB;AAAA,MADlBqC,gBACkB,uEADY,GACZ;AAAA,MAAlBZ,QAAkB,uEAAP,OAAO;AAElB,MAAIa,KAAK,GAAa,EAAtB;AACA,QAAMZ,OAAO,GAAG,IAAIC,WAAJ,CAAgBF,QAAhB,CAAhB;AACA,QAAMnB,GAAG,GAAG,OAAON,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkC0B,OAAO,CAACI,MAAR,CAAe9B,IAAf,CAA9C;;AAEA,MAAIqC,gBAAgB,KAAK,GAAzB,EAA8B;AAC7B,UAAME,UAAU,GAAGf,UAAU,CAAClB,GAAD,EAAMmB,QAAN,CAAV,CAA0BtD,OAA1B,CAClB,oBADkB,EAEjB8C,GAAD,IACCA,GAAG,KAAK,GAAR,GACG,GADH,GAEG,OACCA,GAAG,CAACuB,UAAJ,CAAe,CAAf,IAAoB,IAApB,GAA2B,GAA3B,GAAiC,EADlC,IAEAvB,GAAG,CAACuB,UAAJ,CAAe,CAAf,EAAkBlG,QAAlB,CAA2B,EAA3B,EAA+B6F,WAA/B,EAPc,CAAnB;AASAG,SAAK,GACJC,UAAU,CAAChG,MAAX,GAAoB+C,oBAApB,GACG,CAACiD,UAAD,CADH,GAEGlC,sBAAsB,CAACkC,UAAD,EAAajD,oBAAb,CAH1B;AAIA,GAdD,MAcO;;AAEN,QAAImD,CAAC,GAAG,CAAR;AACA,QAAIzE,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAGsC,GAAG,CAAC/D,MAAf,EAAuB;AACtB,UACC0C,OAAO,CAAC4C,MAAR,CAAevB,GAAG,CAACoC,SAAJ,CAAcD,CAAd,EAAiBzE,CAAjB,CAAf,EAAoCzB,MAApC,GACAgD,6BAFD,EAGE;;AAED+C,aAAK,CAAC7F,IAAN,CAAW6D,GAAG,CAACoC,SAAJ,CAAcD,CAAd,EAAiBzE,CAAC,GAAG,CAArB,CAAX;AACAyE,SAAC,GAAGzE,CAAC,GAAG,CAAR;AACA,OAPD,MAOO;AACNA,SAAC;AACD;AACD,KAfK;;;AAiBNsC,OAAG,CAACoC,SAAJ,CAAcD,CAAd,KAAoBH,KAAK,CAAC7F,IAAN,CAAW6D,GAAG,CAACoC,SAAJ,CAAcD,CAAd,CAAX,CAApB;AACAH,SAAK,GAAGA,KAAK,CAACvF,GAAN,CAAWC,CAAD,IAAOiC,OAAO,CAAC4C,MAAR,CAAe7E,CAAf,CAAjB,EAAoCD,GAApC,CAAyCC,CAAD,IAAO+C,YAAY,CAAC/C,CAAD,CAA3D,CAAR;AACA;;AAED,SAAOsF,KAAK,CACVvF,GADK,CACA4F,CAAD,IAAO,WAAWN,gBAAgB,IAAIM,CAAC,KADtC,EAEL9E,IAFK,CAEA,EAFA,EAGLZ,IAHK,EAAP;AAID;;ACzNA,MAAM2F,MAAI,GAAG,MAAb;AAEA;;;;MAGaC,SAAS,GAAG;AAEzB;;;;MAGaC,WAAW,GAAID,SAAS,GAAG;AAExC;;;;MAGaE,UAAU,GAAIF,SAAS,GAAG,EAAZ,GAAiB;AAsD5C,IAAIG,OAAO,GAAG,CAAd;;AAEA,SAASC,gBAAT,GAAyB;AACxB,MAAIC,IAAI,GAAG,EAAX;AACA,QAAMC,QAAQ,GACb,4EADD;;AAGA,OAAK,IAAInF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC5BkF,QAAI,IAAIC,QAAQ,CAACC,MAAT,CAAgB1C,IAAI,CAAC2C,KAAL,CAAW3C,IAAI,CAAC4C,MAAL,KAAgBH,QAAQ,CAAC5G,MAApC,CAAhB,CAAR;AACA;;AAED,SAAO2G,IAAP;AACA;;AAED,SAASK,sBAAT,CAAgCC,MAAhC,EAAyD;AACxD,SAAOzF,aAAa,CAACyF,MAAD,CAAb,CACLzG,GADK,CACD,QAAkB;AAAA,QAAjB;AAAEa,UAAF;AAAQ5B;AAAR,KAAiB;AACtB,WAAO4B,IAAI,GACR,GAAGwE,cAAc,CAACxE,IAAD,CAAd,CAAqBO,OAArB,CAA6B,IAA7B,EAAmC,KAAnC,CAAyC,KAAKnC,OAAO,GADhD,GAERA,OAFH;AAGA,GALK,EAML6B,IANK,CAMA,IANA,CAAP;AAOA;;AAED,SAAS4F,mCAAT,CAA6CP,IAA7C,EAAyD;AACxD,SAAOA,IAAI,CACTQ,WADK,GAELvF,OAFK,CAEG,YAFH,EAEkBF,KAAD,IAAWA,KAAK,CAACkE,WAAN,EAF5B,CAAP;AAGA;;MAEYwB,QAAO;;;;;;;;;;;;AAuBnBC,cAAYC,OAAZ,EAA4C;AAtB5B,uBAAmC,EAAnC;AACA,kBAAkC;AACjD,oBAAc,IAAI,IAAIvF,IAAJ,GAAWwF,OAAX,EAAoB,IAAId,OAAO,EAAE,IAClDe,OAAO,CAACC,GACT,IAAIC,QAAQ,EAAE,GAHmC;AAIjD5F,UAAI,EAAED,cAAc;AAJ6B,KAAlC;AAMA,mBAAkB,2BAAlB;AAET,uBAAwC,IAAxC;;AAcN,SAAK,MAAM8F,MAAX,IAAqBL,OAArB,EAA8B;;AAE7B,UAAI,kBAAkB7E,IAAlB,CAAuBkF,MAAvB,CAAJ,EAAoC;AACnC,aAAKC,OAAL,GAAeN,OAAO,CAACK,MAAD,CAAtB;AACA,OAFD,MAEO,IAAIA,MAAM,KAAK,MAAf,EAAuB;AAC7B,aAAKhB,IAAL,GAAYW,OAAO,CAACK,MAAD,CAAnB;AACA,OAFM,MAEA,IACNA,MAAM,KAAK,YAAX,IACA,OAAOL,OAAO,CAACK,MAAD,CAAd,KAA2B,QAFrB,EAGL;AACD,cAAME,UAAU,GAAGP,OAAO,CAACK,MAAD,CAA1B;;AACA,YAAIG,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAJ,EAA+B;AAC9B,eAAK,IAAIpG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoG,UAAU,CAAC7H,MAA/B,EAAuCyB,CAAC,EAAxC,EAA4C;AAC3C,iBAAKuG,MAAL,CAAYH,UAAU,CAACpG,CAAD,CAAtB;AACA;AACD,SAJD,MAIO,IAAIoG,UAAU,IAAI,IAAlB,EAAwB;AAC9B,eAAKG,MAAL,CAAYH,UAAZ;AACA;AACD,OAZM,MAYA,IAAIF,MAAM,KAAK,SAAf,EAA0B;AAChC,aAAKA,MAAL,CAAYM,OAAZ,GAAsBpC,cAAc,CAACyB,OAAO,CAACW,OAAT,CAApC;AACA,OAFM,MAEA,IAAI,qBAAqBxF,IAArB,CAA0BkF,MAA1B,CAAJ,EAAuC;AAC7C,aAAKA,MAAL,CAAYA,MAAM,CAACR,WAAP,EAAZ,IAAoCH,sBAAsB,CACzDM,OAAO,CAACK,MAAD,CADkD,CAA1D;AAGA,OAJM,MAIA;;AAEN,aAAKA,MAAL,CAAYA,MAAM,CAACR,WAAP,EAAZ,IAAoCG,OAAO,CAACK,MAAD,CAA3C;AACA;AACD;AACD;;;;;;;;;;;;AAWMK,QAAM,CAACE,OAAD,EAA2B;;AAEvC,QAAIA,OAAO,CAACC,WAAZ,EAAyB;AACxB,WAAKA,WAAL,GAAmBD,OAAnB;AACA,WAAKC,WAAL,CAAiBC,OAAjB,GAA2BF,OAAO,CAACE,OAAR,IAAmB,OAA9C;AACA,WAAKD,WAAL,CAAiBhI,IAAjB,GAAwB+H,OAAO,CAAC/H,IAAR,IAAgB,WAAxC;AACA,WAAKgI,WAAL,CAAiBE,MAAjB,GAA0B,IAA1B;AACA,KALD,MAKO;AACN,WAAKC,WAAL,CAAiBpI,IAAjB,CAAsBgI,OAAtB;AACA;;AAED,WAAO,IAAP;AACA;;;;;;;AAMMK,eAAa;AACnB,QACC,OAAO,KAAKZ,MAAL,CAAYa,IAAnB,KAA4B,QAA5B,IACAV,KAAK,CAACC,OAAN,CAAc,KAAKJ,MAAL,CAAYa,IAA1B,MAAoC,KAFrC,EAGE;AACD,aAAO;AACNC,eAAO,EAAE,KADH;AAENC,uBAAe,EAAE;AAFX,OAAP;AAIA;;AAED,QACC,OAAO,KAAKf,MAAL,CAAYgB,EAAnB,KAA0B,QAA1B,IACAb,KAAK,CAACC,OAAN,CAAc,KAAKJ,MAAL,CAAYgB,EAA1B,MAAkC,KADlC,IAEA,OAAO,KAAKhB,MAAL,CAAYiB,EAAnB,KAA0B,QAF1B,IAGAd,KAAK,CAACC,OAAN,CAAc,KAAKJ,MAAL,CAAYiB,EAA1B,MAAkC,KAHlC,IAIA,OAAO,KAAKjB,MAAL,CAAYkB,GAAnB,KAA2B,QAJ3B,IAKAf,KAAK,CAACC,OAAN,CAAc,KAAKJ,MAAL,CAAYkB,GAA1B,MAAmC,KANpC,EAOE;AACD,aAAO;AACNJ,eAAO,EAAE,KADH;AAENC,uBAAe,EACd;AAHK,OAAP;AAKA;;AAED,QAAI,KAAKJ,WAAL,CAAiBtI,MAAjB,GAA0B,CAA9B,EAAiC;AAChC,YAAM8I,MAAM,GAAa,EAAzB;AAEA,WAAKR,WAAL,CAAiBS,OAAjB,CAA0BlB,UAAD,IAAW;AACnC,YAAIA,UAAU,CAACmB,IAAf,EAAqB;AACpB,cAAIC,UAAU,CAACpB,UAAU,CAACmB,IAAZ,CAAV,KAAgC,KAApC,EAA2C;AAC1CF,kBAAM,CAAC5I,IAAP,CAAY,GAAG2H,UAAU,CAACmB,IAAI,iBAA9B;AACA;AACD,SAJD,MAIO,IAAInB,UAAU,CAACqB,MAAf,EAAuB;AAC7B,cAAI,CAACrB,UAAU,CAACqB,MAAX,CAAkBC,QAAvB,EAAiC;AAChCL,kBAAM,CAAC5I,IAAP,CAAY,mCAAZ;AACA;AACD,SAJM,MAIA,IAAI,CAAC2H,UAAU,CAACpE,IAAhB,EAAsB;AAC5BqF,gBAAM,CAAC5I,IAAP,CAAY,2CAAZ;AACA;AACD,OAZD;AAaA,aAAO;AACNuI,eAAO,EAAEK,MAAM,CAAC9I,MAAP,KAAkB,CADrB;AAEN0I,uBAAe,EAAEI,MAAM,CAACxH,IAAP,CAAY,IAAZ;AAFX,OAAP;AAIA;;AAED,WAAO;AAAEmH,aAAO,EAAE,IAAX;AAAiBC,qBAAe,EAAE9I;AAAlC,KAAP;AACA;;;;;;;;;AAQMwJ,OAAK,CAACC,QAAD,EAA6D;AACxE,UAAM;AAAEZ,aAAF;AAAWC;AAAX,QAA+B,KAAKH,aAAL,EAArC;AACAc,YAAQ,CAACZ,OAAD,EAAUC,eAAV,CAAR;AACA;;;;;;;AAMMQ,QAAM;AACZ,WAAO,IAAII,aAAJ,CAAkB,IAAlB,CAAP;AACA;;;;;;;;AAOMC,MAAI,CAACF,QAAD,EAA+C;AACzD,QAAIhE,MAAM,GAAG,EAAb;AACA,UAAMtB,GAAG,GAAG,KAAKmF,MAAL,EAAZ;AACAnF,OAAG,CAACyF,EAAJ,CAAO,MAAP,EAAgB/F,IAAD,IAAW4B,MAAM,IAAI5B,IAApC;AACAM,OAAG,CAACyF,EAAJ,CAAO,KAAP,EAAeC,GAAD,IAASJ,QAAQ,CAACI,GAAD,EAAMpE,MAAN,CAA/B;AACAtB,OAAG,CAACyF,EAAJ,CAAO,OAAP,EAAiBC,GAAD,IAASJ,QAAQ,CAACI,GAAD,EAAMpE,MAAN,CAAjC;AACA;;AAEMqE,WAAS;AACf,WAAO,IAAIC,OAAJ,CAAoB,CAACC,OAAD,EAAUC,MAAV,KAAgB;AAC1C,WAAKN,IAAL,CAAU,CAACE,GAAD,EAAMpE,MAAN,KAAY;AACrB,YAAIoE,GAAG,IAAI,IAAX,EAAiB;AAChBI,gBAAM,CAACJ,GAAD,CAAN;AACA,SAFD,MAEO;AACNG,iBAAO,CAACvE,MAAD,CAAP;AACA;AACD,OAND;AAOA,KARM,CAAP;AASA;;AA/KkB;;AAkLpB,MAAMiE,aAAN,SAA4BQ,MAA5B,CAAkC;;;;AASjCzC,cAAoB0C,OAApB,EAAoC;AACnC;AADmB;AARpB,oBAAW,IAAX;AACA,kBAAS,KAAT;AACA,kBAAwBC,MAAM,CAACC,KAAP,CAAa3D,SAAS,GAAG,EAAZ,GAAiB,CAA9B,CAAxB;AACA,uBAAc,CAAd;;;;;;;;AAcC,UAAM/C,MAAM,GAAIE,IAAD,IAAa;;AAE3B,UAAI,KAAK4B,MAAL,IAAe,IAAnB,EAAyB;AACxB,cAAM6E,KAAK,GAAGF,MAAM,CAACG,UAAP,CAAkB1G,IAAlB,CAAd;;AAEA,YAAIyG,KAAK,GAAG,KAAKE,WAAb,GAA2B,KAAK/E,MAAL,CAAYrF,MAA3C,EAAmD;AAClD,eAAKqF,MAAL,CAAYgF,KAAZ,CAAkB5G,IAAlB,EAAwB,KAAK2G,WAA7B;AACA,eAAKA,WAAL,IAAoBF,KAApB;AACA,SAHD;AAAA,aAKK,IAAIA,KAAK,GAAG,KAAK7E,MAAL,CAAYrF,MAAxB,EAAgC;AACpC,cAAI,KAAKoK,WAAT,EAAsB;AACrB,iBAAKE,IAAL,CACC,MADD,EAEC,KAAKjF,MAAL,CAAYtF,QAAZ,CAAqB,OAArB,EAA8B,CAA9B,EAAiC,KAAKqK,WAAtC,CAFD;AAIA,iBAAKA,WAAL,GAAmB,CAAnB;AACA;;AAED,gBAAMG,KAAK,GAAGpG,IAAI,CAACqG,IAAL,CAAU/G,IAAI,CAACzD,MAAL,GAAc,KAAKqF,MAAL,CAAYrF,MAApC,CAAd;AACA,cAAIyK,IAAI,GAAG,CAAX;;AACA,iBAAOA,IAAI,GAAGF,KAAd,EAAqB;AACpB,iBAAKD,IAAL,CACC,MADD,EAEC7G,IAAI,CAAC0C,SAAL,CACC,KAAKd,MAAL,CAAYrF,MAAZ,GAAqByK,IADtB,EAEC,KAAKpF,MAAL,CAAYrF,MAAZ,IAAsByK,IAAI,GAAG,CAA7B,CAFD,CAFD;AAOAA,gBAAI;AACJ;AACD,SArBI,CAqBJ;AArBI,aAsBA;AACJ,cAAI,CAAC,KAAKC,MAAV,EAAkB;AACjB,iBAAKJ,IAAL,CACC,MADD,EAEC,KAAKjF,MAAL,CAAYtF,QAAZ,CAAqB,OAArB,EAA8B,CAA9B,EAAiC,KAAKqK,WAAtC,CAFD;AAIA,iBAAK/E,MAAL,CAAYgF,KAAZ,CAAkB5G,IAAlB,EAAwB,CAAxB;AACA,iBAAK2G,WAAL,GAAmBF,KAAnB;AACA,WAPD,MAOO;;AAEN,iBAAKS,IAAL,CAAU,QAAV,EAAoB,MAAMpH,MAAM,CAACE,IAAD,CAAhC;AACA;AACD;AACD;AACD,KA9CD;;;;;;;AAoDA,UAAMmH,uBAAuB,GAAI/C,UAAD,IAA8B;AAC7D,UAAIpE,IAAI,GAAa,EAArB;AACA,YAAM6D,OAAO,GAA4B;AACxC,wBACCO,UAAU,CAAC1H,IAAX,IACC0H,UAAU,CAACO,OAAX,GAAqB,aAAaP,UAAU,CAACO,OAAO,EAApD,GAAyD,EAD1D,KAECP,UAAU,CAACgD,MAAX,GAAoB,YAAYhD,UAAU,CAACgD,MAAM,EAAjD,GAAsD,EAFvD,CAFuC;AAKxC,qCAA6B,QALW;AAMxC,+BAAuBhD,UAAU,CAACQ,MAAX,GACpB,QADoB,GAEpB,yBAAyBxC,cAAc,CACvCgC,UAAU,CAACxG,IAD4B,CAEtC;AAVoC,OAAzC,CAF6D;;AAgB7D,UAAIwG,UAAU,CAACP,OAAX,IAAsB,IAA1B,EAAgC;AAC/B,aAAK,MAAMK,MAAX,IAAqBE,UAAU,CAACP,OAAhC,EAAyC;AACxCA,iBAAO,CAACK,MAAM,CAACR,WAAP,EAAD,CAAP,GAAgCU,UAAU,CAACP,OAAX,CAAmBK,MAAnB,CAAhC;AACA;AACD;;AAED,WAAK,MAAMA,MAAX,IAAqBL,OAArB,EAA8B;AAC7B7D,YAAI,GAAGA,IAAI,CAACqH,MAAL,CAAY,CAClB5D,mCAAmC,CAACS,MAAD,CADjB,EAElB,IAFkB,EAGlBL,OAAO,CAACK,MAAD,CAHW,EAIlBtB,MAJkB,CAAZ,CAAP;AAMA;;AAED9C,YAAM,CAACE,IAAI,CAACqH,MAAL,CAAY,CAACzE,MAAD,CAAZ,EAAoB/E,IAApB,CAAyB,EAAzB,CAAD,CAAN;AACA,KAhCD;;;;;;;;AAuCA,UAAMyJ,YAAY,GAAG,CAACtH,IAAD,EAAe4F,QAAf,KAAoC;AACxD,YAAMkB,KAAK,GAAGpG,IAAI,CAACqG,IAAL,CAAU/G,IAAI,CAACzD,MAAL,GAAcsG,SAAxB,CAAd;AACA,UAAImE,IAAI,GAAG,CAAX;;AACA,aAAOA,IAAI,GAAGF,KAAd,EAAqB;AACpBhH,cAAM,CAACE,IAAI,CAAC0C,SAAL,CAAeG,SAAS,GAAGmE,IAA3B,EAAiCnE,SAAS,IAAImE,IAAI,GAAG,CAAX,CAA1C,IAA2DpE,MAA5D,CAAN;AACAoE,YAAI;AACJ;;AACD,UAAIpB,QAAJ,EAAc;AACbA,gBAAQ;AACR;AACD,KAVD;;AAYA,UAAM2B,UAAU,GAAG,CAClBnD,UADkB,EAElBoD,IAFkB,KAE+B;;;AAEjD,YAAMC,KAAK,GAAG3E,WAAW,GAAG,EAA5B;AACA,YAAMlB,MAAM,GAAG2E,MAAM,CAACC,KAAP,CAAaiB,KAAb,CAAf;AAEA,YAAMC,aAAa,GAClB,iBAAU,SAAV,cAAU,WAAV,GAAU,MAAV,aAAU,CAAE7D,OAAZ,MAAmB,IAAnB,IAAmBrH,aAAnB,GAAmB,MAAnB,GAAmBA,GAAG,2BAAH,CAAnB,KAAsD,QADvD;AAEA,YAAMiF,QAAQ,GACbiG,aAAa,KAAK,MAAlB,GACG,OADH,GAEGA,aAAa,KAAK,MAAlB,GACA,QADA,GAEAA,aALJ;;;;;;;AAYA,YAAMC,MAAM,GAAG,CAAC3B,GAAD,EAAoC4B,EAApC,KAA8C;AAC5D,YAAI5B,GAAJ,EAAS;AACR,eAAKa,IAAL,CAAU,OAAV,EAAmBb,GAAnB;AACA;AACA;;AACD,cAAM6B,SAAS,GAAG,CACjB7B,GADiB,EAEjBS,KAFiB,KAEJ;AAEb,cAAIT,GAAG,IAAI,KAAKN,QAAL,KAAkB,KAA7B,EAAoC;AACnC,iBAAKmB,IAAL,CACC,OADD,EAECb,GAAG,IAAI,IAAI8B,KAAJ,CAAU,yCAAV,CAFR;AAIA;AACA,WARY;;;AAUbR,sBAAY,CAAC1F,MAAM,CAACtF,QAAP,CAAgBmF,QAAhB,EAA0B,CAA1B,EAA6BgF,KAA7B,CAAD,EAAsC;AACjD,gBAAIA,KAAK,IAAIgB,KAAb,EAAoB;;AAEnBM,kBAAQ,CAACH,EAAD,EAAKhG,MAAL,EAAa,CAAb,EAAgB6F,KAAhB,EAAuB,IAAvB,EAA6BI,SAA7B,CAARE;AACA,aAHD,CAGC;AAHD,iBAIK;AACJ,mBAAKC,cAAL,CAAoB,OAApB,EAA6BC,SAA7B;AACAC,mBAAS,CAACN,EAAD,EAAKJ,IAAL,CAATU;AACA;AACD,WATW,CAAZ;AAUA,SAtBD;;AAuBAH,YAAQ,CAACH,EAAD,EAAKhG,MAAL,EAAa,CAAb,EAAgB6F,KAAhB,EAAuB,IAAvB,EAA6BI,SAA7B,CAARE;AACA,aAAKb,IAAL,CAAU,OAAV,EAAmBe,SAAnB;AACA,OA9BD;;AAgCAE,UAAQ,CAAC/D,UAAU,CAACmB,IAAZ,EAA8B,GAA9B,EAAmCoC,MAAnC,CAARQ;AACA,KAtDD;;;;;;;;AA6DA,UAAMC,YAAY,GAAG,CACpBhE,UADoB,EAEpBwB,QAFoB,KAEA;AAEpB,YAAM;AAAEH;AAAF,UAAarB,UAAnB;;AACA,UAAIqB,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEC,QAAZ,EAAsB;AACrB,YAAI2C,QAAQ,GAAG9B,MAAM,CAACC,KAAP,CAAa,CAAb,CAAf;AAEAf,cAAM,CAAC6C,MAAP;AAEA7C,cAAM,CAACM,EAAP,CAAU,KAAV,EAAiB;AAChBuB,sBAAY,CAACe,QAAQ,CAAC/L,QAAT,CAAkB,QAAlB,CAAD,EAA8BsJ,QAA9B,CAAZ;AACA,eAAKoC,cAAL,CAAoB,OAApB,EAA6BvC,MAAM,CAAC8C,KAApC;AACA,eAAKP,cAAL,CAAoB,QAApB,EAA8BvC,MAAM,CAAC6C,MAArC;AACA,eAAKN,cAAL,CAAoB,OAApB,EAA6BvC,MAAM,CAAC6C,MAApC;AACA,SALD;AAOA7C,cAAM,CAACM,EAAP,CAAU,MAAV,EAAmByC,IAAD,IAAK;;AAEtB,cAAI5G,MAAM,GAAG2E,MAAM,CAACkC,QAAP,CAAgBD,IAAhB,IAAwBA,IAAxB,GAA+BjC,MAAM,CAACxB,IAAP,CAAYyD,IAAZ,CAA5C;;AAEA,cAAIH,QAAQ,CAAC3B,UAAT,GAAsB,CAA1B,EAA6B;AAC5B9E,kBAAM,GAAG2E,MAAM,CAACc,MAAP,CAAc,CAACgB,QAAD,EAAWzG,MAAX,CAAd,CAAT;AACA;;AAED,gBAAM8G,MAAM,GAAG9G,MAAM,CAACrF,MAAP,GAAgBuG,WAA/B;AACAuF,kBAAQ,GAAG9B,MAAM,CAACC,KAAP,CAAakC,MAAb,CAAX,CATsB;;AAYtB,cAAIA,MAAM,GAAG,CAAb,EAAgB;;AAEf9G,kBAAM,CAAC+G,IAAP,CAAYN,QAAZ,EAAsB,CAAtB,EAAyBzG,MAAM,CAACrF,MAAP,GAAgBmM,MAAzC;AACA;;AACDpB,sBAAY,CAAC1F,MAAM,CAACtF,QAAP,CAAgB,QAAhB,EAA0B,CAA1B,EAA6BsF,MAAM,CAACrF,MAAP,GAAgBmM,MAA7C,CAAD,CAAZ;AACA,SAjBD;AAmBA,aAAK3C,EAAL,CAAQ,OAAR,EAAiBN,MAAM,CAAC8C,KAAxB;AACA,aAAKxC,EAAL,CAAQ,QAAR,EAAkBN,MAAM,CAAC6C,MAAzB;AACA,aAAKvC,EAAL,CAAQ,OAAR,EAAiBN,MAAM,CAAC6C,MAAxB;AACA,OAlCD,MAkCO;AACN,aAAKzB,IAAL,CAAU,OAAV,EAAmB;AAAEP,iBAAO,EAAE;AAAX,SAAnB;AACA;AACD,KA1CD;;AA4CA,UAAMsC,gBAAgB,GAAG,CACxBxE,UADwB,EAExBwB,QAFwB,KAEJ;AAEpB,YAAMiD,KAAK,GAAGzE,UAAU,CAACmB,IAAX,GACXgC,UADW,GAEXnD,UAAU,CAACqB,MAAX,GACA2C,YADA,GAEAU,UAJH;AAKA3B,6BAAuB,CAAC/C,UAAD,CAAvB;AACAyE,WAAK,CAACzE,UAAD,EAAawB,QAAb,CAAL;AACA,KAXD;;;;;;;;;;AAoBA,UAAMmD,aAAa,GAAG,CACrBC,QADqB,EAErBC,IAFqB,EAGrBlI,KAHqB,EAIrB6E,QAJqB,KAID;AAEpB,UAAI7E,KAAK,GAAGkI,IAAI,CAAC1M,MAAjB,EAAyB;AACxBuD,cAAM,CAAC,KAAKkJ,QAAQ,GAAGpG,MAAI,EAArB,CAAN;;AACA,YAAIqG,IAAI,CAAClI,KAAD,CAAJ,CAAYmI,OAAhB,EAAyB;AACxBC,uBAAa,CAACF,IAAI,CAAClI,KAAD,CAAL,EAAc,MAC1BgI,aAAa,CAACC,QAAD,EAAWC,IAAX,EAAiBlI,KAAK,GAAG,CAAzB,EAA4B6E,QAA5B,CADD,CAAb;AAGA,SAJD,MAIO;AACNgD,0BAAgB,CAACK,IAAI,CAAClI,KAAD,CAAL,EAAc,MAC7BgI,aAAa,CAACC,QAAD,EAAWC,IAAX,EAAiBlI,KAAK,GAAG,CAAzB,EAA4B6E,QAA5B,CADE,CAAhB;AAGA;AACD,OAXD,MAWO;AACN9F,cAAM,CAAC,GAAG8C,MAAI,KAAKoG,QAAQ,KAAKpG,MAAI,GAAGA,MAAI,EAArC,CAAN;AACAgD,gBAAQ;AACR;AACD,KArBD;;AAuBA,UAAMwD,WAAW,GAAG;AACnB,YAAMJ,QAAQ,GAAG/F,gBAAgB,EAAjC;AACAnD,YAAM,CACL,4CAA4CkJ,QAAQ,IAAIpG,MAAI,GAAGA,MAAI,KAAKoG,QAAQ,GAAGpG,MAAI,EADlF,CAAN;;AAIA,UAAI,KAAK0D,OAAL,CAAa5B,WAAb,IAA4B,IAAhC,EAAsC;AACrC2E,kBAAU,CAAC,KAAK/C,OAAN,CAAV;AACAyC,qBAAa,CAACC,QAAD,EAAW,KAAK1C,OAAL,CAAazB,WAAxB,EAAqC,CAArC,EAAwCyE,OAAxC,CAAb;AACA,OAHD,MAGO;AACNC,yBAAiB;AAEhB,aAAKjD,OAFW,EAGhB,MAAMyC,aAAa,CAACC,QAAD,EAAW,KAAK1C,OAAL,CAAazB,WAAxB,EAAqC,CAArC,EAAwCyE,OAAxC,CAHH,CAAjB;AAKA;AACD,KAhBD;;;;;;;;AAuBA,UAAMR,UAAU,GAAG,CAClB1E,UADkB,EAElBwB,QAFkB,KAEE;;;AAEpB0B,kBAAY,CACXlD,UAAU,CAACoF,OAAX,GACG,gBAAU,CAACxJ,IAAX,MAAe,IAAf,IAAexD,aAAf,GAAeA,EAAf,GAAmB,EADtB,GAEG+J,MAAM,CAACxB,IAAP,CAAY,gBAAU,CAAC/E,IAAX,MAAe,IAAf,IAAepD,aAAf,GAAeA,EAAf,GAAmB,EAA/B,EAAmCN,QAAnC,CAA4C,QAA5C,CAHQ,EAIXsJ,QAJW,CAAZ;AAMA,KAVD;;;;;;;AAgBA,UAAMyD,UAAU,GAAI/C,OAAD,IAAiB;AACnC,UAAItG,IAAI,GAAa,EAArB;AAEAA,UAAI,GAAGA,IAAI,CAACqH,MAAL,CAAY,CAClB,eADkB,EAElBf,OAAO,CAACnC,OAFU,EAGlBvB,MAHkB,EAIlB,iCAJkB,EAKlBA,MALkB,CAAZ,CAAP;AAOA5C,UAAI,GAAGA,IAAI,CAACqH,MAAL,CAAY,CAAC,6BAAD,EAAgCzE,MAAhC,EAAsCA,MAAtC,CAAZ,CAAP;AACA5C,UAAI,GAAGA,IAAI,CAACqH,MAAL,CAAY,CAACf,OAAO,CAACpD,IAAR,IAAgB,EAAjB,EAAqBN,MAArB,EAA2BA,MAA3B,CAAZ,CAAP;AAEA9C,YAAM,CAACE,IAAI,CAACnC,IAAL,CAAU,EAAV,CAAD,CAAN;AACA,KAdD;;;;;;;;AAqBA,UAAMsL,aAAa,GAAG,CACrB7C,OADqB,EAErBV,QAFqB,KAED;AAEpB,YAAMoD,QAAQ,GAAG/F,gBAAgB,EAAjC;AACAnD,YAAM,CACL,8CAA8CkJ,QAAQ,IAAIpG,MAAI,GAAGA,MAAI,KAAKoG,QAAQ,GAAGpG,MAAI,EADpF,CAAN;AAGAgG,sBAAgB,CAACtC,OAAD,EAAU;;;AACzByC,qBAAa,CAACC,QAAD,EAAW,aAAO,CAACE,OAAR,MAAe,IAAf,IAAe1M,aAAf,GAAeA,EAAf,GAAmB,EAA9B,EAAkC,CAAlC,EAAqC;AACjDsD,gBAAM,CAAC,GAAG8C,MAAI,KAAKoG,QAAQ,KAAKpG,MAAI,GAAGA,MAAI,EAArC,CAAN;AACAgD,kBAAQ;AACR,SAHY,CAAb;AAIA,OALe,CAAhB;AAMA,KAdD;;;;;;;;AAqBA,UAAM2D,iBAAiB,GAAG,CACzBjD,OADyB,EAEzBV,QAFyB,KAEL;AAEpB,YAAMoD,QAAQ,GAAG/F,gBAAgB,EAAjC;AACAnD,YAAM,CACL,kDAAkDkJ,QAAQ,IAAIpG,MAAI,GAAGA,MAAI,KAAKoG,QAAQ,GAAGpG,MAAI,EADxF,CAAN;AAGAyG,gBAAU,CAAC/C,OAAD,CAAV;AACAxG,YAAM,CAAC,KAAKkJ,QAAQ,GAAGpG,MAAI,EAArB,CAAN;;;;;AAKA,YAAM6G,MAAM,GAAG;AACd3J,cAAM,CAAC,CAAC8C,MAAD,EAAO,IAAP,EAAaoG,QAAb,EAAuB,IAAvB,EAA6BpG,MAA7B,EAAmCA,MAAnC,EAAyC/E,IAAzC,CAA8C,EAA9C,CAAD,CAAN;AACA+H,gBAAQ;AACR,OAHD;;AAKA,UAAIU,OAAO,CAAC5B,WAAR,CAAoBwE,OAAxB,EAAiC;AAChCC,qBAAa,CAAC7C,OAAO,CAAC5B,WAAT,EAAsB+E,MAAtB,CAAb;AACA,OAFD,MAEO;AACNb,wBAAgB,CAACtC,OAAO,CAAC5B,WAAT,EAAsB+E,MAAtB,CAAhB;AACA;AACD,KAxBD;;AA0BA,UAAMH,OAAK,GAAItD,GAAD,IAAY;;;AACzB,UAAIA,GAAJ,EAAS;AACR,aAAKa,IAAL,CAAU,OAAV,EAAmBb,GAAnB;AACA,OAFD,MAEO;AACN,aAAKa,IAAL,CACC,MADD,EAEC,iBAAKjF,MAAL,MAAW,IAAX,IAAWpF,aAAX,GAAW,MAAX,GAAWA,GAAEF,QAAF,CAAW,OAAX,EAAoB,CAApB,EAAuB,KAAKqK,WAA5B,CAAX,MAAmD,IAAnD,IAAmD/J,aAAnD,GAAmDA,EAAnD,GAAuD,EAFxD;AAIA,aAAKiK,IAAL,CAAU,KAAV;AACA;;AACD,WAAKjF,MAAL,GAAc,IAAd;AACA,WAAK+E,WAAL,GAAmB,CAAnB;AACA,WAAKjB,QAAL,GAAgB,KAAhB;AACA,WAAKgE,kBAAL,CAAwB,QAAxB;AACA,WAAKA,kBAAL,CAAwB,OAAxB;AACA,WAAKA,kBAAL,CAAwB,OAAxB;AACA,WAAKA,kBAAL,CAAwB,MAAxB;AACA,WAAKA,kBAAL,CAAwB,KAAxB;AACA,KAlBD;;;;;;AAuBA,UAAMC,gBAAgB,GAAG;AACxB,UAAI,KAAKrD,OAAL,CAAazB,WAAb,CAAyBtI,MAAzB,IAAmC,KAAK+J,OAAL,CAAa5B,WAApD,EAAiE;AAChE5E,cAAM,CAAC,oBAAoB8C,MAAI,EAAzB,CAAN;AACAwG,mBAAW;AACX,OAHD,CAGC;AAHD,WAIK;AACJC,kBAAU,CAAC,KAAK/C,OAAN,CAAV;AACAgD,eAAK;AACL;AACD,KATD;;;;;;AAcA,UAAMM,YAAY,GAAG;AACpB,UAAI5J,IAAI,GAAa,EAArB;;AAEA,WAAK,MAAMkE,MAAX,IAAqB,KAAKoC,OAAL,CAAapC,MAAlC,EAA0C;;AAEzC,YACC,CAAC,OAAOlF,IAAP,CAAYkF,MAAZ,CAAD,IACA2F,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC,KAAK1D,OAAL,CAAapC,MAAlD,EAA0DA,MAA1D,CAFD,EAGE;AACDlE,cAAI,GAAGA,IAAI,CAACqH,MAAL,CAAY,CAClB5D,mCAAmC,CAACS,MAAD,CADjB,EAElB,IAFkB,EAGlB,KAAKoC,OAAL,CAAapC,MAAb,CAAoBA,MAApB,CAHkB,EAIlBtB,MAJkB,CAAZ,CAAP;AAMA;AACD;;AAED9C,YAAM,CAACE,IAAI,CAACnC,IAAL,CAAU,EAAV,CAAD,CAAN;AACA8L,sBAAgB;AAChB,KApBD;;AAsBA,SAAKzC,IAAL,CAAU,SAAV,EAAqBoC,OAArB;AACAvF,WAAO,CAACkG,QAAR,CAAiBL,YAAjB;AACA;;;;;;;;AAOMrB,OAAK;AACX,SAAKtB,MAAL,GAAc,IAAd;AACA,SAAKJ,IAAL,CAAU,OAAV;AACA;;;;;;;;AAOMyB,QAAM;AACZ,SAAKrB,MAAL,GAAc,KAAd;AACA,SAAKJ,IAAL,CAAU,QAAV;AACA;;;;;;;;AAOMqD,SAAO;AACb,SAAKrD,IAAL,CACC,SADD,EAEC,KAAKF,WAAL,GAAmB,CAAnB,GAAuB;AAAEL,aAAO,EAAE;AAAX,KAAvB,GAAiE,IAFlE;AAIA;;;;;;;;AAOM6D,aAAW;AACjB,SAAKtD,IAAL,CAAU,SAAV;AACA;;AA9dgC;ACrSlC;;;;;;MAIauD,eAAe,GAAG;AAC9BC,iBAAe,EAAE,CADa;AAE9BC,aAAW,EAAE,CAFiB;AAG9BC,YAAU,EAAE,CAHkB;AAI9BC,UAAQ,EAAE,CAJoB;AAK9BC,OAAK,EAAE,CALuB;AAM9BC,cAAY,EAAE,CANgB;AAO9BC,kBAAgB,EAAE,CAPY;AAQ9BC,kBAAgB,EAAE,CARY;AAS9BC,iBAAe,EAAE,CATa;AAU9BC,gBAAc,EAAE;AAVc;;MAalBC,kBAAkBjD,MAAK;;;;;AASnClE,cAAsB0C,OAAtB,EAAqC;AACpC,UAAMA,OAAN;AATM,gBAAsB,IAAtB;AACA,gBAAgB,IAAhB;AACA,oBAAyB,IAAzB;AAQN;;;;;;;;;;;AAUmB,SAAN0E,MAAM,CACnB1E,OADmB,EAEnB2E,IAFmB,EAGnBC,KAHmB,EAInBC,IAJmB,EAIL;AAEd,UAAMC,GAAG,GAAG,MAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAE9E,OAAP,IAAiB,GAAGA,OAAO,KAAK4E,KAAK,CAAC5E,OAAO,GAA7C,GAAmDA,OAA/D;AACA,UAAMN,GAAG,GAAG,IAAI+E,SAAJ,CAAcK,GAAd,CAAZ;AAEApF,OAAG,CAACiF,IAAJ,GAAWA,IAAX;AACAjF,OAAG,CAACmF,IAAJ,GAAWA,IAAX;;AAEA,QAAID,KAAJ,EAAW;AACVlF,SAAG,CAACqC,QAAJ,GAAe6C,KAAf;AACA;;AAED,WAAOlF,GAAP;AACA;;AAtCkC;;MCbvBqF,oBAAmB;AAG/BzH,cACC6B,MADD,EAEC6F,OAFD,EAGCC,OAHD,EAG8B;AAE7B,QAAI3J,MAAM,GAAG,EAAb;;AAEA,UAAM4J,MAAM,GAAG;;;AACd,UAAI5J,MAAM,CAACrF,MAAX,EAAmB;;AAElB,cAAMkP,IAAI,GAAG7J,MAAM,CAACzD,OAAP,CAAe,IAAf,EAAqB,EAArB,CAAb;;AACA,YACC,EACC,gBAAI,CACFlB,IADF,GAEEyB,KAFF,CAEQ,IAFR,EAGEG,GAHF,QAGO,IAHP,IAGOrC,aAHP,GAGO,MAHP,GAGOA,GACJyB,KADI,CACE,YADF,CAHP,MAIsB,IAJtB,IAIsBrB,aAJtB,GAIsBA,EAJtB,GAI0B,KAL3B,CADD,EAQE;AACD;AACA;;AAED,cAAMqB,KAAK,GAAGwN,IAAI,GAAGA,IAAI,CAACxN,KAAL,CAAW,cAAX,CAAH,GAAgC,IAAlD;AACA,cAAM+B,IAAI,GACT/B,KAAK,KAAK,IAAV,GACG;AAAEgN,cAAI,EAAEhN,KAAK,CAAC,CAAD,CAAb;AAAkBqI,iBAAO,EAAErI,KAAK,CAAC,CAAD,CAAhC;AAAqC+B,cAAI,EAAEyL;AAA3C,SADH,GAEG;AAAER,cAAI,EAAE,CAAC,CAAT;AAAYjL,cAAI,EAAEyL;AAAlB,SAHJ;AAKAhG,cAAM,CAACoB,IAAP,CAAY,UAAZ,EAAwB,IAAxB,EAA8B7G,IAA9B;AACA4B,cAAM,GAAG,EAAT;AACA;AACD,KAzBD;;AA2BA,UAAMsJ,KAAK,GAAIlF,GAAD,IAAW;AACxBP,YAAM,CAACoB,IAAP,CACC,UADD,EAECkE,SAAS,CAACC,MAAV,CACC,iCADD,EAECZ,eAAe,CAACK,KAFjB,EAGCzE,GAHD,CAFD;AAQA,KATD;;AAWA,UAAM0F,QAAQ,GAAI1F,GAAD,IAAY;AAC5BP,YAAM,CAAC5F,GAAP;AACA4F,YAAM,CAACoB,IAAP,CACC,UADD,EAECkE,SAAS,CAACC,MAAV,CACC,0CADD,EAECZ,eAAe,CAACI,QAFjB,EAGCxE,GAHD,CAFD;AAQA,KAVD;;AAYA,UAAM2F,KAAK,GAAI3L,IAAD,IAAsB;AACnC,UAAIA,IAAI,KAAK,IAAb,EAAmB;AAClB4B,cAAM,IAAI5B,IAAI,CAAC1D,QAAL,EAAV;AACAkP,cAAM;AACN;AACD,KALD;;AAOA,UAAMlC,KAAK,GAAItD,GAAD,IAAW;AACxBP,YAAM,CAACoB,IAAP,CACC,UADD,EAECkE,SAAS,CAACC,MAAV,CACC,uBADD,EAECZ,eAAe,CAACQ,gBAFjB,EAGC5E,GAHD,CAFD;AAQA,KATD;;AAWA,UAAMnG,GAAG,GAAImG,GAAD,IAAW;AACtBP,YAAM,CAACoB,IAAP,CACC,UADD,EAECkE,SAAS,CAACC,MAAV,CACC,sBADD,EAECZ,eAAe,CAACS,eAFjB,EAGC7E,GAHD,CAFD;AAQA,KATD;;AAWA,SAAK4F,IAAL,GAAa5F,GAAD,IAAI;AACfP,YAAM,CAACiE,kBAAP,CAA0B,UAA1B;AACAjE,YAAM,CAACuC,cAAP,CAAsB,MAAtB,EAA8B2D,KAA9B;AACAlG,YAAM,CAACuC,cAAP,CAAsB,KAAtB,EAA6BnI,GAA7B;AACA4F,YAAM,CAACuC,cAAP,CAAsB,OAAtB,EAA+BsB,KAA/B;AACA7D,YAAM,CAACuC,cAAP,CAAsB,OAAtB,EAA+BkD,KAA/B;;AAEA,UAAIlF,GAAG,IAAI,IAAP,IAAe,OAAOuF,OAAP,KAAmB,UAAtC,EAAkD;AACjDA,eAAO,CAACvF,GAAD,CAAP;AACA;AACD,KAVD;;AAYAP,UAAM,CAACM,EAAP,CAAU,MAAV,EAAkB4F,KAAlB;AACAlG,UAAM,CAACM,EAAP,CAAU,KAAV,EAAiBlG,GAAjB;AACA4F,UAAM,CAACM,EAAP,CAAU,OAAV,EAAmBuD,KAAnB;AACA7D,UAAM,CAACM,EAAP,CAAU,OAAV,EAAmBmF,KAAnB;AACAzF,UAAM,CAACoG,UAAP,CAAkBP,OAAlB,EAA2BI,QAA3B;AACA;;AA1G8B;ACUhC;;;;;;MAIaI,YAAY,GAAG;AAC3BC,OAAK,EAAE,OADoB;AAE3B,cAAY,UAFe;AAG3BC,OAAK,EAAE,OAHoB;AAI3BC,SAAO,EAAE;AAJkB;AAO5B;;;;;MAIaC,SAAS,GAAG;AACxBC,cAAY,EAAE,CADU;AAExBC,YAAU,EAAE,CAFY;AAGxBC,WAAS,EAAE;AAHa;MAMZC,eAAe,GAAG;AAE/B,MAAMC,SAAS,GAAG,EAAlB;AACA,MAAMC,aAAa,GAAG,GAAtB;AACA,MAAMC,aAAa,GAAG,GAAtB;AACA,MAAM7J,IAAI,GAAG,MAAb;AACA,MAAM8J,cAAc,GAAG,GAAvB;AAEA,IAAIC,KAAK,GAAU,CAAnB;AAEA;;;;;AAIA,MAAMC,GAAG,GAAG,YAAe;AAC1B,MAAID,KAAK,KAAK,CAAd,EAAiB;AAAA,sCADFE,IACE;AADFA,UACE;AAAA;;AAChBA,QAAI,CAACvH,OAAL,CAAcwH,CAAD,IACZC,OAAO,CAACH,GAAR,CACC,OAAOE,CAAP,KAAa,QAAb,GACGA,CAAC,YAAYhF,KAAb,GACCgF,CAAC,CAACxG,OADH,GAEC0G,IAAI,CAACC,SAAL,CAAeH,CAAf,CAHJ,GAIGA,CALJ,CADD;AASA;AACD,CAZD;AAcA;;;;;;;AAKA,MAAMI,MAAM,GAAG,UAACtH,QAAD,EAAoD;AAClE,MAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAAA,uCADmBiH,IACnB;AADmBA,UACnB;AAAA;;AACnCjH,YAAQ,CAAC,GAAGiH,IAAJ,CAAR;AACA;AACD,CAJD;;MA4BaM,uBAAuBC,aAAY;;;;;;;;AAmC/CxJ,gBAWsC;AAAA,QAX1B;AACX0H,aADW;AAEX+B,UAFW;AAGXC,UAHW;AAIXC,cAJW;AAKXC,YALW;AAMXC,UANW;AAOXC,SAPW;AAQXC,SARW;AASXC,YATW;AAUXC;AAVW,KAW0B,uEAAF,EAAE;;;;AACrC;AA5Ce,mBAAkBvB,eAAlB;AAEG,eAAMM,GAAN;AACA,0BAAgD,CAClEd,YAAY,CAAC,UAAD,CADsD,EAElEA,YAAY,CAACE,KAFqD,EAGlEF,YAAY,CAACC,KAHqD,EAIlED,YAAY,CAACG,OAJqD,CAAhD;AAOT,kBAAoBC,SAAS,CAACC,YAA9B;AACA,mBAAU,KAAV;AACA,oBAAW,KAAX;AAEA,gBAAkC,IAAlC;AACA,oBAAyD,IAAzD;AACA,mBAAsC,IAAtC;AACA,kBAASlI,QAAQ,EAAjB;AACA,gBAAO,WAAP;AACA,eAAmC,KAAnC;AACA,eAAmC,KAAnC;AAGF,mCAA0B,IAAI6J,OAAJ,EAA1B;;AAuBP,QAAIzJ,KAAK,CAACC,OAAN,CAAcuJ,cAAd,CAAJ,EAAmC;AAClC,WAAKA,cAAL,GAAsBA,cAAtB;AACA;;AAED,QAAI,OAAOvC,OAAP,KAAmB,QAAvB,EAAiC;AAChC,WAAKA,OAAL,GAAeA,OAAf;AACA;;AAED,QAAI,OAAOkC,MAAP,KAAkB,QAAtB,EAAgC;AAC/B,WAAKA,MAAL,GAAcA,MAAd;AACA;;AAED,QAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC7B,WAAKA,IAAL,GAAYA,IAAZ;AACA;;AAED,QACCK,GAAG,IAAI,IAAP,KACC,OAAOA,GAAP,KAAe,SAAf,IACC,OAAOA,GAAP,KAAe,QAAf,IAA2BrJ,KAAK,CAACC,OAAN,CAAcoJ,GAAd,MAAuB,KAFpD,CADD,EAIE;AACD,WAAKA,GAAL,GAAWA,GAAX;AACA;;AAED,QACCC,GAAG,IAAI,IAAP,KACC,OAAOA,GAAP,KAAe,SAAf,IACC,OAAOA,GAAP,KAAe,QAAf,IAA2BtJ,KAAK,CAACC,OAAN,CAAcqJ,GAAd,MAAuB,KAFpD,CADD,EAIE;AACD,WAAKA,GAAL,GAAWA,GAAX;AACA;;AAED,SAAKF,IAAL,GAAYA,IAAI,KAAKC,GAAG,GAAGlB,aAAH,GAAmBmB,GAAG,GAAGlB,aAAH,GAAmBF,SAAjD,CAAhB;AACA,SAAKwB,QAAL,GAAgBT,IAAI,IAAIC,QAAR,GAAmB,KAAnB,GAA2B,IAA3C;;AAEA,QAAI,CAACD,IAAD,IAAS,CAAC,cAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAE/Q,MAAV,MAAgB,IAAhB,IAAgBC,aAAhB,GAAgBA,EAAhB,GAAoB,CAArB,IAA0B,CAAvC,EAA0C;AACzC,YAAM,IAAIsL,KAAJ,CAAU,yCAAV,CAAN;AACA,KAxCoC;;;AA2CrC,SAAKwF,IAAL,GAAY,MAAMA,IAAlB;;AACA,SAAKC,QAAL,GAAgB,MAAMA,QAAtB;;AAEA,QAAI,OAAOK,MAAP,KAAkB,UAAtB,EAAkC;AACjC,WAAKhB,GAAL,GAAWA,GAAX;AACA;AACD;;;;;;;;AAOMoB,OAAK,CAACC,KAAD,EAAa;AACxBtB,SAAK,GAAGsB,KAAR;AACA;;;;;;;AAMMxQ,OAAK;AACX,WAAO,KAAKyQ,MAAZ;AACA;;;;;;;AAMMC,YAAU;AAChB,WAAO,KAAKJ,QAAZ;AACA;;;;;;;;;;;;;;;AAcMK,SAAO,CACbxI,QADa,EAIe;AAAA,QAF5B6H,IAE4B,uEAFb,KAAKA,IAEQ;AAAA,QAD5BJ,IAC4B,uEADb,KAAKA,IACQ;AAAA,QAA5B5I,OAA4B,uEAAF,EAAE;AAE5B,SAAKgJ,IAAL,GAAYA,IAAZ;AACA,SAAKJ,IAAL,GAAYA,IAAZ;AACA,SAAKK,GAAL,GAAWjJ,OAAO,CAACiJ,GAAR,IAAe,KAAKA,GAA/B;;AAEA,QAAI,KAAKQ,MAAL,KAAgBhC,SAAS,CAACC,YAA9B,EAA4C;AAC3C,WAAKkC,IAAL,CAAU,MAAM,KAAKD,OAAL,CAAaxI,QAAb,EAAuB6H,IAAvB,EAA6BJ,IAA7B,EAAmC5I,OAAnC,CAAhB;AACA;;;;;;AAKD,UAAM6J,SAAS,GAAG;AACjB,WAAK1B,GAAL,CAAS,cAAc,KAAKS,IAAI,IAAI,KAAKI,IAAI,EAA7C;;AAEA,UAAI,KAAKC,GAAL,IAAY,CAAC,KAAKC,GAAtB,EAA2B;;AAE1B,YACC,OAAO,KAAKD,GAAZ,KAAoB,SAApB,IACA,KAAKa,IAAL,YAAqBC,SADrB,IAEA,CAAC,KAAKD,IAAL,CAAUJ,UAHZ,EAIE;AACD,eAAK7E,KAAL,CAAW,IAAX;AACA4D,gBAAM,CACLtH,QADK,EAELmF,SAAS,CAACC,MAAV,CACC,uCADD,EAECZ,eAAe,CAACU,cAFjB,CAFK,CAAN;AAOA,SAbD,MAaO;AACN,eAAK2D,OAAL,GAAe,IAAf;AACA;AACD;AACD,KAtBD;;;;;;;AA4BA,UAAMC,gBAAgB,GAAI1I,GAAD,IAAY;AACpC,UAAI,CAACA,GAAL,EAAU;AACTsI,iBAAS;AACT,OAFD,MAEO;AACN,aAAKhF,KAAL,CAAW,IAAX;AACA,aAAKsD,GAAL,CAAS5G,GAAT;AACAkH,cAAM,CACLtH,QADK,EAELmF,SAAS,CAACC,MAAV,CACC,mBADD,EAECZ,eAAe,CAACC,eAFjB,EAGCrE,GAHD,CAFK,CAAN;AAQA;AACD,KAfD;;AAiBA,UAAM2I,QAAQ,GAAG,CAChB3I,GADgB,EAEhBoF,GAFgB,KAE4B;AAE5C,UAAIpF,GAAJ,EAAS;AACR,YAAI,KAAKkI,MAAL,KAAgBhC,SAAS,CAACC,YAA1B,IAA0C,CAAC,KAAKoC,IAApD,EAA0D;AACzD;AACA;;AACD,aAAKjF,KAAL,CAAW,IAAX;AACA4D,cAAM,CAACtH,QAAD,EAAWI,GAAX,CAAN;AACA,OAND,MAMO,IAAIoF,GAAG,CAACH,IAAJ,IAAY,KAAhB,EAAuB;AAC7B,aAAK2B,GAAL,CAASxB,GAAG,CAACpL,IAAb,EAD6B;;AAI7B,aAAKkO,MAAL,GAAchC,SAAS,CAACG,SAAxB;AACAa,cAAM,CAACtH,QAAD,EAAW,IAAX,EAAiBwF,GAAG,CAACpL,IAArB,CAAN;AACA,OANM,MAMA;AACN,aAAK4M,GAAL,CAAS,oBAAoBxB,GAAG,CAACpL,IAAI,EAArC;AACA,aAAKqO,IAAL,CAAU;AACTnB,gBAAM,CACLtH,QADK,EAELmF,SAAS,CAACC,MAAV,CACC,4BADD,EAECZ,eAAe,CAACE,WAFjB,EAGCtE,GAHD,EAICoF,GAAG,CAACpL,IAJL,CAFK,CAAN;AASA,SAVD;AAWA;AACD,KA9BD;;AAgCA,SAAKkO,MAAL,GAAchC,SAAS,CAACE,UAAxB;AACA,SAAKQ,GAAL,CAAS,eAAe,KAAKS,IAAI,IAAI,KAAKI,IAAI,EAA9C;;AAEA,QAAI,KAAKC,GAAT,EAAc;AACb,WAAKa,IAAL,GAAYH,OAAO,CAClB,KAAKX,IADa,EAElB,KAAKJ,IAAL,CAAUpQ,IAAV,EAFkB,EAGlB,OAAO,KAAKyQ,GAAZ,KAAoB,QAApB,GAA+B,KAAKA,GAApC,GAA0C,EAHxB,EAIlBY,SAJkB,CAAnB;AAMA,KAPD,MAOO;AACN,WAAKC,IAAL,GAAY,IAAIK,MAAJ,EAAZ;AACA,WAAKL,IAAL,CAAUH,OAAV,CAAkB,KAAKX,IAAvB,EAA6B,KAAKJ,IAAL,CAAUpQ,IAAV,EAA7B,EAA+CyR,gBAA/C;AACA;;AAED,SAAKG,OAAL,GAAe,IAAIxD,mBAAJ,CAAwB,KAAKkD,IAA7B,EAAmC,KAAKjD,OAAxC,EAAiD,MAC/D,KAAKhC,KAAL,CAAW,IAAX,CADc,CAAf;AAGA,SAAKiF,IAAL,CAAUrH,IAAV,CAAe,UAAf,EAA2ByH,QAA3B;AACA,SAAKJ,IAAL,CAAUrH,IAAV,CAAe,OAAf,EAAwByH,QAAxB,EA7G4B,CA6GM;AAClC;;;;;;;;;AAQMG,MAAI,CAACxO,GAAD,EAAcsF,QAAd,EAAgD;AAC1D,QAAI,KAAK2I,IAAL,IAAa,IAAb,IAAqB,KAAKL,MAAL,KAAgBhC,SAAS,CAACG,SAAnD,EAA8D;AAC7D,WAAKO,GAAL,CAAStM,GAAT;AAEA,WAAKiO,IAAL,CAAUrH,IAAV,CAAe,UAAf,EAA2B,CAAClB,GAAD,EAAMoF,GAAN,KAAS;AACnC,YAAIpF,GAAJ,EAAS;AACRkH,gBAAM,CAACtH,QAAD,EAAWI,GAAX,CAAN;AACA,SAFD,MAEO;AACN,eAAK4G,GAAL,CAASxB,GAAG,CAACpL,IAAb;AACAkN,gBAAM,CAACtH,QAAD,EAAW,IAAX,EAAiBwF,GAAjB,CAAN;AACA;AACD,OAPD;;AAQA,UAAI,KAAKmD,IAAL,CAAUQ,QAAd,EAAwB;AACvB,aAAKR,IAAL,CAAU3H,KAAV,CAAgBtG,GAAhB;AACA;AACD,KAdD,MAcO;AACN,WAAKgJ,KAAL,CAAW,IAAX;AACA4D,YAAM,CACLtH,QADK,EAELmF,SAAS,CAACC,MAAV,CACC,oCADD,EAECZ,eAAe,CAACM,YAFjB,CAFK,CAAN;AAOA;AACD;;;;;;;;;;AASMsE,SAAO,CACbC,GADa,EAEbrJ,QAFa,EAGmB;AAAA,QAAhCsJ,KAAgC,uEAAL,CAAC,GAAD,CAAK;AAEhC,UAAMC,UAAU,GAAG9K,KAAK,CAACC,OAAN,CAAc4K,KAAd,IAChBA,KADgB,GAEhB,OAAOA,KAAP,KAAiB,QAAjB,GACA,CAACA,KAAD,CADA,GAEA,CAAC,GAAD,CAJH;;AAMA,UAAMP,QAAQ,GAAG,CAChB3I,GADgB,EAEhBoF,GAFgB,KAE6C;AAE7D,UAAIpF,GAAJ,EAAS;AACRkH,cAAM,CAACtH,QAAD,EAAWI,GAAX,CAAN;AACA,OAFD,MAEO;AACN,cAAMiF,IAAI,GAAGmE,MAAM,CAAChE,GAAG,CAACH,IAAL,CAAnB;;AACA,YAAIkE,UAAU,CAACE,OAAX,CAAmBpE,IAAnB,MAA6B,CAAC,CAAlC,EAAqC;AACpCiC,gBAAM,CAACtH,QAAD,EAAWI,GAAX,EAAgBoF,GAAG,CAACpL,IAApB,EAA0BoL,GAAG,CAAC9E,OAA9B,CAAN;AACA,SAFD,MAEO,IACN,CAAC2E,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,GAA1B,KACAG,GAAG,CAAC9E,OAAJ,CAAY5C,WAAZ,GAA0B4L,QAA1B,CAAmC,UAAnC,CADA,IAEA,KAAKC,uBAAL,CAA6B1S,GAA7B,CAAiC8R,QAAjC,MAA+C,KAHzC,EAIL;AACD,eAAKY,uBAAL,CAA6BC,GAA7B,CAAiCb,QAAjC;AACA9C,oBAAU,CAAC;AACV,iBAAKiD,IAAL,CAAUG,GAAG,GAAGrM,IAAhB,EAAsB+L,QAAtB;AACA,WAFS,EAEPjC,cAFO,CAAV;AAGA,SATM,MASA;AACN,gBAAM+C,MAAM,GAAGrE,GAAG,CAAC9E,OAAJ,GAAc,KAAK8E,GAAG,CAAC9E,OAAO,EAA9B,GAAmC,EAAlD;AACA,gBAAMoJ,YAAY,GAAG,4BACpBT,GAAG,CAACvQ,KAAJ,CAAU,GAAV,EAAe,CAAf,CACD,IAAI+Q,MAAM,EAFV;AAGAvC,gBAAM,CACLtH,QADK,EAELmF,SAAS,CAACC,MAAV,CACC0E,YADD,EAECtF,eAAe,CAACE,WAFjB,EAGC,IAHD,EAICc,GAAG,CAACpL,IAJL,CAFK,CAAN;AASA;AACD;AACD,KAnCD;;AAqCA,SAAKuP,uBAAL,CAA6BI,MAA7B,CAAoChB,QAApC;AACA,SAAKG,IAAL,CAAUG,GAAG,GAAGrM,IAAhB,EAAsB+L,QAAtB;AACA;;;;;;;;;;;;;;;;;AAgBMiB,MAAI,CAAChK,QAAD,EAAqC4H,MAArC,EAAoD;AAC9D,SAAKwB,OAAL,CAAa,QAAQxB,MAAM,IAAI,KAAKA,MAAM,EAA1C,EAA8C,CAACxH,GAAD,EAAMhG,IAAN,KAAU;AACvD,UAAIgG,GAAJ,EAAS;AACRkH,cAAM,CAACtH,QAAD,EAAWI,GAAX,CAAN;AACA,OAFD,MAEO;AACN,aAAK6J,mBAAL,CAAyB7P,IAAzB;AACAkN,cAAM,CAACtH,QAAD,EAAWI,GAAX,EAAgBhG,IAAhB,CAAN;AACA;AACD,KAPD;AAQA;;;;;;;;AAOM8P,UAAQ,CAAClK,QAAD,EAAmC;AACjD,UAAM+I,QAAQ,GAAG,CAAC3I,GAAD,EAAaoF,GAAb,KAAmC;AACnD,UAAI,KAAKmD,IAAL,IAAa,IAAjB,EAAuB;AACtB,cAAM,IAAIzG,KAAJ,CAAU,aAAV,CAAN;AACA;;AAED,UAAI9B,GAAJ,EAAS;AACRA,WAAG,CAACM,OAAJ,IAAe,wCAAf;AACA4G,cAAM,CAACtH,QAAD,EAAWI,GAAX,CAAN;AACA,OAHD,MAGO;AACN,cAAM+J,aAAa,GAAGC,mBAAmB,CACxC,OAAO,KAAKrC,GAAZ,KAAoB,QAApB,GAA+B,KAAKA,GAApC,GAA0C,EADF,CAAzC;AAGA,cAAMsC,YAAY,GAAG,IAAIzB,SAAJ,CAAc,KAAKD,IAAnB,EAAyB;AAAEwB;AAAF,SAAzB,CAArB;AAEAE,oBAAY,CAAClK,EAAb,CAAgB,OAAhB,EAA0BC,GAAD,IAAW;AACnC,eAAKsD,KAAL,CAAW,IAAX;AACA4D,gBAAM,CAACtH,QAAD,EAAWI,GAAX,CAAN;AACA,SAHD;AAKA,aAAKyI,OAAL,GAAe,IAAf;AACA,aAAKF,IAAL,GAAY0B,YAAZ;AAEA,YAAI5E,mBAAJ,CAAwB,KAAKkD,IAA7B,EAAmC,KAAKjD,OAAxC,EAAiD,MAChD,KAAKhC,KAAL,CAAW,IAAX,CADD;AAGA4D,cAAM,CAACtH,QAAD,EAAWwF,GAAG,CAACpL,IAAf,CAAN;AACA;AACD,KA3BD;;AA6BA,SAAKgP,OAAL,CAAa,UAAb,EAAyBL,QAAzB,EAAmC,CAAC,GAAD,CAAnC;AACA;;;;;;;;AAOMkB,qBAAmB,CAAC7P,IAAD,EAAa;;;;AAKtCA,QAAI,CAACtB,KAAL,CAAW,IAAX,EAAiB4G,OAAjB,CAA0B4K,GAAD,IAAI;AAC5B,YAAMC,KAAK,GAAGD,GAAG,CAACjS,KAAJ,CAAU,4CAAV,CAAd,CAD4B;;;;;;;AAU5B,UAAIkS,KAAK,IAAI,IAAT,IAAiB,KAAKC,QAAL,IAAiB,IAAtC,EAA4C;;;;;AAK3C,aAAKA,QAAL,CAAcD,KAAK,CAAC,CAAD,CAAL,CAASzM,WAAT,EAAd,IAAwCyM,KAAK,CAAC,CAAD,CAAL,IAAY,IAApD;AACA;AACD,KAjBD;AAkBA;;;;;;;;;AAQME,MAAI,CAACzK,QAAD,EAAqC4H,MAArC,EAAoD;AAC9D,SAAK4C,QAAL,GAAgB,EAAhB;AACA,SAAKpB,OAAL,CAAa,QAAQxB,MAAM,IAAI,KAAKA,MAAM,EAA1C,EAA8C,CAACxH,GAAD,EAAMhG,IAAN,KAAU;AACvD,UAAIgG,GAAJ,EAAS;AACRkH,cAAM,CAACtH,QAAD,EAAWI,GAAX,CAAN;AACA,OAFD,MAEO;AACN,aAAK6J,mBAAL,CAAyB7P,IAAzB;;AAEA,YAAI,KAAK2N,GAAL,IAAY,CAAC,KAAKc,OAAtB,EAA+B;AAC9B,eAAKqB,QAAL,CAAc,MAAM,KAAKO,IAAL,CAAUzK,QAAV,EAAoB4H,MAApB,CAApB;AACA,SAFD,MAEO;AACNN,gBAAM,CAACtH,QAAD,EAAWI,GAAX,EAAgBhG,IAAhB,CAAN;AACA;AACD;AACD,KAZD;AAaA;;;;;;;;AAOMsQ,UAAQ,CAACC,GAAD,EAAY;;;AAC1B,WAAO,CAAC,WAAKH,QAAL,MAAa,IAAb,IAAa5T,aAAb,GAAaA,EAAb,GAAiB,EAAlB,EAAsB+T,GAAG,CAAC7M,WAAJ,EAAtB,MAA6CvH,SAApD;AACA;;;;;;;;;;AASMqU,MAAI,CAAC5K,QAAD,EAAqC4H,MAArC,EAAmD;AAC7D,SAAKwB,OAAL,CAAaxB,MAAM,GAAG,QAAQA,MAAM,EAAjB,GAAsB,MAAzC,EAAiD5H,QAAjD,EAA2D,CAAC,GAAD,EAAM,GAAN,CAA3D;AACA;;;;;;;;AAOM6K,MAAI,CAAC7K,QAAD,EAAmC;AAC7C,SAAKoJ,OAAL,CAAa,MAAb,EAAqBpJ,QAArB;AACA;;;;;;;;AAOM8K,MAAI,CAAC9K,QAAD,EAAmC;AAC7C,SAAKkJ,IAAL,CAAU,MAAV,EAAkBlJ,QAAlB;AACA;;;;;;;;;AAQM+K,MAAI,CAAC/K,QAAD,EAAqCb,IAArC,EAAiD;AAC3D,SAAKiK,OAAL,CAAa,aAAajK,IAAI,EAA9B,EAAkCa,QAAlC;AACA;;;;;;;;;AAQMgL,MAAI,CAAChL,QAAD,EAAqCV,EAArC,EAA+C;AACzD,SAAK8J,OAAL,CAAa,WAAW9J,EAAE,EAA1B,EAA8BU,QAA9B,EAAwC,CAAC,GAAD,EAAM,GAAN,CAAxC;AACA;;;;;;;;AAOM5F,MAAI,CAAC4F,QAAD,EAAmC;AAC7C,SAAKoJ,OAAL,CAAa,MAAb,EAAqBpJ,QAArB,EAA+B,CAAC,GAAD,CAA/B;AACA;;;;;;;;AAOMiL,UAAQ,CAACjL,QAAD,EAAmC;AACjD,SAAKoJ,OAAL,CAAa,GAAGpM,IAAI,GAApB,EAAyBgD,QAAzB;AACA;;;;;;;;AAOMU,SAAO,CAACtG,IAAD,EAAa;;;AAC1B,SAAK4M,GAAL,CAAS5M,IAAT;AACA,qBAAKuO,IAAL,MAAS,IAAT,IAAS/R,aAAT,GAAS,MAAT,GAASA,GAAEoK,KAAF,CAAQ5G,IAAR,CAAT,MAAsB,IAAtB,IAAsBpD,aAAtB,GAAsBA,EAAtB,GAA0B,KAAKgQ,GAAL,CAAS,uBAAT,CAA1B;AACA;;;;;;;;;;AASMkE,QAAM,CAAC9U,OAAD,EAAkB4J,QAAlB,EAAoD;AAChE,SAAKoJ,OAAL,CAAa,QAAQhT,OAAO,EAA5B,EAAgC4J,QAAhC,EAA0C,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA1C;AACA;;;;;;;;;;AASMmL,MAAI,CAAC/U,OAAD,EAAkB4J,QAAlB,EAAoD;AAC9D,SAAKoJ,OAAL,CAAa,QAAQhT,OAAO,EAA5B,EAAgC4J,QAAhC;AACA;;;;;;;;;;;;;;AAaMoL,wBAAsB,CAC5BpL,QAD4B,EAE5B4H,MAF4B,EAEb;;AAGf,QAAI,CAAC,KAAK4C,QAAV,EAAoB;AACnB,YAAMzB,QAAQ,GAAG,CAAC3I,GAAD,EAAahG,IAAb,KAChBkN,MAAM,CAACtH,QAAD,EAAWI,GAAX,EAAgBhG,IAAhB,CADP;;AAEA,WAAKqQ,IAAL,CAAU,CAACrK,GAAD,EAAMhG,IAAN,KAAU;AACnB,YAAIgG,GAAJ,EAAS;AACR,eAAK4J,IAAL,CAAUjB,QAAV,EAAoBnB,MAApB;AACA,SAFD,MAEO;AACNN,gBAAM,CAACtH,QAAD,EAAWI,GAAX,EAAgBhG,IAAhB,CAAN;AACA;AACD,OAND,EAMGwN,MANH;AAOA;AACD;;;;;;;;;;;;;;;;;;;AAkBMyD,OAAK,CACXrL,QADW,EAEX0H,IAFW,EAGXC,QAHW,EAIuC;AAAA,QAAlD9I,OAAkD,uEAAF,EAAE;;;;AAElD,UAAMwM,KAAK,GAAG;AACb3D,UAAI,EAAEA,IAAI,GAAG,MAAMA,IAAT,GAAgB,KAAKA,IADlB;AAEbC,cAAQ,EAAEA,QAAQ,GAAG,MAAMA,QAAT,GAAoB,KAAKA,QAF9B;AAGbnG,YAAM,EAAE,mBAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,MAAT,MAAe,IAAf,IAAe5K,aAAf,GAAe,MAAf,GAAeA,GAAE2F,WAAF,EAAf,MAA8B,IAA9B,IAA8BvF,aAA9B,GAA8BA,EAA9B,GAAkC;AAH7B,KAAd;AAMA,UAAM4Q,MAAM,GAAG,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEA,MAAT,KAAmB,KAAKA,MAAvC;;AAEA,UAAM0D,QAAQ,GAAG,CAAClL,GAAD,EAAgChG,IAAhC,KAA6C;;;AAC7D,UAAIgG,GAAJ,EAAS;AACRkH,cAAM,CAACtH,QAAD,EAAWI,GAAX,CAAN;AACA;AACA;;AAED,UAAIoB,MAAM,GAAqC,IAA/C;;;;;;AAMA,YAAM+J,aAAa,GAAIC,SAAD,IAAkB;AACvC,cAAMC,IAAI,GAAGC,UAAU,CAAC,KAAD,EAAQL,KAAK,CAAC1D,QAAN,EAAR,CAAvB;AACA8D,YAAI,CAACE,MAAL,CAAYhL,MAAM,CAACxB,IAAP,CAAYqM,SAAZ,EAAuB,QAAvB,EAAiC9U,QAAjC,CAA0C,OAA1C,CAAZ;AACA,eAAOiK,MAAM,CAACxB,IAAP,CAAY,GAAGkM,KAAK,CAAC3D,IAAN,EAAY,IAAI+D,IAAI,CAACG,MAAL,CAAY,KAAZ,CAAkB,EAAjD,EAAqDlV,QAArD,CACN,QADM,CAAP;AAGA,OAND;;;;;;AAWA,YAAMmV,WAAW,GAAG,MACnBlL,MAAM,CAACxB,IAAP,CAAY,SAASkM,KAAK,CAAC3D,IAAN,EAAY,SAAS2D,KAAK,CAAC1D,QAAN,EAAgB,EAA1D,EAA8DjR,QAA9D,CACC,QADD,CADD;;;;;;;AASA,YAAMoV,aAAa,GAAG,MACrBnL,MAAM,CAACxB,IAAP,CACC,QAAQkM,KAAK,CAAC3D,IAAN,EAAY,qBAAqB2D,KAAK,CAAC1D,QAAN,EAAgB,cAD1D,EAEEjR,QAFF,CAEW,QAFX,CADD,CAhC6D;;;;AAuC7D,UAAI,CAAC8K,MAAL,EAAa;AACZ,cAAMuK,SAAS,GAAG,KAAK9D,cAAvB;AACA,YAAI+D,IAAI,GAAG,EAAX;;AAEA,YAAI,QAAO,WAAKxB,QAAL,MAAa,IAAb,IAAa5T,aAAb,GAAa,MAAb,GAAaA,GAAG,MAAH,CAApB,MAAmC,QAAvC,EAAiD;AAChDoV,cAAI,GAAG,KAAKxB,QAAL,CAAc,MAAd,CAAP;AACA;;AAED,aAAK,IAAIpS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2T,SAAS,CAACpV,MAA9B,EAAsCyB,CAAC,EAAvC,EAA2C;AAC1C,cAAI4T,IAAI,CAACtC,QAAL,CAAcqC,SAAS,CAAC3T,CAAD,CAAvB,CAAJ,EAAiC;AAChCoJ,kBAAM,GAAGuK,SAAS,CAAC3T,CAAD,CAAlB;AACA;AACA;AACD;AACD;;;;;;;;;AAQD,YAAMqH,MAAM,GAAG,CAACW,GAAD,EAAahG,IAAb,KAA0B;AACxC,aAAK+N,QAAL,GAAgB,KAAhB;AACA,aAAKzE,KAAL,GAFwC,CAE3B;;AACb4D,cAAM,CACLtH,QADK,EAELmF,SAAS,CAACC,MAAV,CACC,sBADD,EAECZ,eAAe,CAACG,UAFjB,EAGCvE,GAHD,EAIChG,IAJD,CAFK,CAAN;AASA,OAZD;;;;;;;;AAmBA,YAAM2O,QAAQ,GAAG,CAAC3I,GAAD,EAAgChG,IAAhC,KAA6C;AAC7D,YAAIgG,GAAJ,EAAS;AACRX,gBAAM,CAACW,GAAD,EAAMhG,IAAN,CAAN;AACA,SAFD,MAEO;AACN,eAAK+N,QAAL,GAAgB,IAAhB;AACAb,gBAAM,CAACtH,QAAD,EAAWI,GAAX,EAAgBhG,IAAhB,CAAN;AACA;AACD,OAPD;;;;;;;;;AAeA,YAAM6R,OAAO,GAAG,CACf7L,GADe,EAEfhG,IAFe,EAGfoL,GAHe,KAGJ;AAEX,YAAIpF,GAAJ,EAAS;AACRX,gBAAM,CAACW,GAAD,EAAMhG,IAAN,CAAN;AACA,SAFD,MAEO;AACN,cAAIoH,MAAM,KAAK0E,YAAY,CAAC,UAAD,CAA3B,EAAyC;AACxC,iBAAKkD,OAAL,CAAamC,aAAa,CAAC/F,GAAD,CAA1B,EAAiCuD,QAAjC,EAA2C,CAAC,GAAD,EAAM,GAAN,CAA3C;AACA,WAFD,MAEO,IAAIvH,MAAM,KAAK0E,YAAY,CAACE,KAA5B,EAAmC;AACzC,iBAAKgD,OAAL,CACCzI,MAAM,CAACxB,IAAP,CAAYkM,KAAK,CAAC1D,QAAN,EAAZ,EAA8BjR,QAA9B,CAAuC,QAAvC,CADD,EAECqS,QAFD,EAGC,CAAC,GAAD,EAAM,GAAN,CAHD;AAKA;AACD;AACD,OAlBD;;;;;;;;;AA0BA,YAAMmD,WAAW,GAAG,CAAC9L,GAAD,EAAahG,IAAb,KAA0B;AAC7C,YAAIgG,GAAJ,EAAS;AACRX,gBAAM,CAACW,GAAD,EAAMhG,IAAN,CAAN;AACA,SAFD,MAEO;AACN,cAAIoH,MAAM,KAAK0E,YAAY,CAACE,KAA5B,EAAmC;AAClC,iBAAKgD,OAAL,CACCzI,MAAM,CAACxB,IAAP,CAAYkM,KAAK,CAAC3D,IAAN,EAAZ,EAA0BhR,QAA1B,CAAmC,QAAnC,CADD,EAECuV,OAFD,EAGC,CAAC,GAAD,CAHD;AAKA;AACD;AACD,OAZD;;AAcA,cAAQzK,MAAR;AACC,aAAK0E,YAAY,CAAC,UAAD,CAAjB;AACC,eAAKkD,OAAL,CAAa,SAASlD,YAAY,CAAC,UAAD,CAAY,EAA9C,EAAkD+F,OAAlD,EAA2D,CAAC,GAAD,CAA3D;AACA;;AACD,aAAK/F,YAAY,CAACE,KAAlB;AACC,eAAKgD,OAAL,CAAa,QAAQlD,YAAY,CAACE,KAAK,EAAvC,EAA2C8F,WAA3C,EAAwD,CAAC,GAAD,CAAxD;AACA;;AACD,aAAKhG,YAAY,CAACC,KAAlB;AACC,eAAKiD,OAAL,CACC,QAAQlD,YAAY,CAACC,KAAK,IAAI0F,WAAW,EAAE,EAD5C,EAEC9C,QAFD,EAGC,CAAC,GAAD,EAAM,GAAN,CAHD;AAKA;;AACD,aAAK7C,YAAY,CAACG,OAAlB;AACC,eAAK+C,OAAL,CACC,QAAQlD,YAAY,CAACG,OAAO,IAAIyF,aAAa,EAAE,EADhD,EAEC/C,QAFD,EAGC,CAAC,GAAD,EAAM,GAAN,CAHD;AAKA;;AACD;AACCzB,gBAAM,CACLtH,QADK,EAELmF,SAAS,CAACC,MAAV,CACC,oCADD,EAECZ,eAAe,CAACO,gBAFjB,EAGC,IAHD,EAIC3K,IAJD,CAFK,CAAN;AASA;AA/BF;AAiCA,KAxKD;;AA0KA,SAAKgR,sBAAL,CAA4BE,QAA5B,EAAsC1D,MAAtC;AACA;;;;;;;;AAOMlE,OAAK,GAAc;AAAA,QAAbyI,KAAa,uEAAL,KAAK;;AACzB,QAAI,KAAKxD,IAAT,EAAe;AACd,UAAIwD,KAAJ,EAAW;AACV,aAAKnF,GAAL,CAAS,4BAAT;AACA,aAAK2B,IAAL,CAAUrE,OAAV;AACA,OAHD,MAGO;AACN,aAAK0C,GAAL,CAAS,yBAAT;AACA,aAAK2B,IAAL,CAAU1O,GAAV;AACA;AACD;;AAED,QAAI,KAAKgP,OAAT,EAAkB;AACjB,WAAKA,OAAL,CAAajD,IAAb;AACA,WAAKiD,OAAL,GAAe,IAAf;AACA;;AAED,SAAKX,MAAL,GAAchC,SAAS,CAACC,YAAxB;AACA,SAAKsC,OAAL,GAAe,KAAf;AACA,SAAKF,IAAL,GAAY,IAAZ;AACA,SAAK6B,QAAL,GAAgB,IAAhB;AACA,SAAKrC,QAAL,GAAgB,EAAE,KAAKT,IAAL,MAAe,KAAKC,QAAL,EAAjB,CAAhB;AACA;;;;;;;;AAOMc,MAAI,CAACzI,QAAD,EAAoC;AAC9C,SAAKoJ,OAAL,CACC,MADD,EAEC,CAAChJ,GAAD,EAAMhG,IAAN,KAAU;AACTkN,YAAM,CAACtH,QAAD,EAAWI,GAAX,EAAgBhG,IAAhB,CAAN;AACA,WAAKsJ,KAAL;AACA,KALF,EAMC,CAAC,GAAD,EAAM,GAAN,CAND;AAQA;;AAx0B8C;;MChFnC0I,WAAU;;;;;;;;AAetBpO,cAAYqO,MAAZ,EAAkD;AAblC,iBAAwB,EAAxB;AAEN,mBAAU,KAAV;AACA,iBAAQ,KAAR;AACA,iBAA6B,IAA7B;AAUT,SAAK9G,IAAL,GAAY,IAAIgC,cAAJ,CAAmB8E,MAAnB,CAAZ;AACA;;;;;;;;;AAQMnD,MAAI,CACV1D,GADU,EAEVxF,QAFU,EAEyC;AAEnD,UAAMU,OAAO,GACZ8E,GAAG,YAAYzH,OAAf,GACGyH,GADH,GAEG,KAAK8G,eAAL,CAAqB9G,GAArB,IACA,IAAIzH,OAAJ,CAAYyH,GAAZ,CADA,GAEA,IALJ;;AAOA,QAAI9E,OAAO,IAAI,IAAf,EAAqB;AACpBV,cAAQ,CAAC,IAAIkC,KAAJ,CAAU,yCAAV,CAAD,EAAuDsD,GAAvD,CAAR;AACA;AACA;;AAED,UAAM;AAAEpG,aAAF;AAAWC;AAAX,QAA+BqB,OAAO,CAACxB,aAAR,EAArC;;AAEA,QAAIE,OAAJ,EAAa;AACZ,YAAMmN,KAAK,GAAG,KAAKC,kBAAL,CAAwB9L,OAAxB,EAAiCV,QAAjC,CAAd;;AACA,UAAIuM,KAAK,CAACjN,EAAN,CAAS3I,MAAT,KAAoB,CAAxB,EAA2B;AAC1B,eAAOqJ,QAAQ,CAAC,IAAIkC,KAAJ,CAAU,gCAAV,CAAD,EAA8CsD,GAA9C,CAAf;AACA;;AACD,WAAKiH,KAAL,CAAW5V,IAAX,CAAgB0V,KAAhB;;AACA,WAAKG,KAAL;AACA,KAPD,MAOO;AACN1M,cAAQ,CAAC,IAAIkC,KAAJ,CAAU7C,eAAV,CAAD,EAA6BmG,GAA7B,CAAR;AACA;AACD;;;;;;;;AAOMmH,WAAS,CAACnH,GAAD,EAAa;AAC5B,WAAO,IAAIlF,OAAJ,CAAqB,CAACC,OAAD,EAAUC,MAAV,KAAgB;AAC3C,WAAK0I,IAAL,CAAU1D,GAAV,EAAe,CAACpF,GAAD,EAAMoF,GAAN,KAAS;AACvB,YAAIpF,GAAG,IAAI,IAAX,EAAiB;AAChBI,gBAAM,CAACJ,GAAD,CAAN;AACA,SAFD,MAEO;AACNG,iBAAO,CAACiF,GAAD,CAAP;AACA;AACD,OAND;AAOA,KARM,CAAP;AASA;;;;;;;;;;AASMgH,oBAAkB,CACxB9L,OADwB,EAIvB;AAAA,QAFDV,QAEC,uEAFqD;;AAErD;AAED,UAAM,CAAC;AAAE5J,aAAO,EAAE+I;AAAX,KAAD,IAAsBhH,aAAa,CAACuI,OAAO,CAACpC,MAAR,CAAea,IAAhB,CAAzC;AACA,UAAMoN,KAAK,GAAG;AACb7L,aADa;AAEbpB,QAAE,EAAE,EAFS;AAGbH,UAHa;AAIba,cAAQ,EAAEA,QAAQ,CAAC4M,IAAT,CAAc,IAAd;AAJG,KAAd;AAOA,UAAM;AACLtO,YAAM,EAAE;AAAEgB,UAAF;AAAMC,UAAN;AAAUC,WAAV;AAAe,uBAAeqN;AAA9B;AADH,QAEFnM,OAFJ;;AAIA,QAAI,CAAC,OAAOpB,EAAP,KAAc,QAAd,IAA0Bb,KAAK,CAACC,OAAN,CAAcY,EAAd,CAA3B,KAAiDA,EAAE,CAAC3I,MAAH,GAAY,CAAjE,EAAoE;AACnE4V,WAAK,CAACjN,EAAN,GAAWnH,aAAa,CAACmH,EAAD,CAAxB;AACA;;AAED,QAAI,CAAC,OAAOC,EAAP,KAAc,QAAd,IAA0Bd,KAAK,CAACC,OAAN,CAAca,EAAd,CAA3B,KAAiDA,EAAE,CAAC5I,MAAH,GAAY,CAAjE,EAAoE;AACnE4V,WAAK,CAACjN,EAAN,GAAWiN,KAAK,CAACjN,EAAN,CAASmC,MAAT,CACVtJ,aAAa,CAACoH,EAAD,CAAb,CAAkBjI,MAAlB,CACEF,CAAD,IAAOmV,KAAK,CAACjN,EAAN,CAASwN,IAAT,CAAeC,CAAD,IAAOA,CAAC,CAAC3W,OAAF,KAAcgB,CAAC,CAAChB,OAArC,MAAkD,KAD1D,CADU,CAAX;AAKA;;AAED,QAAI,CAAC,OAAOoJ,GAAP,KAAe,QAAf,IAA2Bf,KAAK,CAACC,OAAN,CAAcc,GAAd,CAA5B,KAAmDA,GAAG,CAAC7I,MAAJ,GAAa,CAApE,EAAuE;AACtE4V,WAAK,CAACjN,EAAN,GAAWiN,KAAK,CAACjN,EAAN,CAASmC,MAAT,CACVtJ,aAAa,CAACqH,GAAD,CAAb,CAAmBlI,MAAnB,CACEF,CAAD,IAAOmV,KAAK,CAACjN,EAAN,CAASwN,IAAT,CAAeC,CAAD,IAAOA,CAAC,CAAC3W,OAAF,KAAcgB,CAAC,CAAChB,OAArC,MAAkD,KAD1D,CADU,CAAX;AAKA;;AAED,QAAI,OAAOyW,UAAP,KAAsB,QAAtB,IAAkCA,UAAU,CAAClW,MAAX,GAAoB,CAA1D,EAA6D;AAC5D,YAAMqW,gBAAgB,GAAG7U,aAAa,CAAC0U,UAAD,CAAtC;;AACA,UAAIG,gBAAgB,CAACrW,MAAjB,GAA0B,CAA9B,EAAiC;AAChC,cAAM,CAAC;AAAEP,iBAAO,EAAE6W;AAAX,SAAD,IAAmCD,gBAAzC;AACAT,aAAK,CAACM,UAAN,GAAmBI,iBAAnB;AACA;AACD;;AAED,WAAOV,KAAP;AACA;;;;;;;AAMSG,OAAK;AACd,QAAI,KAAKQ,KAAL,IAAc,IAAlB,EAAwB;AACvBC,kBAAY,CAAC,KAAKD,KAAN,CAAZ;AACA;;AAED,QAAI,KAAKT,KAAL,CAAW9V,MAAf,EAAuB;AACtB,UAAI,KAAK4O,IAAL,CAAU1N,KAAV,MAAqByO,SAAS,CAACC,YAAnC,EAAiD;AAChD,aAAK6G,QAAL,CAAc,KAAKX,KAAL,CAAW,CAAX,CAAd;AACA,OAFD,MAEO,IACN,KAAKlH,IAAL,CAAU1N,KAAV,MAAqByO,SAAS,CAACG,SAA/B,IACA,CAAC,KAAK4G,OADN,IAEA,KAAKC,KAHC,EAIL;AACD,aAAKC,SAAL,CAAe,KAAKd,KAAL,CAAWe,KAAX,EAAf;AACA;AACD,KAVD;;AAAA,SAaK,IAAI,KAAKjI,IAAL,CAAU1N,KAAV,MAAqByO,SAAS,CAACG,SAAnC,EAA8C;AAClD,WAAKyG,KAAL,GAAajH,UAAU,CAAC,MAAM,KAAKV,IAAL,CAAUkD,IAAV,EAAP,EAAyB,IAAzB,CAAvB;AACA;AACD;;;;;;;;AAOS2E,UAAQ,CAACb,KAAD,EAAoB;;;;;AAKrC,UAAM/D,OAAO,GAAIpI,GAAD,IAAW;AAC1B,UAAI,CAACA,GAAL,EAAU;AACT,cAAMqN,KAAK,GAAIrN,GAAD,IAAW;AACxB,cAAI,CAACA,GAAL,EAAU;AACT,iBAAKkN,KAAL,GAAa,IAAb;;AACA,iBAAKZ,KAAL;AACA,WAHD,MAGO;AACNH,iBAAK,CAACvM,QAAN,CAAeI,GAAf,EAAoBmM,KAAK,CAAC7L,OAA1B,EADM;;AAIN,iBAAK+L,KAAL,CAAWe,KAAX;;AACA,iBAAKd,KAAL;AACA;AACD,SAXD;;AAaA,YAAI,CAAC,KAAKnH,IAAL,CAAUgD,UAAV,EAAL,EAA6B;AAC5B,eAAKhD,IAAL,CAAU8F,KAAV,CAAgBoC,KAAhB;AACA,SAFD,MAEO;AACN,eAAKlI,IAAL,CAAU6F,sBAAV,CAAiCqC,KAAjC;AACA;AACD,OAnBD,MAmBO;AACNlB,aAAK,CAACvM,QAAN,CAAeI,GAAf,EAAoBmM,KAAK,CAAC7L,OAA1B,EADM;;AAIN,aAAK+L,KAAL,CAAWe,KAAX;;AACA,aAAKd,KAAL;AACA;AACD,KA3BD;;AA6BA,SAAKY,KAAL,GAAa,KAAb;AACA,SAAK/H,IAAL,CAAUiD,OAAV,CAAkBA,OAAlB;AACA;;;;;;;;AAOS8D,iBAAe,CAAC9G,GAAD,EAAoB;AAC5C,WACCA,GAAG,CAACrG,IAAJ,KACCqG,GAAG,CAAClG,EAAJ,IAAUkG,GAAG,CAACjG,EAAd,IAAoBiG,GAAG,CAAChG,GADzB,MAECgG,GAAG,CAAClI,IAAJ,KAAa/G,SAAb,IAA0B,KAAKmX,oBAAL,CAA0BlI,GAAG,CAAChH,UAA9B,CAF3B,CADD;AAKA;;;;;;;;AAOSkP,sBAAoB,CAC7BlP,UAD6B,EACsB;AAEnD,QAAIC,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAJ,EAA+B;AAC9B,aAAOA,UAAU,CAACsO,IAAX,CAAiBa,GAAD,IAAI;AAC1B,eAAO,KAAKC,wBAAL,CAA8BD,GAA9B,CAAP;AACA,OAFM,CAAP;AAGA,KAJD,MAIO;AACN,aAAO,KAAKC,wBAAL,CAA8BpP,UAA9B,CAAP;AACA;AACD;;;;;;;;AAOSoP,0BAAwB,CAACpP,UAAD,EAA8B;AAC/D,WACCA,UAAU,KACTA,UAAU,CAACpE,IAAX,IAAmBoE,UAAU,CAACmB,IADrB,CAAV,IAEAnB,UAAU,CAACM,WAAX,KAA2B,IAH5B;AAKA;;;;;;;;;AAQS+O,WAAS,CAACtB,KAAD,EAAsB3K,IAAtB,EAAuD;;;;;AAKzE,WAAQxB,GAAD,IAAW;AACjB,UAAI,CAACA,GAAD,IAAQwB,IAAZ,EAAkB;AACjBA,YAAI,CAACkM,KAAL,CAAW,IAAX,EAAiB,CAACvB,KAAD,CAAjB;AACA,OAFD,MAEO;;;AAGN,aAAKhH,IAAL,CAAUsF,IAAV,CAAe,MAAM,KAAKkD,SAAL,CAAe3N,GAAf,EAAoBmM,KAApB,CAArB;AACA;AACD,KARD;AASA;;;;;;;;AAOSgB,WAAS,CAAChB,KAAD,EAAoB;AACtC,UAAMpN,IAAI,GAAGoN,KAAK,CAACM,UAAN,IAAoBN,KAAK,CAACpN,IAAvC;AACA,SAAKkO,OAAL,GAAe,IAAf;AACA,SAAK9H,IAAL,CAAUwF,IAAV,CAAe,KAAK8C,SAAL,CAAetB,KAAf,EAAsB,KAAKyB,SAA3B,CAAf,EAAsD,MAAM7O,IAAN,GAAa,GAAnE;AACA;;;;;;;;AAOS6O,WAAS,CAACzB,KAAD,EAAoB;;;AACtC,QAAIA,KAAK,CAACjN,EAAN,IAAY,IAAZ,IAAoB,OAAOiN,KAAK,CAACjN,EAAb,KAAoB,QAA5C,EAAsD;AACrD,YAAM,IAAI2O,SAAJ,CAAc,wBAAd,CAAN;AACA;;AAED,UAAM3O,EAAE,GAAG,WAAK,CAACA,EAAN,CAASkO,KAAT,QAAgB,IAAhB,IAAgB5W,aAAhB,GAAgB,MAAhB,GAAgBA,GAAER,OAA7B;AACA,SAAKmP,IAAL,CAAUyF,IAAV,CACC,KAAK6C,SAAL,CAAetB,KAAf,EAAsBA,KAAK,CAACjN,EAAN,CAAS3I,MAAT,GAAkB,KAAKqX,SAAvB,GAAmC,KAAKE,SAA9D,CADD,EAEC,IAAI5O,EAAE,GAFP;AAIA;;;;;;;;AAOS4O,WAAS,CAAC3B,KAAD,EAAoB;AACtC,SAAKhH,IAAL,CAAUnL,IAAV,CAAe,KAAKyT,SAAL,CAAetB,KAAf,EAAsB,KAAK4B,YAA3B,CAAf;AACA;;;;;;;;AAOSA,cAAY,CAAC5B,KAAD,EAAoB;AACzC,UAAM1M,MAAM,GAAG0M,KAAK,CAAC7L,OAAN,CAAcb,MAAd,EAAf;AAEAA,UAAM,CAACM,EAAP,CAAU,MAAV,EAAmB/F,IAAD,IAAU,KAAKmL,IAAL,CAAU7E,OAAV,CAAkBtG,IAAlB,CAA5B;AACAyF,UAAM,CAACM,EAAP,CAAU,KAAV,EAAiB;AAChB,WAAKoF,IAAL,CAAU0F,QAAV,CACC,KAAK4C,SAAL,CAAetB,KAAf,EAAsB,MAAM,KAAKwB,SAAL,CAAe,IAAf,EAAqBxB,KAArB,CAA5B,CADD;AAGA,KAJD,EAJyC;;;AAYzC1M,UAAM,CAACM,EAAP,CAAU,OAAV,EAAoBC,GAAD,IAAI;AACtB,WAAKmF,IAAL,CAAU7B,KAAV;;AACA,WAAKqK,SAAL,CAAe3N,GAAf,EAAoBmM,KAApB;AACA,KAHD;AAIA;;;;;;;;;AAQSwB,WAAS,CAAC3N,GAAD,EAAoBmM,KAApB,EAAuC;AACzD,SAAKc,OAAL,GAAe,KAAf;AACAd,SAAK,CAACvM,QAAN,CAAeI,GAAf,EAAoBmM,KAAK,CAAC7L,OAA1B;;AACA,SAAKgM,KAAL;AACA;;AA7UqB","names":["OPERATORS","Map","tokenizeAddress","address","tokens","token","undefined","operator","character","toString","length","_a","push","type","value","_b","has","get","map","x","trim","filter","convertAddressTokens","addressObjects","groups","addresses","comments","texts","state","isGroup","handleToken","name","join","group","addressparser","i","match","splice","replace","getRFC2822Date","date","Date","useUtc","getRFC2822DateUTC","dates","split","day","toUTCString","pop","rfc2822re","isRFC2822Date","test","encoder","TextEncoder","RANGES","LOOKUP","MAX_CHUNK_LENGTH","MAX_MIME_WORD_LENGTH","MAX_B64_MIME_WORD_BYTE_LENGTH","tripletToBase64","num","encodeChunk","uint8","start","end","output","encodeBase64","data","len","extraBytes","len2","tmp","splitMimeEncodedString","str","maxlen","minWordLength","maxWordLength","Math","max","lines","curLine","substr","index","done","chr","parseInt","checkRanges","nr","reduce","val","range","mimeEncode","encoding","decoder","TextDecoder","buffer","encode","decode","aggregate","ord","String","fromCharCode","toUpperCase","mimeWordEncode","mimeWordEncoding","parts","encodedStr","charCodeAt","j","substring","p","CRLF","MIMECHUNK","MIME64CHUNK","BUFFERSIZE","counter","generateBoundary","text","possible","charAt","floor","random","convertPersonToAddress","person","convertDashDelimitedTextToSnakeCase","toLowerCase","Message","constructor","headers","getTime","process","pid","hostname","header","content","attachment","Array","isArray","attach","subject","options","alternative","charset","inline","attachments","checkValidity","from","isValid","validationError","to","cc","bcc","failed","forEach","path","existsSync","stream","readable","valid","callback","MessageStream","read","on","err","readAsync","Promise","resolve","reject","Stream","message","Buffer","alloc","bytes","byteLength","bufferIndex","write","emit","loops","ceil","loop","paused","once","outputAttachmentHeaders","method","concat","outputBase64","outputFile","next","chunk","inputEncoding","opened","fd","readBytes","Error","readFile","removeListener","closeFileSync","closeFile","openFile","outputStream","previous","resume","pause","buff","isBuffer","padded","copy","outputAttachment","build","outputData","outputMessage","boundary","list","related","outputRelated","outputMixed","outputText","close","outputAlternative","encoded","finish","removeAllListeners","outputHeaderData","outputHeader","Object","prototype","hasOwnProperty","call","nextTick","destroy","destroySoon","SMTPErrorStates","COULDNOTCONNECT","BADRESPONSE","AUTHFAILED","TIMEDOUT","ERROR","NOCONNECTION","AUTHNOTSUPPORTED","CONNECTIONCLOSED","CONNECTIONENDED","CONNECTIONAUTH","SMTPError","create","code","error","smtp","msg","SMTPResponseMonitor","timeout","onerror","notify","line","timedout","watch","stop","setTimeout","AUTH_METHODS","PLAIN","LOGIN","XOAUTH2","SMTPState","NOTCONNECTED","CONNECTING","CONNECTED","DEFAULT_TIMEOUT","SMTP_PORT","SMTP_SSL_PORT","SMTP_TLS_PORT","GREYLIST_DELAY","DEBUG","log","args","d","console","JSON","stringify","caller","SMTPConnection","EventEmitter","host","user","password","domain","port","ssl","tls","logger","authentication","WeakSet","loggedin","debug","level","_state","authorized","connect","quit","connected","sock","TLSSocket","_secure","connectedErrBack","response","Socket","monitor","send","writable","command","cmd","codes","codesArray","Number","indexOf","includes","greylistResponseTracker","add","suffix","errorMessage","delete","helo","parse_smtp_features","starttls","secureContext","createSecureContext","secureSocket","ext","parse","features","ehlo","has_extn","opt","help","rset","noop","mail","rcpt","data_end","verify","expn","ehlo_or_helo_if_needed","login","initiate","encodeCramMd5","challenge","hmac","createHmac","update","digest","encodePlain","encodeXoauth2","preferred","auth","attempt","attemptUser","force","SMTPClient","server","_canMakeMessage","stack","createMessageStack","queue","_poll","sendAsync","bind","returnPath","some","y","parsedReturnPath","returnPathAddress","timer","clearTimeout","_connect","sending","ready","_sendmail","shift","begin","_containsInlinedHtml","att","_isAttachmentInlinedHtml","_sendsmtp","apply","_senddone","_sendrcpt","TypeError","_senddata","_sendmessage"],"sources":["E:\\DHRUv\\SAVED GAMES\\webDev\\PortFolio\\portfolio\\node_modules\\emailjs\\smtp\\address.ts","E:\\DHRUv\\SAVED GAMES\\webDev\\PortFolio\\portfolio\\node_modules\\emailjs\\smtp\\date.ts","E:\\DHRUv\\SAVED GAMES\\webDev\\PortFolio\\portfolio\\node_modules\\emailjs\\smtp\\mime.ts","E:\\DHRUv\\SAVED GAMES\\webDev\\PortFolio\\portfolio\\node_modules\\emailjs\\smtp\\message.ts","E:\\DHRUv\\SAVED GAMES\\webDev\\PortFolio\\portfolio\\node_modules\\emailjs\\smtp\\error.ts","E:\\DHRUv\\SAVED GAMES\\webDev\\PortFolio\\portfolio\\node_modules\\emailjs\\smtp\\response.ts","E:\\DHRUv\\SAVED GAMES\\webDev\\PortFolio\\portfolio\\node_modules\\emailjs\\smtp\\connection.ts","E:\\DHRUv\\SAVED GAMES\\webDev\\PortFolio\\portfolio\\node_modules\\emailjs\\smtp\\client.ts"],"sourcesContent":["interface AddressToken {\n\ttype: 'operator' | 'text';\n\tvalue: string;\n}\n\nexport interface AddressObject {\n\taddress?: string;\n\tname?: string;\n\tgroup?: AddressObject[];\n}\n\n/*\n * Operator tokens and which tokens are expected to end the sequence\n */\nconst OPERATORS = new Map([\n\t['\"', '\"'],\n\t['(', ')'],\n\t['<', '>'],\n\t[',', ''],\n\t// Groups are ended by semicolons\n\t[':', ';'],\n\t// Semicolons are not a legal delimiter per the RFC2822 grammar other\n\t// than for terminating a group, but they are also not valid for any\n\t// other use in this context.  Given that some mail clients have\n\t// historically allowed the semicolon as a delimiter equivalent to the\n\t// comma in their UI, it makes sense to treat them the same as a comma\n\t// when used outside of a group.\n\t[';', ''],\n]);\n\n/**\n * Tokenizes the original input string\n *\n * @param {string | string[] | undefined} address string(s) to tokenize\n * @return {AddressToken[]} An array of operator|text tokens\n */\nfunction tokenizeAddress(address: string | string[] = '') {\n\tconst tokens: AddressToken[] = [];\n\tlet token: AddressToken | undefined = undefined;\n\tlet operator: string | undefined = undefined;\n\n\tfor (const character of address.toString()) {\n\t\tif ((operator?.length ?? 0) > 0 && character === operator) {\n\t\t\ttokens.push({ type: 'operator', value: character });\n\t\t\ttoken = undefined;\n\t\t\toperator = undefined;\n\t\t} else if ((operator?.length ?? 0) === 0 && OPERATORS.has(character)) {\n\t\t\ttokens.push({ type: 'operator', value: character });\n\t\t\ttoken = undefined;\n\t\t\toperator = OPERATORS.get(character);\n\t\t} else {\n\t\t\tif (token == null) {\n\t\t\t\ttoken = { type: 'text', value: character };\n\t\t\t\ttokens.push(token);\n\t\t\t} else {\n\t\t\t\ttoken.value += character;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn tokens\n\t\t.map((x) => {\n\t\t\tx.value = x.value.trim();\n\t\t\treturn x;\n\t\t})\n\t\t.filter((x) => x.value.length > 0);\n}\n\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {AddressToken[]} tokens Tokens object\n * @return {AddressObject[]} addresses object array\n */\nfunction convertAddressTokens(tokens: AddressToken[]) {\n\tconst addressObjects: AddressObject[] = [];\n\tconst groups: string[] = [];\n\tlet addresses: string[] = [];\n\tlet comments: string[] = [];\n\tlet texts: string[] = [];\n\n\tlet state = 'text';\n\tlet isGroup = false;\n\tfunction handleToken(token: AddressToken) {\n\t\tif (token.type === 'operator') {\n\t\t\tswitch (token.value) {\n\t\t\t\tcase '<':\n\t\t\t\t\tstate = 'address';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '(':\n\t\t\t\t\tstate = 'comment';\n\t\t\t\t\tbreak;\n\t\t\t\tcase ':':\n\t\t\t\t\tstate = 'group';\n\t\t\t\t\tisGroup = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstate = 'text';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (token.value.length > 0) {\n\t\t\tswitch (state) {\n\t\t\t\tcase 'address':\n\t\t\t\t\taddresses.push(token.value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'comment':\n\t\t\t\t\tcomments.push(token.value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'group':\n\t\t\t\t\tgroups.push(token.value);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\ttexts.push(token.value);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Filter out <addresses>, (comments) and regular text\n\tfor (const token of tokens) {\n\t\thandleToken(token);\n\t}\n\n\t// If there is no text but a comment, replace the two\n\tif (texts.length === 0 && comments.length > 0) {\n\t\ttexts = [...comments];\n\t\tcomments = [];\n\t}\n\n\t// http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n\tif (isGroup) {\n\t\taddressObjects.push({\n\t\t\tname: texts.length === 0 ? undefined : texts.join(' '),\n\t\t\tgroup: groups.length > 0 ? addressparser(groups.join(',')) : [],\n\t\t});\n\t} else {\n\t\t// If no address was found, try to detect one from regular text\n\t\tif (addresses.length === 0 && texts.length > 0) {\n\t\t\tfor (let i = texts.length - 1; i >= 0; i--) {\n\t\t\t\tif (texts[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n\t\t\t\t\taddresses = texts.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// still no address\n\t\t\tif (addresses.length === 0) {\n\t\t\t\tfor (let i = texts.length - 1; i >= 0; i--) {\n\t\t\t\t\ttexts[i] = texts[i]\n\t\t\t\t\t\t.replace(/\\s*\\b[^@\\s]+@[^@\\s]+\\b\\s*/, (address: string) => {\n\t\t\t\t\t\t\tif (addresses.length === 0) {\n\t\t\t\t\t\t\t\taddresses = [address.trim()];\n\t\t\t\t\t\t\t\treturn ' ';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn address;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.trim();\n\n\t\t\t\t\tif (addresses.length > 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If there's still is no text but a comment exixts, replace the two\n\t\tif (texts.length === 0 && comments.length > 0) {\n\t\t\ttexts = [...comments];\n\t\t\tcomments = [];\n\t\t}\n\n\t\t// Keep only the first address occurence, push others to regular text\n\t\tif (addresses.length > 1) {\n\t\t\ttexts = [...texts, ...addresses.splice(1)];\n\t\t}\n\n\t\tif (addresses.length === 0 && isGroup) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\t// Join values with spaces\n\t\t\tlet address = addresses.join(' ');\n\t\t\tlet name = texts.length === 0 ? address : texts.join(' ');\n\n\t\t\tif (address === name) {\n\t\t\t\tif (address.match(/@/)) {\n\t\t\t\t\tname = '';\n\t\t\t\t} else {\n\t\t\t\t\taddress = '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\taddressObjects.push({ address, name });\n\t\t}\n\t}\n\n\treturn addressObjects;\n}\n\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    \"Name <address@domain>\"\n *\n * will be converted to\n *\n *     [{name: \"Name\", address: \"address@domain\"}]\n *\n * @param {string | string[] | undefined} address Address field\n * @return {AddressObject[]} An array of address objects\n */\nexport function addressparser(address?: string | string[]) {\n\tconst addresses: AddressObject[] = [];\n\tlet tokens: AddressToken[] = [];\n\n\tfor (const token of tokenizeAddress(address)) {\n\t\tif (\n\t\t\ttoken.type === 'operator' &&\n\t\t\t(token.value === ',' || token.value === ';')\n\t\t) {\n\t\t\tif (tokens.length > 0) {\n\t\t\t\taddresses.push(...convertAddressTokens(tokens));\n\t\t\t}\n\t\t\ttokens = [];\n\t\t} else {\n\t\t\ttokens.push(token);\n\t\t}\n\t}\n\n\tif (tokens.length > 0) {\n\t\taddresses.push(...convertAddressTokens(tokens));\n\t}\n\n\treturn addresses;\n}\n","/**\n * @param {Date} [date] an optional date to convert to RFC2822 format\n * @param {boolean} [useUtc] whether to parse the date as UTC (default: false)\n * @returns {string} the converted date\n */\nexport function getRFC2822Date(date = new Date(), useUtc = false) {\n\tif (useUtc) {\n\t\treturn getRFC2822DateUTC(date);\n\t}\n\n\tconst dates = date\n\t\t.toString()\n\t\t.replace('GMT', '')\n\t\t.replace(/\\s\\(.*\\)$/, '')\n\t\t.split(' ');\n\n\tdates[0] = dates[0] + ',';\n\n\tconst day = dates[1];\n\tdates[1] = dates[2];\n\tdates[2] = day;\n\n\treturn dates.join(' ');\n}\n\n/**\n * @param {Date} [date] an optional date to convert to RFC2822 format (UTC)\n * @returns {string} the converted date\n */\nexport function getRFC2822DateUTC(date = new Date()) {\n\tconst dates = date.toUTCString().split(' ');\n\tdates.pop(); // remove timezone\n\tdates.push('+0000');\n\treturn dates.join(' ');\n}\n\n/**\n * RFC 2822 regex\n * @see https://tools.ietf.org/html/rfc2822#section-3.3\n * @see https://github.com/moment/moment/blob/a831fc7e2694281ce31e4f090bbcf90a690f0277/src/lib/create/from-string.js#L101\n */\nconst rfc2822re =\n\t/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n\n/**\n * @param {string} [date] a string to check for conformance to the [rfc2822](https://tools.ietf.org/html/rfc2822#section-3.3) standard\n * @returns {boolean} the result of the conformance check\n */\nexport function isRFC2822Date(date: string) {\n\treturn rfc2822re.test(date);\n}\n","// adapted from https://github.com/emailjs/emailjs-mime-codec/blob/6909c706b9f09bc0e5c3faf48f723cca53e5b352/src/mimecodec.js\nimport { TextDecoder, TextEncoder } from 'util';\n\nconst encoder = new TextEncoder();\n\n/**\n * @see https://tools.ietf.org/html/rfc2045#section-6.7\n */\nconst RANGES = [\n\t[0x09], // <TAB>\n\t[0x0a], // <LF>\n\t[0x0d], // <CR>\n\t[0x20, 0x3c], // <SP>!\"#$%&'()*+,-./0123456789:;\n\t[0x3e, 0x7e], // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\n];\nconst LOOKUP =\n\t'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\nconst MAX_CHUNK_LENGTH = 16383; // must be multiple of 3\nconst MAX_MIME_WORD_LENGTH = 52;\nconst MAX_B64_MIME_WORD_BYTE_LENGTH = 39;\n\nfunction tripletToBase64(num: number) {\n\treturn (\n\t\tLOOKUP[(num >> 18) & 0x3f] +\n\t\tLOOKUP[(num >> 12) & 0x3f] +\n\t\tLOOKUP[(num >> 6) & 0x3f] +\n\t\tLOOKUP[num & 0x3f]\n\t);\n}\n\nfunction encodeChunk(uint8: Uint8Array, start: number, end: number) {\n\tlet output = '';\n\tfor (let i = start; i < end; i += 3) {\n\t\toutput += tripletToBase64(\n\t\t\t(uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]\n\t\t);\n\t}\n\treturn output;\n}\n\nfunction encodeBase64(data: Uint8Array) {\n\tconst len = data.length;\n\tconst extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\tlet output = '';\n\n\t// go through the array every three bytes, we'll deal with trailing stuff later\n\tfor (let i = 0, len2 = len - extraBytes; i < len2; i += MAX_CHUNK_LENGTH) {\n\t\toutput += encodeChunk(\n\t\t\tdata,\n\t\t\ti,\n\t\t\ti + MAX_CHUNK_LENGTH > len2 ? len2 : i + MAX_CHUNK_LENGTH\n\t\t);\n\t}\n\n\t// pad the end with zeros, but make sure to not forget the extra bytes\n\tif (extraBytes === 1) {\n\t\tconst tmp = data[len - 1];\n\t\toutput += LOOKUP[tmp >> 2];\n\t\toutput += LOOKUP[(tmp << 4) & 0x3f];\n\t\toutput += '==';\n\t} else if (extraBytes === 2) {\n\t\tconst tmp = (data[len - 2] << 8) + data[len - 1];\n\t\toutput += LOOKUP[tmp >> 10];\n\t\toutput += LOOKUP[(tmp >> 4) & 0x3f];\n\t\toutput += LOOKUP[(tmp << 2) & 0x3f];\n\t\toutput += '=';\n\t}\n\n\treturn output;\n}\n\n/**\n * Splits a mime encoded string. Needed for dividing mime words into smaller chunks\n *\n * @param {string} str Mime encoded string to be split up\n * @param {number} maxlen Maximum length of characters for one part (minimum 12)\n * @return {string[]} lines\n */\nfunction splitMimeEncodedString(str: string, maxlen = 12) {\n\tconst minWordLength = 12; // require at least 12 symbols to fit possible 4 octet UTF-8 sequences\n\tconst maxWordLength = Math.max(maxlen, minWordLength);\n\tconst lines: string[] = [];\n\n\twhile (str.length) {\n\t\tlet curLine = str.substr(0, maxWordLength);\n\n\t\tconst match = curLine.match(/=[0-9A-F]?$/i); // skip incomplete escaped char\n\t\tif (match) {\n\t\t\tcurLine = curLine.substr(0, match.index);\n\t\t}\n\n\t\tlet done = false;\n\t\twhile (!done) {\n\t\t\tlet chr;\n\t\t\tdone = true;\n\t\t\tconst match = str.substr(curLine.length).match(/^=([0-9A-F]{2})/i); // check if not middle of a unicode char sequence\n\t\t\tif (match) {\n\t\t\t\tchr = parseInt(match[1], 16);\n\t\t\t\t// invalid sequence, move one char back anc recheck\n\t\t\t\tif (chr < 0xc2 && chr > 0x7f) {\n\t\t\t\t\tcurLine = curLine.substr(0, curLine.length - 3);\n\t\t\t\t\tdone = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (curLine.length) {\n\t\t\tlines.push(curLine);\n\t\t}\n\t\tstr = str.substr(curLine.length);\n\t}\n\n\treturn lines;\n}\n\n/**\n *\n * @param {number} nr number\n * @returns {boolean} if number is in range\n */\nfunction checkRanges(nr: number) {\n\treturn RANGES.reduce(\n\t\t(val, range) =>\n\t\t\tval ||\n\t\t\t(range.length === 1 && nr === range[0]) ||\n\t\t\t(range.length === 2 && nr >= range[0] && nr <= range[1]),\n\t\tfalse\n\t);\n}\n\n/**\n * Encodes all non printable and non ascii bytes to =XX form, where XX is the\n * byte value in hex. This function does not convert linebreaks etc. it\n * only escapes character sequences\n *\n * NOTE: Encoding support depends on util.TextDecoder, which is severely limited\n * prior to Node.js 13.\n *\n * @see https://nodejs.org/api/util.html#util_whatwg_supported_encodings\n * @see https://github.com/nodejs/node/issues/19214\n *\n * @param {string|Uint8Array} data Either a string or an Uint8Array\n * @param {string} encoding WHATWG supported encoding\n * @return {string} Mime encoded string\n */\nexport function mimeEncode(data: string | Uint8Array = '', encoding = 'utf-8') {\n\tconst decoder = new TextDecoder(encoding);\n\tconst buffer =\n\t\ttypeof data === 'string'\n\t\t\t? encoder.encode(data)\n\t\t\t: encoder.encode(decoder.decode(data));\n\n\treturn buffer.reduce(\n\t\t(aggregate, ord, index) =>\n\t\t\tcheckRanges(ord) &&\n\t\t\t!(\n\t\t\t\t(ord === 0x20 || ord === 0x09) &&\n\t\t\t\t(index === buffer.length - 1 ||\n\t\t\t\t\tbuffer[index + 1] === 0x0a ||\n\t\t\t\t\tbuffer[index + 1] === 0x0d)\n\t\t\t)\n\t\t\t\t? // if the char is in allowed range, then keep as is, unless it is a ws in the end of a line\n\t\t\t\t  aggregate + String.fromCharCode(ord)\n\t\t\t\t: `${aggregate}=${ord < 0x10 ? '0' : ''}${ord\n\t\t\t\t\t\t.toString(16)\n\t\t\t\t\t\t.toUpperCase()}`,\n\t\t''\n\t);\n}\n\n/**\n * Encodes a string or an Uint8Array to an UTF-8 MIME Word\n *\n * NOTE: Encoding support depends on util.TextDecoder, which is severely limited\n * prior to Node.js 13.\n *\n * @see https://tools.ietf.org/html/rfc2047\n * @see https://nodejs.org/api/util.html#util_whatwg_supported_encodings\n * @see https://github.com/nodejs/node/issues/19214\n *\n * @param {string|Uint8Array} data String to be encoded\n * @param {'Q' | 'B'} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n * @param {string} encoding WHATWG supported encoding\n * @return {string} Single or several mime words joined together\n */\nexport function mimeWordEncode(\n\tdata: string | Uint8Array,\n\tmimeWordEncoding: 'Q' | 'B' = 'Q',\n\tencoding = 'utf-8'\n) {\n\tlet parts: string[] = [];\n\tconst decoder = new TextDecoder(encoding);\n\tconst str = typeof data === 'string' ? data : decoder.decode(data);\n\n\tif (mimeWordEncoding === 'Q') {\n\t\tconst encodedStr = mimeEncode(str, encoding).replace(\n\t\t\t/[^a-z0-9!*+\\-/=]/gi,\n\t\t\t(chr: string) =>\n\t\t\t\tchr === ' '\n\t\t\t\t\t? '_'\n\t\t\t\t\t: '=' +\n\t\t\t\t\t  (chr.charCodeAt(0) < 0x10 ? '0' : '') +\n\t\t\t\t\t  chr.charCodeAt(0).toString(16).toUpperCase()\n\t\t);\n\t\tparts =\n\t\t\tencodedStr.length < MAX_MIME_WORD_LENGTH\n\t\t\t\t? [encodedStr]\n\t\t\t\t: splitMimeEncodedString(encodedStr, MAX_MIME_WORD_LENGTH);\n\t} else {\n\t\t// Fits as much as possible into every line without breaking utf-8 multibyte characters' octets up across lines\n\t\tlet j = 0;\n\t\tlet i = 0;\n\t\twhile (i < str.length) {\n\t\t\tif (\n\t\t\t\tencoder.encode(str.substring(j, i)).length >\n\t\t\t\tMAX_B64_MIME_WORD_BYTE_LENGTH\n\t\t\t) {\n\t\t\t\t// we went one character too far, substring at the char before\n\t\t\t\tparts.push(str.substring(j, i - 1));\n\t\t\t\tj = i - 1;\n\t\t\t} else {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\t// add the remainder of the string\n\t\tstr.substring(j) && parts.push(str.substring(j));\n\t\tparts = parts.map((x) => encoder.encode(x)).map((x) => encodeBase64(x));\n\t}\n\n\treturn parts\n\t\t.map((p) => `=?UTF-8?${mimeWordEncoding}?${p}?= `)\n\t\t.join('')\n\t\t.trim();\n}\n","import {\n\tPathLike,\n\texistsSync,\n\topen as openFile,\n\tclose as closeFile,\n\tcloseSync as closeFileSync,\n\tread as readFile,\n} from 'fs';\nimport { hostname } from 'os';\nimport { Stream } from 'stream';\nimport type { Readable } from 'stream';\n\nimport { addressparser } from './address';\nimport { getRFC2822Date } from './date';\nimport { mimeWordEncode } from './mime';\n\nconst CRLF = '\\r\\n' as const;\n\n/**\n * MIME standard wants 76 char chunks when sending out.\n */\nexport const MIMECHUNK = 76 as const;\n\n/**\n * meets both base64 and mime divisibility\n */\nexport const MIME64CHUNK = (MIMECHUNK * 6) as 456;\n\n/**\n * size of the message stream buffer\n */\nexport const BUFFERSIZE = (MIMECHUNK * 24 * 7) as 12768;\n\nexport interface MessageAttachmentHeaders {\n\t[index: string]: string | undefined;\n\t'content-type'?: string;\n\t'content-transfer-encoding'?: BufferEncoding | '7bit' | '8bit';\n\t'content-disposition'?: string;\n}\n\nexport interface MessageAttachment {\n\t[index: string]:\n\t\t| string\n\t\t| boolean\n\t\t| MessageAttachment\n\t\t| MessageAttachment[]\n\t\t| MessageAttachmentHeaders\n\t\t| Readable\n\t\t| PathLike\n\t\t| undefined;\n\tname?: string;\n\theaders?: MessageAttachmentHeaders;\n\tinline?: boolean;\n\talternative?: MessageAttachment | boolean;\n\trelated?: MessageAttachment[];\n\tdata?: string;\n\tencoded?: boolean;\n\tstream?: Readable;\n\tpath?: PathLike;\n\ttype?: string;\n\tcharset?: string;\n\tmethod?: string;\n}\n\nexport interface MessageHeaders {\n\t[index: string]:\n\t\t| boolean\n\t\t| string\n\t\t| string[]\n\t\t| null\n\t\t| undefined\n\t\t| MessageAttachment\n\t\t| MessageAttachment[];\n\t'content-type'?: string;\n\t'message-id'?: string;\n\t'return-path'?: string | null;\n\tdate?: string;\n\tfrom: string | string[];\n\tto: string | string[];\n\tcc?: string | string[];\n\tbcc?: string | string[];\n\tsubject: string;\n\ttext: string | null;\n\tattachment?: MessageAttachment | MessageAttachment[];\n}\n\nlet counter = 0;\n\nfunction generateBoundary() {\n\tlet text = '';\n\tconst possible =\n\t\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'()+_,-./:=?\";\n\n\tfor (let i = 0; i < 69; i++) {\n\t\ttext += possible.charAt(Math.floor(Math.random() * possible.length));\n\t}\n\n\treturn text;\n}\n\nfunction convertPersonToAddress(person: string | string[]) {\n\treturn addressparser(person)\n\t\t.map(({ name, address }) => {\n\t\t\treturn name\n\t\t\t\t? `${mimeWordEncode(name).replace(/,/g, '=2C')} <${address}>`\n\t\t\t\t: address;\n\t\t})\n\t\t.join(', ');\n}\n\nfunction convertDashDelimitedTextToSnakeCase(text: string) {\n\treturn text\n\t\t.toLowerCase()\n\t\t.replace(/^(.)|-(.)/g, (match) => match.toUpperCase());\n}\n\nexport class Message {\n\tpublic readonly attachments: MessageAttachment[] = [];\n\tpublic readonly header: Partial<MessageHeaders> = {\n\t\t'message-id': `<${new Date().getTime()}.${counter++}.${\n\t\t\tprocess.pid\n\t\t}@${hostname()}>`,\n\t\tdate: getRFC2822Date(),\n\t};\n\tpublic readonly content: string = 'text/plain; charset=utf-8';\n\tpublic readonly text?: string;\n\tpublic alternative: MessageAttachment | null = null;\n\n\t/**\n\t * Construct an rfc2822-compliant message object.\n\t *\n\t * Special notes:\n\t * - The `from` field is required.\n\t * - At least one `to`, `cc`, or `bcc` header is also required.\n\t * - You can also add whatever other headers you want.\n\t *\n\t * @see https://tools.ietf.org/html/rfc2822\n\t * @param {Partial<MessageHeaders>} headers Message headers\n\t */\n\tconstructor(headers: Partial<MessageHeaders>) {\n\t\tfor (const header in headers) {\n\t\t\t// allow user to override default content-type to override charset or send a single non-text message\n\t\t\tif (/^content-type$/i.test(header)) {\n\t\t\t\tthis.content = headers[header] as string;\n\t\t\t} else if (header === 'text') {\n\t\t\t\tthis.text = headers[header] as string;\n\t\t\t} else if (\n\t\t\t\theader === 'attachment' &&\n\t\t\t\ttypeof headers[header] === 'object'\n\t\t\t) {\n\t\t\t\tconst attachment = headers[header];\n\t\t\t\tif (Array.isArray(attachment)) {\n\t\t\t\t\tfor (let i = 0; i < attachment.length; i++) {\n\t\t\t\t\t\tthis.attach(attachment[i]);\n\t\t\t\t\t}\n\t\t\t\t} else if (attachment != null) {\n\t\t\t\t\tthis.attach(attachment);\n\t\t\t\t}\n\t\t\t} else if (header === 'subject') {\n\t\t\t\tthis.header.subject = mimeWordEncode(headers.subject as string);\n\t\t\t} else if (/^(cc|bcc|to|from)/i.test(header)) {\n\t\t\t\tthis.header[header.toLowerCase()] = convertPersonToAddress(\n\t\t\t\t\theaders[header] as string | string[]\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// allow any headers the user wants to set??\n\t\t\t\tthis.header[header.toLowerCase()] = headers[header];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Attach a file to the message.\n\t *\n\t * Can be called multiple times, each adding a new attachment.\n\t *\n\t * @public\n\t * @param {MessageAttachment} options attachment options\n\t * @returns {Message} the current instance for chaining\n\t */\n\tpublic attach(options: MessageAttachment) {\n\t\t// sender can specify an attachment as an alternative\n\t\tif (options.alternative) {\n\t\t\tthis.alternative = options;\n\t\t\tthis.alternative.charset = options.charset || 'utf-8';\n\t\t\tthis.alternative.type = options.type || 'text/html';\n\t\t\tthis.alternative.inline = true;\n\t\t} else {\n\t\t\tthis.attachments.push(options);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {{ isValid: boolean, validationError: (string | undefined) }} an object specifying whether this message is validly formatted, and the first validation error if it is not.\n\t */\n\tpublic checkValidity() {\n\t\tif (\n\t\t\ttypeof this.header.from !== 'string' &&\n\t\t\tArray.isArray(this.header.from) === false\n\t\t) {\n\t\t\treturn {\n\t\t\t\tisValid: false,\n\t\t\t\tvalidationError: 'Message must have a `from` header',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\ttypeof this.header.to !== 'string' &&\n\t\t\tArray.isArray(this.header.to) === false &&\n\t\t\ttypeof this.header.cc !== 'string' &&\n\t\t\tArray.isArray(this.header.cc) === false &&\n\t\t\ttypeof this.header.bcc !== 'string' &&\n\t\t\tArray.isArray(this.header.bcc) === false\n\t\t) {\n\t\t\treturn {\n\t\t\t\tisValid: false,\n\t\t\t\tvalidationError:\n\t\t\t\t\t'Message must have at least one `to`, `cc`, or `bcc` header',\n\t\t\t};\n\t\t}\n\n\t\tif (this.attachments.length > 0) {\n\t\t\tconst failed: string[] = [];\n\n\t\t\tthis.attachments.forEach((attachment) => {\n\t\t\t\tif (attachment.path) {\n\t\t\t\t\tif (existsSync(attachment.path) === false) {\n\t\t\t\t\t\tfailed.push(`${attachment.path} does not exist`);\n\t\t\t\t\t}\n\t\t\t\t} else if (attachment.stream) {\n\t\t\t\t\tif (!attachment.stream.readable) {\n\t\t\t\t\t\tfailed.push('attachment stream is not readable');\n\t\t\t\t\t}\n\t\t\t\t} else if (!attachment.data) {\n\t\t\t\t\tfailed.push('attachment has no data associated with it');\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn {\n\t\t\t\tisValid: failed.length === 0,\n\t\t\t\tvalidationError: failed.join(', '),\n\t\t\t};\n\t\t}\n\n\t\treturn { isValid: true, validationError: undefined };\n\t}\n\n\t/**\n\t * @public\n\t * @deprecated does not conform to the `errback` style followed by the rest of the library, and will be removed in the next major version. use `checkValidity` instead.\n\t * @param {function(isValid: boolean, invalidReason: (string | undefined)): void} callback .\n\t * @returns {void}\n\t */\n\tpublic valid(callback: (isValid: boolean, invalidReason?: string) => void) {\n\t\tconst { isValid, validationError } = this.checkValidity();\n\t\tcallback(isValid, validationError);\n\t}\n\n\t/**\n\t * @public\n\t * @returns {MessageStream} a stream of the current message\n\t */\n\tpublic stream() {\n\t\treturn new MessageStream(this);\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(Error, string): void} callback the function to call with the error and buffer\n\t * @returns {void}\n\t */\n\tpublic read(callback: (err: Error, buffer: string) => void) {\n\t\tlet buffer = '';\n\t\tconst str = this.stream();\n\t\tstr.on('data', (data) => (buffer += data));\n\t\tstr.on('end', (err) => callback(err, buffer));\n\t\tstr.on('error', (err) => callback(err, buffer));\n\t}\n\n\tpublic readAsync() {\n\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\tthis.read((err, buffer) => {\n\t\t\t\tif (err != null) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(buffer);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nclass MessageStream extends Stream {\n\treadable = true;\n\tpaused = false;\n\tbuffer: Buffer | null = Buffer.alloc(MIMECHUNK * 24 * 7);\n\tbufferIndex = 0;\n\n\t/**\n\t * @param {Message} message the message to stream\n\t */\n\tconstructor(private message: Message) {\n\t\tsuper();\n\n\t\t/**\n\t\t * @param {string} [data] the data to output\n\t\t * @param {Function} [callback] the function\n\t\t * @param {any[]} [args] array of arguments to pass to the callback\n\t\t * @returns {void}\n\t\t */\n\t\tconst output = (data: string) => {\n\t\t\t// can we buffer the data?\n\t\t\tif (this.buffer != null) {\n\t\t\t\tconst bytes = Buffer.byteLength(data);\n\n\t\t\t\tif (bytes + this.bufferIndex < this.buffer.length) {\n\t\t\t\t\tthis.buffer.write(data, this.bufferIndex);\n\t\t\t\t\tthis.bufferIndex += bytes;\n\t\t\t\t}\n\t\t\t\t// we can't buffer the data, so ship it out!\n\t\t\t\telse if (bytes > this.buffer.length) {\n\t\t\t\t\tif (this.bufferIndex) {\n\t\t\t\t\t\tthis.emit(\n\t\t\t\t\t\t\t'data',\n\t\t\t\t\t\t\tthis.buffer.toString('utf-8', 0, this.bufferIndex)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.bufferIndex = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst loops = Math.ceil(data.length / this.buffer.length);\n\t\t\t\t\tlet loop = 0;\n\t\t\t\t\twhile (loop < loops) {\n\t\t\t\t\t\tthis.emit(\n\t\t\t\t\t\t\t'data',\n\t\t\t\t\t\t\tdata.substring(\n\t\t\t\t\t\t\t\tthis.buffer.length * loop,\n\t\t\t\t\t\t\t\tthis.buffer.length * (loop + 1)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tloop++;\n\t\t\t\t\t}\n\t\t\t\t} // we need to clean out the buffer, it is getting full\n\t\t\t\telse {\n\t\t\t\t\tif (!this.paused) {\n\t\t\t\t\t\tthis.emit(\n\t\t\t\t\t\t\t'data',\n\t\t\t\t\t\t\tthis.buffer.toString('utf-8', 0, this.bufferIndex)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.buffer.write(data, 0);\n\t\t\t\t\t\tthis.bufferIndex = bytes;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// we can't empty out the buffer, so let's wait till we resume before adding to it\n\t\t\t\t\t\tthis.once('resume', () => output(data));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @param {MessageAttachment} [attachment] the attachment whose headers you would like to output\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputAttachmentHeaders = (attachment: MessageAttachment) => {\n\t\t\tlet data: string[] = [];\n\t\t\tconst headers: Partial<MessageHeaders> = {\n\t\t\t\t'content-type':\n\t\t\t\t\tattachment.type +\n\t\t\t\t\t(attachment.charset ? `; charset=${attachment.charset}` : '') +\n\t\t\t\t\t(attachment.method ? `; method=${attachment.method}` : ''),\n\t\t\t\t'content-transfer-encoding': 'base64',\n\t\t\t\t'content-disposition': attachment.inline\n\t\t\t\t\t? 'inline'\n\t\t\t\t\t: `attachment; filename=\"${mimeWordEncode(\n\t\t\t\t\t\t\tattachment.name as string\n\t\t\t\t\t  )}\"`,\n\t\t\t};\n\n\t\t\t// allow sender to override default headers\n\t\t\tif (attachment.headers != null) {\n\t\t\t\tfor (const header in attachment.headers) {\n\t\t\t\t\theaders[header.toLowerCase()] = attachment.headers[header];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const header in headers) {\n\t\t\t\tdata = data.concat([\n\t\t\t\t\tconvertDashDelimitedTextToSnakeCase(header),\n\t\t\t\t\t': ',\n\t\t\t\t\theaders[header] as string,\n\t\t\t\t\tCRLF,\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\toutput(data.concat([CRLF]).join(''));\n\t\t};\n\n\t\t/**\n\t\t * @param {string} data the data to output as base64\n\t\t * @param {function(): void} [callback] the function to call after output is finished\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputBase64 = (data: string, callback?: () => void) => {\n\t\t\tconst loops = Math.ceil(data.length / MIMECHUNK);\n\t\t\tlet loop = 0;\n\t\t\twhile (loop < loops) {\n\t\t\t\toutput(data.substring(MIMECHUNK * loop, MIMECHUNK * (loop + 1)) + CRLF);\n\t\t\t\tloop++;\n\t\t\t}\n\t\t\tif (callback) {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t};\n\n\t\tconst outputFile = (\n\t\t\tattachment: MessageAttachment,\n\t\t\tnext: (err: NodeJS.ErrnoException | null) => void\n\t\t) => {\n\t\t\tconst chunk = MIME64CHUNK * 16;\n\t\t\tconst buffer = Buffer.alloc(chunk);\n\n\t\t\tconst inputEncoding =\n\t\t\t\tattachment?.headers?.['content-transfer-encoding'] || 'base64';\n\t\t\tconst encoding =\n\t\t\t\tinputEncoding === '7bit'\n\t\t\t\t\t? 'ascii'\n\t\t\t\t\t: inputEncoding === '8bit'\n\t\t\t\t\t? 'binary'\n\t\t\t\t\t: inputEncoding;\n\n\t\t\t/**\n\t\t\t * @param {Error} err the error to emit\n\t\t\t * @param {number} fd the file descriptor\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tconst opened = (err: NodeJS.ErrnoException | null, fd: number) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tthis.emit('error', err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst readBytes = (\n\t\t\t\t\terr: NodeJS.ErrnoException | null,\n\t\t\t\t\tbytes: number\n\t\t\t\t) => {\n\t\t\t\t\tif (err || this.readable === false) {\n\t\t\t\t\t\tthis.emit(\n\t\t\t\t\t\t\t'error',\n\t\t\t\t\t\t\terr || new Error('message stream was interrupted somehow!')\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// guaranteed to be encoded without padding unless it is our last read\n\t\t\t\t\toutputBase64(buffer.toString(encoding, 0, bytes), () => {\n\t\t\t\t\t\tif (bytes == chunk) {\n\t\t\t\t\t\t\t// we read a full chunk, there might be more\n\t\t\t\t\t\t\treadFile(fd, buffer, 0, chunk, null, readBytes);\n\t\t\t\t\t\t} // that was the last chunk, we are done reading the file\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tthis.removeListener('error', closeFileSync);\n\t\t\t\t\t\t\tcloseFile(fd, next);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\treadFile(fd, buffer, 0, chunk, null, readBytes);\n\t\t\t\tthis.once('error', closeFileSync);\n\t\t\t};\n\n\t\t\topenFile(attachment.path as PathLike, 'r', opened);\n\t\t};\n\n\t\t/**\n\t\t * @param {MessageAttachment} attachment the metadata to use as headers\n\t\t * @param {function(): void} callback the function to call after output is finished\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputStream = (\n\t\t\tattachment: MessageAttachment,\n\t\t\tcallback: () => void\n\t\t) => {\n\t\t\tconst { stream } = attachment;\n\t\t\tif (stream?.readable) {\n\t\t\t\tlet previous = Buffer.alloc(0);\n\n\t\t\t\tstream.resume();\n\n\t\t\t\tstream.on('end', () => {\n\t\t\t\t\toutputBase64(previous.toString('base64'), callback);\n\t\t\t\t\tthis.removeListener('pause', stream.pause);\n\t\t\t\t\tthis.removeListener('resume', stream.resume);\n\t\t\t\t\tthis.removeListener('error', stream.resume);\n\t\t\t\t});\n\n\t\t\t\tstream.on('data', (buff) => {\n\t\t\t\t\t// do we have bytes from a previous stream data event?\n\t\t\t\t\tlet buffer = Buffer.isBuffer(buff) ? buff : Buffer.from(buff);\n\n\t\t\t\t\tif (previous.byteLength > 0) {\n\t\t\t\t\t\tbuffer = Buffer.concat([previous, buffer]);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst padded = buffer.length % MIME64CHUNK;\n\t\t\t\t\tprevious = Buffer.alloc(padded);\n\n\t\t\t\t\t// encode as much of the buffer to base64 without empty bytes\n\t\t\t\t\tif (padded > 0) {\n\t\t\t\t\t\t// copy dangling bytes into previous buffer\n\t\t\t\t\t\tbuffer.copy(previous, 0, buffer.length - padded);\n\t\t\t\t\t}\n\t\t\t\t\toutputBase64(buffer.toString('base64', 0, buffer.length - padded));\n\t\t\t\t});\n\n\t\t\t\tthis.on('pause', stream.pause);\n\t\t\t\tthis.on('resume', stream.resume);\n\t\t\t\tthis.on('error', stream.resume);\n\t\t\t} else {\n\t\t\t\tthis.emit('error', { message: 'stream not readable' });\n\t\t\t}\n\t\t};\n\n\t\tconst outputAttachment = (\n\t\t\tattachment: MessageAttachment,\n\t\t\tcallback: () => void\n\t\t) => {\n\t\t\tconst build = attachment.path\n\t\t\t\t? outputFile\n\t\t\t\t: attachment.stream\n\t\t\t\t? outputStream\n\t\t\t\t: outputData;\n\t\t\toutputAttachmentHeaders(attachment);\n\t\t\tbuild(attachment, callback);\n\t\t};\n\n\t\t/**\n\t\t * @param {string} boundary the boundary text between outputs\n\t\t * @param {MessageAttachment[]} list the list of potential messages to output\n\t\t * @param {number} index the index of the list item to output\n\t\t * @param {function(): void} callback the function to call if index is greater than upper bound\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputMessage = (\n\t\t\tboundary: string,\n\t\t\tlist: MessageAttachment[],\n\t\t\tindex: number,\n\t\t\tcallback: () => void\n\t\t) => {\n\t\t\tif (index < list.length) {\n\t\t\t\toutput(`--${boundary}${CRLF}`);\n\t\t\t\tif (list[index].related) {\n\t\t\t\t\toutputRelated(list[index], () =>\n\t\t\t\t\t\toutputMessage(boundary, list, index + 1, callback)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\toutputAttachment(list[index], () =>\n\t\t\t\t\t\toutputMessage(boundary, list, index + 1, callback)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput(`${CRLF}--${boundary}--${CRLF}${CRLF}`);\n\t\t\t\tcallback();\n\t\t\t}\n\t\t};\n\n\t\tconst outputMixed = () => {\n\t\t\tconst boundary = generateBoundary();\n\t\t\toutput(\n\t\t\t\t`Content-Type: multipart/mixed; boundary=\"${boundary}\"${CRLF}${CRLF}--${boundary}${CRLF}`\n\t\t\t);\n\n\t\t\tif (this.message.alternative == null) {\n\t\t\t\toutputText(this.message);\n\t\t\t\toutputMessage(boundary, this.message.attachments, 0, close);\n\t\t\t} else {\n\t\t\t\toutputAlternative(\n\t\t\t\t\t// typescript bug; should narrow to { alternative: MessageAttachment }\n\t\t\t\t\tthis.message as Parameters<typeof outputAlternative>[0],\n\t\t\t\t\t() => outputMessage(boundary, this.message.attachments, 0, close)\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @param {MessageAttachment} attachment the metadata to use as headers\n\t\t * @param {function(): void} callback the function to call after output is finished\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputData = (\n\t\t\tattachment: MessageAttachment,\n\t\t\tcallback: () => void\n\t\t) => {\n\t\t\toutputBase64(\n\t\t\t\tattachment.encoded\n\t\t\t\t\t? attachment.data ?? ''\n\t\t\t\t\t: Buffer.from(attachment.data ?? '').toString('base64'),\n\t\t\t\tcallback\n\t\t\t);\n\t\t};\n\n\t\t/**\n\t\t * @param {Message} message the message to output\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputText = (message: Message) => {\n\t\t\tlet data: string[] = [];\n\n\t\t\tdata = data.concat([\n\t\t\t\t'Content-Type:',\n\t\t\t\tmessage.content,\n\t\t\t\tCRLF,\n\t\t\t\t'Content-Transfer-Encoding: 7bit',\n\t\t\t\tCRLF,\n\t\t\t]);\n\t\t\tdata = data.concat(['Content-Disposition: inline', CRLF, CRLF]);\n\t\t\tdata = data.concat([message.text || '', CRLF, CRLF]);\n\n\t\t\toutput(data.join(''));\n\t\t};\n\n\t\t/**\n\t\t * @param {MessageAttachment} message the message to output\n\t\t * @param {function(): void} callback the function to call after output is finished\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputRelated = (\n\t\t\tmessage: MessageAttachment,\n\t\t\tcallback: () => void\n\t\t) => {\n\t\t\tconst boundary = generateBoundary();\n\t\t\toutput(\n\t\t\t\t`Content-Type: multipart/related; boundary=\"${boundary}\"${CRLF}${CRLF}--${boundary}${CRLF}`\n\t\t\t);\n\t\t\toutputAttachment(message, () => {\n\t\t\t\toutputMessage(boundary, message.related ?? [], 0, () => {\n\t\t\t\t\toutput(`${CRLF}--${boundary}--${CRLF}${CRLF}`);\n\t\t\t\t\tcallback();\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * @param {Message} message the message to output\n\t\t * @param {function(): void} callback the function to call after output is finished\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputAlternative = (\n\t\t\tmessage: Message & { alternative: MessageAttachment },\n\t\t\tcallback: () => void\n\t\t) => {\n\t\t\tconst boundary = generateBoundary();\n\t\t\toutput(\n\t\t\t\t`Content-Type: multipart/alternative; boundary=\"${boundary}\"${CRLF}${CRLF}--${boundary}${CRLF}`\n\t\t\t);\n\t\t\toutputText(message);\n\t\t\toutput(`--${boundary}${CRLF}`);\n\n\t\t\t/**\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tconst finish = () => {\n\t\t\t\toutput([CRLF, '--', boundary, '--', CRLF, CRLF].join(''));\n\t\t\t\tcallback();\n\t\t\t};\n\n\t\t\tif (message.alternative.related) {\n\t\t\t\toutputRelated(message.alternative, finish);\n\t\t\t} else {\n\t\t\t\toutputAttachment(message.alternative, finish);\n\t\t\t}\n\t\t};\n\n\t\tconst close = (err?: Error) => {\n\t\t\tif (err) {\n\t\t\t\tthis.emit('error', err);\n\t\t\t} else {\n\t\t\t\tthis.emit(\n\t\t\t\t\t'data',\n\t\t\t\t\tthis.buffer?.toString('utf-8', 0, this.bufferIndex) ?? ''\n\t\t\t\t);\n\t\t\t\tthis.emit('end');\n\t\t\t}\n\t\t\tthis.buffer = null;\n\t\t\tthis.bufferIndex = 0;\n\t\t\tthis.readable = false;\n\t\t\tthis.removeAllListeners('resume');\n\t\t\tthis.removeAllListeners('pause');\n\t\t\tthis.removeAllListeners('error');\n\t\t\tthis.removeAllListeners('data');\n\t\t\tthis.removeAllListeners('end');\n\t\t};\n\n\t\t/**\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputHeaderData = () => {\n\t\t\tif (this.message.attachments.length || this.message.alternative) {\n\t\t\t\toutput(`MIME-Version: 1.0${CRLF}`);\n\t\t\t\toutputMixed();\n\t\t\t} // you only have a text message!\n\t\t\telse {\n\t\t\t\toutputText(this.message);\n\t\t\t\tclose();\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputHeader = () => {\n\t\t\tlet data: string[] = [];\n\n\t\t\tfor (const header in this.message.header) {\n\t\t\t\t// do not output BCC in the headers (regex) nor custom Object.prototype functions...\n\t\t\t\tif (\n\t\t\t\t\t!/bcc/i.test(header) &&\n\t\t\t\t\tObject.prototype.hasOwnProperty.call(this.message.header, header)\n\t\t\t\t) {\n\t\t\t\t\tdata = data.concat([\n\t\t\t\t\t\tconvertDashDelimitedTextToSnakeCase(header),\n\t\t\t\t\t\t': ',\n\t\t\t\t\t\tthis.message.header[header] as string,\n\t\t\t\t\t\tCRLF,\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toutput(data.join(''));\n\t\t\toutputHeaderData();\n\t\t};\n\n\t\tthis.once('destroy', close);\n\t\tprocess.nextTick(outputHeader);\n\t}\n\n\t/**\n\t * @public\n\t * pause the stream\n\t * @returns {void}\n\t */\n\tpublic pause() {\n\t\tthis.paused = true;\n\t\tthis.emit('pause');\n\t}\n\n\t/**\n\t * @public\n\t * resume the stream\n\t * @returns {void}\n\t */\n\tpublic resume() {\n\t\tthis.paused = false;\n\t\tthis.emit('resume');\n\t}\n\n\t/**\n\t * @public\n\t * destroy the stream\n\t * @returns {void}\n\t */\n\tpublic destroy() {\n\t\tthis.emit(\n\t\t\t'destroy',\n\t\t\tthis.bufferIndex > 0 ? { message: 'message stream destroyed' } : null\n\t\t);\n\t}\n\n\t/**\n\t * @public\n\t * destroy the stream at first opportunity\n\t * @returns {void}\n\t */\n\tpublic destroySoon() {\n\t\tthis.emit('destroy');\n\t}\n}\n","/**\n * @readonly\n * @enum\n */\nexport const SMTPErrorStates = {\n\tCOULDNOTCONNECT: 1,\n\tBADRESPONSE: 2,\n\tAUTHFAILED: 3,\n\tTIMEDOUT: 4,\n\tERROR: 5,\n\tNOCONNECTION: 6,\n\tAUTHNOTSUPPORTED: 7,\n\tCONNECTIONCLOSED: 8,\n\tCONNECTIONENDED: 9,\n\tCONNECTIONAUTH: 10,\n} as const;\n\nexport class SMTPError extends Error {\n\tpublic code: number | null = null;\n\tpublic smtp: unknown = null;\n\tpublic previous: Error | null = null;\n\n\t/**\n\t * @protected\n\t * @param {string} message error message\n\t */\n\tprotected constructor(message: string) {\n\t\tsuper(message);\n\t}\n\n\t/**\n\t *\n\t * @param {string} message error message\n\t * @param {number} code smtp error state\n\t * @param {Error | null} error previous error\n\t * @param {unknown} smtp arbitrary data\n\t * @returns {SMTPError} error\n\t */\n\tpublic static create(\n\t\tmessage: string,\n\t\tcode: number,\n\t\terror?: Error | null,\n\t\tsmtp?: unknown\n\t) {\n\t\tconst msg = error?.message ? `${message} (${error.message})` : message;\n\t\tconst err = new SMTPError(msg);\n\n\t\terr.code = code;\n\t\terr.smtp = smtp;\n\n\t\tif (error) {\n\t\t\terr.previous = error;\n\t\t}\n\n\t\treturn err;\n\t}\n}\n","import { SMTPError, SMTPErrorStates } from './error';\nimport type { Socket } from 'net';\nimport type { TLSSocket } from 'tls';\n\nexport class SMTPResponseMonitor {\n\tpublic readonly stop: (err?: Error) => void;\n\n\tconstructor(\n\t\tstream: Socket | TLSSocket,\n\t\ttimeout: number,\n\t\tonerror: (err: Error) => void\n\t) {\n\t\tlet buffer = '';\n\n\t\tconst notify = () => {\n\t\t\tif (buffer.length) {\n\t\t\t\t// parse buffer for response codes\n\t\t\t\tconst line = buffer.replace('\\r', '');\n\t\t\t\tif (\n\t\t\t\t\t!(\n\t\t\t\t\t\tline\n\t\t\t\t\t\t\t.trim()\n\t\t\t\t\t\t\t.split(/\\n/)\n\t\t\t\t\t\t\t.pop()\n\t\t\t\t\t\t\t?.match(/^(\\d{3})\\s/) ?? false\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst match = line ? line.match(/(\\d+)\\s?(.*)/) : null;\n\t\t\t\tconst data =\n\t\t\t\t\tmatch !== null\n\t\t\t\t\t\t? { code: match[1], message: match[2], data: line }\n\t\t\t\t\t\t: { code: -1, data: line };\n\n\t\t\t\tstream.emit('response', null, data);\n\t\t\t\tbuffer = '';\n\t\t\t}\n\t\t};\n\n\t\tconst error = (err: Error) => {\n\t\t\tstream.emit(\n\t\t\t\t'response',\n\t\t\t\tSMTPError.create(\n\t\t\t\t\t'connection encountered an error',\n\t\t\t\t\tSMTPErrorStates.ERROR,\n\t\t\t\t\terr\n\t\t\t\t)\n\t\t\t);\n\t\t};\n\n\t\tconst timedout = (err?: Error) => {\n\t\t\tstream.end();\n\t\t\tstream.emit(\n\t\t\t\t'response',\n\t\t\t\tSMTPError.create(\n\t\t\t\t\t'timedout while connecting to smtp server',\n\t\t\t\t\tSMTPErrorStates.TIMEDOUT,\n\t\t\t\t\terr\n\t\t\t\t)\n\t\t\t);\n\t\t};\n\n\t\tconst watch = (data: string | Buffer) => {\n\t\t\tif (data !== null) {\n\t\t\t\tbuffer += data.toString();\n\t\t\t\tnotify();\n\t\t\t}\n\t\t};\n\n\t\tconst close = (err: Error) => {\n\t\t\tstream.emit(\n\t\t\t\t'response',\n\t\t\t\tSMTPError.create(\n\t\t\t\t\t'connection has closed',\n\t\t\t\t\tSMTPErrorStates.CONNECTIONCLOSED,\n\t\t\t\t\terr\n\t\t\t\t)\n\t\t\t);\n\t\t};\n\n\t\tconst end = (err: Error) => {\n\t\t\tstream.emit(\n\t\t\t\t'response',\n\t\t\t\tSMTPError.create(\n\t\t\t\t\t'connection has ended',\n\t\t\t\t\tSMTPErrorStates.CONNECTIONENDED,\n\t\t\t\t\terr\n\t\t\t\t)\n\t\t\t);\n\t\t};\n\n\t\tthis.stop = (err) => {\n\t\t\tstream.removeAllListeners('response');\n\t\t\tstream.removeListener('data', watch);\n\t\t\tstream.removeListener('end', end);\n\t\t\tstream.removeListener('close', close);\n\t\t\tstream.removeListener('error', error);\n\n\t\t\tif (err != null && typeof onerror === 'function') {\n\t\t\t\tonerror(err);\n\t\t\t}\n\t\t};\n\n\t\tstream.on('data', watch);\n\t\tstream.on('end', end);\n\t\tstream.on('close', close);\n\t\tstream.on('error', error);\n\t\tstream.setTimeout(timeout, timedout);\n\t}\n}\n","import { createHmac } from 'crypto';\nimport { EventEmitter } from 'events';\nimport { Socket } from 'net';\nimport { hostname } from 'os';\nimport {\n\tconnect,\n\tcreateSecureContext,\n\tConnectionOptions,\n\tTLSSocket,\n} from 'tls';\n\nimport { SMTPError, SMTPErrorStates } from './error';\nimport { SMTPResponseMonitor } from './response';\n\n/**\n * @readonly\n * @enum\n */\nexport const AUTH_METHODS = {\n\tPLAIN: 'PLAIN',\n\t'CRAM-MD5': 'CRAM-MD5',\n\tLOGIN: 'LOGIN',\n\tXOAUTH2: 'XOAUTH2',\n} as const;\n\n/**\n * @readonly\n * @enum\n */\nexport const SMTPState = {\n\tNOTCONNECTED: 0,\n\tCONNECTING: 1,\n\tCONNECTED: 2,\n} as const;\n\nexport const DEFAULT_TIMEOUT = 5000 as const;\n\nconst SMTP_PORT = 25 as const;\nconst SMTP_SSL_PORT = 465 as const;\nconst SMTP_TLS_PORT = 587 as const;\nconst CRLF = '\\r\\n' as const;\nconst GREYLIST_DELAY = 300 as const;\n\nlet DEBUG: 0 | 1 = 0;\n\n/**\n * @param {...any[]} args the message(s) to log\n * @returns {void}\n */\nconst log = (...args: any[]) => {\n\tif (DEBUG === 1) {\n\t\targs.forEach((d) =>\n\t\t\tconsole.log(\n\t\t\t\ttypeof d === 'object'\n\t\t\t\t\t? d instanceof Error\n\t\t\t\t\t\t? d.message\n\t\t\t\t\t\t: JSON.stringify(d)\n\t\t\t\t\t: d\n\t\t\t)\n\t\t);\n\t}\n};\n\n/**\n * @param {function(...any[]): void} callback the function to call\n * @param {...any[]} args the arguments to apply to the function\n * @returns {void}\n */\nconst caller = (callback?: (...rest: any[]) => void, ...args: any[]) => {\n\tif (typeof callback === 'function') {\n\t\tcallback(...args);\n\t}\n};\n\nexport type SMTPSocketOptions = Omit<\n\tConnectionOptions,\n\t'port' | 'host' | 'path' | 'socket' | 'timeout' | 'secureContext'\n>;\n\nexport interface SMTPConnectionOptions {\n\ttimeout: number | null;\n\tuser: string;\n\tpassword: string;\n\tdomain: string;\n\thost: string;\n\tport: number;\n\tssl: boolean | SMTPSocketOptions;\n\ttls: boolean | SMTPSocketOptions;\n\tauthentication: (keyof typeof AUTH_METHODS)[];\n\tlogger: (...args: any[]) => void;\n}\n\nexport interface ConnectOptions {\n\tssl?: boolean;\n}\n\nexport class SMTPConnection extends EventEmitter {\n\tpublic readonly user: () => string;\n\tpublic readonly password: () => string;\n\tpublic readonly timeout: number = DEFAULT_TIMEOUT;\n\n\tprotected readonly log = log;\n\tprotected readonly authentication: (keyof typeof AUTH_METHODS)[] = [\n\t\tAUTH_METHODS['CRAM-MD5'],\n\t\tAUTH_METHODS.LOGIN,\n\t\tAUTH_METHODS.PLAIN,\n\t\tAUTH_METHODS.XOAUTH2,\n\t];\n\n\tprotected _state: 0 | 1 | 2 = SMTPState.NOTCONNECTED;\n\tprotected _secure = false;\n\tprotected loggedin = false;\n\n\tprotected sock: Socket | TLSSocket | null = null;\n\tprotected features: { [index: string]: string | boolean } | null = null;\n\tprotected monitor: SMTPResponseMonitor | null = null;\n\tprotected domain = hostname();\n\tprotected host = 'localhost';\n\tprotected ssl: boolean | SMTPSocketOptions = false;\n\tprotected tls: boolean | SMTPSocketOptions = false;\n\tprotected port: number;\n\n\tprivate greylistResponseTracker = new WeakSet<(...rest: any[]) => void>();\n\n\t/**\n\t * SMTP class written using python's (2.7) smtplib.py as a base.\n\t *\n\t * To target a Message Transfer Agent (MTA), omit all options.\n\t *\n\t * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n\t */\n\tconstructor({\n\t\ttimeout,\n\t\thost,\n\t\tuser,\n\t\tpassword,\n\t\tdomain,\n\t\tport,\n\t\tssl,\n\t\ttls,\n\t\tlogger,\n\t\tauthentication,\n\t}: Partial<SMTPConnectionOptions> = {}) {\n\t\tsuper();\n\n\t\tif (Array.isArray(authentication)) {\n\t\t\tthis.authentication = authentication;\n\t\t}\n\n\t\tif (typeof timeout === 'number') {\n\t\t\tthis.timeout = timeout;\n\t\t}\n\n\t\tif (typeof domain === 'string') {\n\t\t\tthis.domain = domain;\n\t\t}\n\n\t\tif (typeof host === 'string') {\n\t\t\tthis.host = host;\n\t\t}\n\n\t\tif (\n\t\t\tssl != null &&\n\t\t\t(typeof ssl === 'boolean' ||\n\t\t\t\t(typeof ssl === 'object' && Array.isArray(ssl) === false))\n\t\t) {\n\t\t\tthis.ssl = ssl;\n\t\t}\n\n\t\tif (\n\t\t\ttls != null &&\n\t\t\t(typeof tls === 'boolean' ||\n\t\t\t\t(typeof tls === 'object' && Array.isArray(tls) === false))\n\t\t) {\n\t\t\tthis.tls = tls;\n\t\t}\n\n\t\tthis.port = port || (ssl ? SMTP_SSL_PORT : tls ? SMTP_TLS_PORT : SMTP_PORT);\n\t\tthis.loggedin = user && password ? false : true;\n\n\t\tif (!user && (password?.length ?? 0) > 0) {\n\t\t\tthrow new Error('`password` cannot be set without `user`');\n\t\t}\n\n\t\t// keep these strings hidden when quicky debugging/logging\n\t\tthis.user = () => user as string;\n\t\tthis.password = () => password as string;\n\n\t\tif (typeof logger === 'function') {\n\t\t\tthis.log = log;\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * @param {0 | 1} level -\n\t * @returns {void}\n\t */\n\tpublic debug(level: 0 | 1) {\n\t\tDEBUG = level;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {SMTPState} the current state\n\t */\n\tpublic state() {\n\t\treturn this._state;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {boolean} whether or not the instance is authorized\n\t */\n\tpublic authorized() {\n\t\treturn this.loggedin;\n\t}\n\n\t/**\n\t * Establish an SMTP connection.\n\t *\n\t * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n\t *\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {number} [port] the port to use for the connection\n\t * @param {string} [host] the hostname to use for the connection\n\t * @param {ConnectOptions} [options={}] the options\n\t * @returns {void}\n\t */\n\tpublic connect(\n\t\tcallback: (...rest: any[]) => void,\n\t\tport: number = this.port,\n\t\thost: string = this.host,\n\t\toptions: ConnectOptions = {}\n\t) {\n\t\tthis.port = port;\n\t\tthis.host = host;\n\t\tthis.ssl = options.ssl || this.ssl;\n\n\t\tif (this._state !== SMTPState.NOTCONNECTED) {\n\t\t\tthis.quit(() => this.connect(callback, port, host, options));\n\t\t}\n\n\t\t/**\n\t\t * @returns {void}\n\t\t */\n\t\tconst connected = () => {\n\t\t\tthis.log(`connected: ${this.host}:${this.port}`);\n\n\t\t\tif (this.ssl && !this.tls) {\n\t\t\t\t// if key/ca/cert was passed in, check if connection is authorized\n\t\t\t\tif (\n\t\t\t\t\ttypeof this.ssl !== 'boolean' &&\n\t\t\t\t\tthis.sock instanceof TLSSocket &&\n\t\t\t\t\t!this.sock.authorized\n\t\t\t\t) {\n\t\t\t\t\tthis.close(true);\n\t\t\t\t\tcaller(\n\t\t\t\t\t\tcallback,\n\t\t\t\t\t\tSMTPError.create(\n\t\t\t\t\t\t\t'could not establish an ssl connection',\n\t\t\t\t\t\t\tSMTPErrorStates.CONNECTIONAUTH\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthis._secure = true;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @param {Error} err err\n\t\t * @returns {void}\n\t\t */\n\t\tconst connectedErrBack = (err?: Error) => {\n\t\t\tif (!err) {\n\t\t\t\tconnected();\n\t\t\t} else {\n\t\t\t\tthis.close(true);\n\t\t\t\tthis.log(err);\n\t\t\t\tcaller(\n\t\t\t\t\tcallback,\n\t\t\t\t\tSMTPError.create(\n\t\t\t\t\t\t'could not connect',\n\t\t\t\t\t\tSMTPErrorStates.COULDNOTCONNECT,\n\t\t\t\t\t\terr\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\tconst response = (\n\t\t\terr: Error | null | undefined,\n\t\t\tmsg: { code: string | number; data: string }\n\t\t) => {\n\t\t\tif (err) {\n\t\t\t\tif (this._state === SMTPState.NOTCONNECTED && !this.sock) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.close(true);\n\t\t\t\tcaller(callback, err);\n\t\t\t} else if (msg.code == '220') {\n\t\t\t\tthis.log(msg.data);\n\n\t\t\t\t// might happen first, so no need to wait on connected()\n\t\t\t\tthis._state = SMTPState.CONNECTED;\n\t\t\t\tcaller(callback, null, msg.data);\n\t\t\t} else {\n\t\t\t\tthis.log(`response (data): ${msg.data}`);\n\t\t\t\tthis.quit(() => {\n\t\t\t\t\tcaller(\n\t\t\t\t\t\tcallback,\n\t\t\t\t\t\tSMTPError.create(\n\t\t\t\t\t\t\t'bad response on connection',\n\t\t\t\t\t\t\tSMTPErrorStates.BADRESPONSE,\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\tmsg.data\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tthis._state = SMTPState.CONNECTING;\n\t\tthis.log(`connecting: ${this.host}:${this.port}`);\n\n\t\tif (this.ssl) {\n\t\t\tthis.sock = connect(\n\t\t\t\tthis.port,\n\t\t\t\tthis.host.trim(),\n\t\t\t\ttypeof this.ssl === 'object' ? this.ssl : {},\n\t\t\t\tconnected\n\t\t\t);\n\t\t} else {\n\t\t\tthis.sock = new Socket();\n\t\t\tthis.sock.connect(this.port, this.host.trim(), connectedErrBack);\n\t\t}\n\n\t\tthis.monitor = new SMTPResponseMonitor(this.sock, this.timeout, () =>\n\t\t\tthis.close(true)\n\t\t);\n\t\tthis.sock.once('response', response);\n\t\tthis.sock.once('error', response); // the socket could reset or throw, so let's handle it and let the user know\n\t}\n\n\t/**\n\t * @public\n\t * @param {string} str the string to send\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @returns {void}\n\t */\n\tpublic send(str: string, callback: (...args: any[]) => void) {\n\t\tif (this.sock != null && this._state === SMTPState.CONNECTED) {\n\t\t\tthis.log(str);\n\n\t\t\tthis.sock.once('response', (err, msg) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tcaller(callback, err);\n\t\t\t\t} else {\n\t\t\t\t\tthis.log(msg.data);\n\t\t\t\t\tcaller(callback, null, msg);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (this.sock.writable) {\n\t\t\t\tthis.sock.write(str);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.close(true);\n\t\t\tcaller(\n\t\t\t\tcallback,\n\t\t\t\tSMTPError.create(\n\t\t\t\t\t'no connection has been established',\n\t\t\t\t\tSMTPErrorStates.NOCONNECTION\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * @param {string} cmd command to issue\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {(number[] | number)} [codes=[250]] array codes\n\t * @returns {void}\n\t */\n\tpublic command(\n\t\tcmd: string,\n\t\tcallback: (...rest: any[]) => void,\n\t\tcodes: number[] | number = [250]\n\t) {\n\t\tconst codesArray = Array.isArray(codes)\n\t\t\t? codes\n\t\t\t: typeof codes === 'number'\n\t\t\t? [codes]\n\t\t\t: [250];\n\n\t\tconst response = (\n\t\t\terr: Error | null | undefined,\n\t\t\tmsg: { code: string | number; data: string; message: string }\n\t\t) => {\n\t\t\tif (err) {\n\t\t\t\tcaller(callback, err);\n\t\t\t} else {\n\t\t\t\tconst code = Number(msg.code);\n\t\t\t\tif (codesArray.indexOf(code) !== -1) {\n\t\t\t\t\tcaller(callback, err, msg.data, msg.message);\n\t\t\t\t} else if (\n\t\t\t\t\t(code === 450 || code === 451) &&\n\t\t\t\t\tmsg.message.toLowerCase().includes('greylist') &&\n\t\t\t\t\tthis.greylistResponseTracker.has(response) === false\n\t\t\t\t) {\n\t\t\t\t\tthis.greylistResponseTracker.add(response);\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.send(cmd + CRLF, response);\n\t\t\t\t\t}, GREYLIST_DELAY);\n\t\t\t\t} else {\n\t\t\t\t\tconst suffix = msg.message ? `: ${msg.message}` : '';\n\t\t\t\t\tconst errorMessage = `bad response on command '${\n\t\t\t\t\t\tcmd.split(' ')[0]\n\t\t\t\t\t}'${suffix}`;\n\t\t\t\t\tcaller(\n\t\t\t\t\t\tcallback,\n\t\t\t\t\t\tSMTPError.create(\n\t\t\t\t\t\t\terrorMessage,\n\t\t\t\t\t\t\tSMTPErrorStates.BADRESPONSE,\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\tmsg.data\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.greylistResponseTracker.delete(response);\n\t\tthis.send(cmd + CRLF, response);\n\t}\n\n\t/**\n\t * @public\n\t * @description SMTP 'helo' command.\n\t *\n\t * Hostname to send for self command defaults to the FQDN of the local\n\t * host.\n\t *\n\t * As this command was deprecated by rfc2821, it should only be used for compatibility with non-compliant servers.\n\t * @see https://tools.ietf.org/html/rfc2821#appendix-F.3\n\t *\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {string} domain the domain to associate with the 'helo' request\n\t * @returns {void}\n\t */\n\tpublic helo(callback: (...rest: any[]) => void, domain?: string) {\n\t\tthis.command(`helo ${domain || this.domain}`, (err, data) => {\n\t\t\tif (err) {\n\t\t\t\tcaller(callback, err);\n\t\t\t} else {\n\t\t\t\tthis.parse_smtp_features(data);\n\t\t\t\tcaller(callback, err, data);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @returns {void}\n\t */\n\tpublic starttls(callback: (...rest: any[]) => void) {\n\t\tconst response = (err: Error, msg: { data: unknown }) => {\n\t\t\tif (this.sock == null) {\n\t\t\t\tthrow new Error('null socket');\n\t\t\t}\n\n\t\t\tif (err) {\n\t\t\t\terr.message += ' while establishing a starttls session';\n\t\t\t\tcaller(callback, err);\n\t\t\t} else {\n\t\t\t\tconst secureContext = createSecureContext(\n\t\t\t\t\ttypeof this.tls === 'object' ? this.tls : {}\n\t\t\t\t);\n\t\t\t\tconst secureSocket = new TLSSocket(this.sock, { secureContext });\n\n\t\t\t\tsecureSocket.on('error', (err: Error) => {\n\t\t\t\t\tthis.close(true);\n\t\t\t\t\tcaller(callback, err);\n\t\t\t\t});\n\n\t\t\t\tthis._secure = true;\n\t\t\t\tthis.sock = secureSocket;\n\n\t\t\t\tnew SMTPResponseMonitor(this.sock, this.timeout, () =>\n\t\t\t\t\tthis.close(true)\n\t\t\t\t);\n\t\t\t\tcaller(callback, msg.data);\n\t\t\t}\n\t\t};\n\n\t\tthis.command('starttls', response, [220]);\n\t}\n\n\t/**\n\t * @public\n\t * @param {string} data the string to parse for features\n\t * @returns {void}\n\t */\n\tpublic parse_smtp_features(data: string) {\n\t\t//  According to RFC1869 some (badly written)\n\t\t//  MTA's will disconnect on an ehlo. Toss an exception if\n\t\t//  that happens -ddm\n\n\t\tdata.split('\\n').forEach((ext) => {\n\t\t\tconst parse = ext.match(/^(?:\\d+[-=]?)\\s*?([^\\s]+)(?:\\s+(.*)\\s*?)?$/);\n\n\t\t\t// To be able to communicate with as many SMTP servers as possible,\n\t\t\t// we have to take the old-style auth advertisement into account,\n\t\t\t// because:\n\t\t\t// 1) Else our SMTP feature parser gets confused.\n\t\t\t// 2) There are some servers that only advertise the auth methods we\n\t\t\t// support using the old style.\n\n\t\t\tif (parse != null && this.features != null) {\n\t\t\t\t// RFC 1869 requires a space between ehlo keyword and parameters.\n\t\t\t\t// It's actually stricter, in that only spaces are allowed between\n\t\t\t\t// parameters, but were not going to check for that here.  Note\n\t\t\t\t// that the space isn't present if there are no parameters.\n\t\t\t\tthis.features[parse[1].toLowerCase()] = parse[2] || true;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {string} domain the domain to associate with the 'ehlo' request\n\t * @returns {void}\n\t */\n\tpublic ehlo(callback: (...rest: any[]) => void, domain?: string) {\n\t\tthis.features = {};\n\t\tthis.command(`ehlo ${domain || this.domain}`, (err, data) => {\n\t\t\tif (err) {\n\t\t\t\tcaller(callback, err);\n\t\t\t} else {\n\t\t\t\tthis.parse_smtp_features(data);\n\n\t\t\t\tif (this.tls && !this._secure) {\n\t\t\t\t\tthis.starttls(() => this.ehlo(callback, domain));\n\t\t\t\t} else {\n\t\t\t\t\tcaller(callback, err, data);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @public\n\t * @param {string} opt the features keyname to check\n\t * @returns {boolean} whether the extension exists\n\t */\n\tpublic has_extn(opt: string) {\n\t\treturn (this.features ?? {})[opt.toLowerCase()] === undefined;\n\t}\n\n\t/**\n\t * @public\n\t * @description SMTP 'help' command, returns text from the server\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {string} domain the domain to associate with the 'help' request\n\t * @returns {void}\n\t */\n\tpublic help(callback: (...rest: any[]) => void, domain: string) {\n\t\tthis.command(domain ? `help ${domain}` : 'help', callback, [211, 214]);\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @returns {void}\n\t */\n\tpublic rset(callback: (...rest: any[]) => void) {\n\t\tthis.command('rset', callback);\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @returns {void}\n\t */\n\tpublic noop(callback: (...rest: any[]) => void) {\n\t\tthis.send('noop', callback);\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {string} from the sender\n\t * @returns {void}\n\t */\n\tpublic mail(callback: (...rest: any[]) => void, from: string) {\n\t\tthis.command(`mail FROM:${from}`, callback);\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {string} to the receiver\n\t * @returns {void}\n\t */\n\tpublic rcpt(callback: (...rest: any[]) => void, to: string) {\n\t\tthis.command(`RCPT TO:${to}`, callback, [250, 251]);\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @returns {void}\n\t */\n\tpublic data(callback: (...rest: any[]) => void) {\n\t\tthis.command('data', callback, [354]);\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @returns {void}\n\t */\n\tpublic data_end(callback: (...rest: any[]) => void) {\n\t\tthis.command(`${CRLF}.`, callback);\n\t}\n\n\t/**\n\t * @public\n\t * @param {string} data the message to send\n\t * @returns {void}\n\t */\n\tpublic message(data: string) {\n\t\tthis.log(data);\n\t\tthis.sock?.write(data) ?? this.log('no socket to write to');\n\t}\n\n\t/**\n\t * @public\n\t * @description SMTP 'verify' command -- checks for address validity.\n\t * @param {string} address the address to validate\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @returns {void}\n\t */\n\tpublic verify(address: string, callback: (...rest: any[]) => void) {\n\t\tthis.command(`vrfy ${address}`, callback, [250, 251, 252]);\n\t}\n\n\t/**\n\t * @public\n\t * @description SMTP 'expn' command -- expands a mailing list.\n\t * @param {string} address the mailing list to expand\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @returns {void}\n\t */\n\tpublic expn(address: string, callback: (...rest: any[]) => void) {\n\t\tthis.command(`expn ${address}`, callback);\n\t}\n\n\t/**\n\t * @public\n\t * @description Calls this.ehlo() and, if an error occurs, this.helo().\n\t *\n\t * If there has been no previous EHLO or HELO command self session, self\n\t * method tries ESMTP EHLO first.\n\t *\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {string} [domain] the domain to associate with the command\n\t * @returns {void}\n\t */\n\tpublic ehlo_or_helo_if_needed(\n\t\tcallback: (...rest: any[]) => void,\n\t\tdomain?: string\n\t) {\n\t\t// is this code callable...?\n\t\tif (!this.features) {\n\t\t\tconst response = (err: Error, data: unknown) =>\n\t\t\t\tcaller(callback, err, data);\n\t\t\tthis.ehlo((err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tthis.helo(response, domain);\n\t\t\t\t} else {\n\t\t\t\t\tcaller(callback, err, data);\n\t\t\t\t}\n\t\t\t}, domain);\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t *\n\t * Log in on an SMTP server that requires authentication.\n\t *\n\t * If there has been no previous EHLO or HELO command self session, self\n\t * method tries ESMTP EHLO first.\n\t *\n\t * This method will return normally if the authentication was successful.\n\t *\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {string} [user] the username to authenticate with\n\t * @param {string} [password] the password for the authentication\n\t * @param {{ method: string, domain: string }} [options] login options\n\t * @returns {void}\n\t */\n\tpublic login(\n\t\tcallback: (...rest: any[]) => void,\n\t\tuser?: string,\n\t\tpassword?: string,\n\t\toptions: { method?: string; domain?: string } = {}\n\t) {\n\t\tconst login = {\n\t\t\tuser: user ? () => user : this.user,\n\t\t\tpassword: password ? () => password : this.password,\n\t\t\tmethod: options?.method?.toUpperCase() ?? '',\n\t\t};\n\n\t\tconst domain = options?.domain || this.domain;\n\n\t\tconst initiate = (err: Error | null | undefined, data: unknown) => {\n\t\t\tif (err) {\n\t\t\t\tcaller(callback, err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet method: keyof typeof AUTH_METHODS | null = null;\n\n\t\t\t/**\n\t\t\t * @param {string} challenge challenge\n\t\t\t * @returns {string} base64 cram hash\n\t\t\t */\n\t\t\tconst encodeCramMd5 = (challenge: string) => {\n\t\t\t\tconst hmac = createHmac('md5', login.password());\n\t\t\t\thmac.update(Buffer.from(challenge, 'base64').toString('ascii'));\n\t\t\t\treturn Buffer.from(`${login.user()} ${hmac.digest('hex')}`).toString(\n\t\t\t\t\t'base64'\n\t\t\t\t);\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * @returns {string} base64 login/password\n\t\t\t */\n\t\t\tconst encodePlain = () =>\n\t\t\t\tBuffer.from(`\\u0000${login.user()}\\u0000${login.password()}`).toString(\n\t\t\t\t\t'base64'\n\t\t\t\t);\n\n\t\t\t/**\n\t\t\t * @see https://developers.google.com/gmail/xoauth2_protocol\n\t\t\t * @returns {string} base64 xoauth2 auth token\n\t\t\t */\n\t\t\tconst encodeXoauth2 = () =>\n\t\t\t\tBuffer.from(\n\t\t\t\t\t`user=${login.user()}\\u0001auth=Bearer ${login.password()}\\u0001\\u0001`\n\t\t\t\t).toString('base64');\n\n\t\t\t// List of authentication methods we support: from preferred to\n\t\t\t// less preferred methods.\n\t\t\tif (!method) {\n\t\t\t\tconst preferred = this.authentication;\n\t\t\t\tlet auth = '';\n\n\t\t\t\tif (typeof this.features?.['auth'] === 'string') {\n\t\t\t\t\tauth = this.features['auth'];\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < preferred.length; i++) {\n\t\t\t\t\tif (auth.includes(preferred[i])) {\n\t\t\t\t\t\tmethod = preferred[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * handle bad responses from command differently\n\t\t\t * @param {Error} err err\n\t\t\t * @param {unknown} data data\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tconst failed = (err: Error, data: unknown) => {\n\t\t\t\tthis.loggedin = false;\n\t\t\t\tthis.close(); // if auth is bad, close the connection, it won't get better by itself\n\t\t\t\tcaller(\n\t\t\t\t\tcallback,\n\t\t\t\t\tSMTPError.create(\n\t\t\t\t\t\t'authorization.failed',\n\t\t\t\t\t\tSMTPErrorStates.AUTHFAILED,\n\t\t\t\t\t\terr,\n\t\t\t\t\t\tdata\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * @param {Error} err err\n\t\t\t * @param {unknown} data data\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tconst response = (err: Error | null | undefined, data: unknown) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tfailed(err, data);\n\t\t\t\t} else {\n\t\t\t\t\tthis.loggedin = true;\n\t\t\t\t\tcaller(callback, err, data);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * @param {Error} err err\n\t\t\t * @param {unknown} data data\n\t\t\t * @param {string} msg msg\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tconst attempt = (\n\t\t\t\terr: Error | null | undefined,\n\t\t\t\tdata: unknown,\n\t\t\t\tmsg: string\n\t\t\t) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tfailed(err, data);\n\t\t\t\t} else {\n\t\t\t\t\tif (method === AUTH_METHODS['CRAM-MD5']) {\n\t\t\t\t\t\tthis.command(encodeCramMd5(msg), response, [235, 503]);\n\t\t\t\t\t} else if (method === AUTH_METHODS.LOGIN) {\n\t\t\t\t\t\tthis.command(\n\t\t\t\t\t\t\tBuffer.from(login.password()).toString('base64'),\n\t\t\t\t\t\t\tresponse,\n\t\t\t\t\t\t\t[235, 503]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * @param {Error} err err\n\t\t\t * @param {unknown} data data\n\t\t\t * @param {string} msg msg\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tconst attemptUser = (err: Error, data: unknown) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tfailed(err, data);\n\t\t\t\t} else {\n\t\t\t\t\tif (method === AUTH_METHODS.LOGIN) {\n\t\t\t\t\t\tthis.command(\n\t\t\t\t\t\t\tBuffer.from(login.user()).toString('base64'),\n\t\t\t\t\t\t\tattempt,\n\t\t\t\t\t\t\t[334]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tswitch (method) {\n\t\t\t\tcase AUTH_METHODS['CRAM-MD5']:\n\t\t\t\t\tthis.command(`AUTH  ${AUTH_METHODS['CRAM-MD5']}`, attempt, [334]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AUTH_METHODS.LOGIN:\n\t\t\t\t\tthis.command(`AUTH ${AUTH_METHODS.LOGIN}`, attemptUser, [334]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AUTH_METHODS.PLAIN:\n\t\t\t\t\tthis.command(\n\t\t\t\t\t\t`AUTH ${AUTH_METHODS.PLAIN} ${encodePlain()}`,\n\t\t\t\t\t\tresponse,\n\t\t\t\t\t\t[235, 503]\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AUTH_METHODS.XOAUTH2:\n\t\t\t\t\tthis.command(\n\t\t\t\t\t\t`AUTH ${AUTH_METHODS.XOAUTH2} ${encodeXoauth2()}`,\n\t\t\t\t\t\tresponse,\n\t\t\t\t\t\t[235, 503]\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcaller(\n\t\t\t\t\t\tcallback,\n\t\t\t\t\t\tSMTPError.create(\n\t\t\t\t\t\t\t'no form of authorization supported',\n\t\t\t\t\t\t\tSMTPErrorStates.AUTHNOTSUPPORTED,\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\tthis.ehlo_or_helo_if_needed(initiate, domain);\n\t}\n\n\t/**\n\t * @public\n\t * @param {boolean} [force=false] whether or not to force destroy the connection\n\t * @returns {void}\n\t */\n\tpublic close(force = false) {\n\t\tif (this.sock) {\n\t\t\tif (force) {\n\t\t\t\tthis.log('smtp connection destroyed!');\n\t\t\t\tthis.sock.destroy();\n\t\t\t} else {\n\t\t\t\tthis.log('smtp connection closed.');\n\t\t\t\tthis.sock.end();\n\t\t\t}\n\t\t}\n\n\t\tif (this.monitor) {\n\t\t\tthis.monitor.stop();\n\t\t\tthis.monitor = null;\n\t\t}\n\n\t\tthis._state = SMTPState.NOTCONNECTED;\n\t\tthis._secure = false;\n\t\tthis.sock = null;\n\t\tthis.features = null;\n\t\tthis.loggedin = !(this.user() && this.password());\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} [callback] function to call after response\n\t * @returns {void}\n\t */\n\tpublic quit(callback?: (...rest: any[]) => void) {\n\t\tthis.command(\n\t\t\t'quit',\n\t\t\t(err, data) => {\n\t\t\t\tcaller(callback, err, data);\n\t\t\t\tthis.close();\n\t\t\t},\n\t\t\t[221, 250]\n\t\t);\n\t}\n}\n","import { addressparser } from './address';\nimport { Message, MessageAttachment, MessageHeaders } from './message';\nimport { SMTPConnection, SMTPConnectionOptions, SMTPState } from './connection';\n\nexport type MessageCallback<T = Message | MessageHeaders> = <\n\tU extends Error | null,\n\tV extends U extends Error ? T : Message\n>(\n\terr: U,\n\tmsg: V\n) => void;\n\nexport interface MessageStack {\n\tcallback: MessageCallback;\n\tmessage: Message;\n\tattachment: MessageAttachment;\n\ttext: string;\n\treturnPath: string;\n\tfrom: string;\n\tto: ReturnType<typeof addressparser>;\n\tcc: string[];\n\tbcc: string[];\n}\n\nexport class SMTPClient {\n\tpublic readonly smtp: SMTPConnection;\n\tpublic readonly queue: MessageStack[] = [];\n\n\tprotected sending = false;\n\tprotected ready = false;\n\tprotected timer: NodeJS.Timer | null = null;\n\n\t/**\n\t * Create a standard SMTP client backed by a self-managed SMTP connection.\n\t *\n\t * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n\t *\n\t * @param {SMTPConnectionOptions} server smtp options\n\t */\n\tconstructor(server: Partial<SMTPConnectionOptions>) {\n\t\tthis.smtp = new SMTPConnection(server);\n\t}\n\n\t/**\n\t * @public\n\t * @param {Message} msg the message to send\n\t * @param {MessageCallback} callback .\n\t * @returns {void}\n\t */\n\tpublic send<T extends Message | MessageHeaders>(\n\t\tmsg: T,\n\t\tcallback: MessageCallback<T>\n\t) {\n\t\tconst message =\n\t\t\tmsg instanceof Message\n\t\t\t\t? msg\n\t\t\t\t: this._canMakeMessage(msg)\n\t\t\t\t? new Message(msg)\n\t\t\t\t: null;\n\n\t\tif (message == null) {\n\t\t\tcallback(new Error('message is not a valid Message instance'), msg);\n\t\t\treturn;\n\t\t}\n\n\t\tconst { isValid, validationError } = message.checkValidity();\n\n\t\tif (isValid) {\n\t\t\tconst stack = this.createMessageStack(message, callback);\n\t\t\tif (stack.to.length === 0) {\n\t\t\t\treturn callback(new Error('No recipients found in message'), msg);\n\t\t\t}\n\t\t\tthis.queue.push(stack);\n\t\t\tthis._poll();\n\t\t} else {\n\t\t\tcallback(new Error(validationError), msg);\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * @param {Message} msg the message to send\n\t * @returns {Promise<Message>} a promise that resolves to the fully processed message\n\t */\n\tpublic sendAsync(msg: Message | MessageHeaders) {\n\t\treturn new Promise<Message>((resolve, reject) => {\n\t\t\tthis.send(msg, (err, message) => {\n\t\t\t\tif (err != null) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\t// unfortunately, the conditional type doesn't reach here\n\t\t\t\t\t// fortunately, we only return a `Message` when err is null, so this is safe\n\t\t\t\t\tresolve(message as Message);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @public\n\t * @description Converts a message to the raw object used by the internal stack.\n\t * @param {Message} message message to convert\n\t * @param {MessageCallback} callback errback\n\t * @returns {MessageStack} raw message object\n\t */\n\tpublic createMessageStack(\n\t\tmessage: Message,\n\t\tcallback: MessageCallback = function () {\n\t\t\t/* ø */\n\t\t}\n\t) {\n\t\tconst [{ address: from }] = addressparser(message.header.from);\n\t\tconst stack = {\n\t\t\tmessage,\n\t\t\tto: [] as ReturnType<typeof addressparser>,\n\t\t\tfrom,\n\t\t\tcallback: callback.bind(this),\n\t\t} as MessageStack;\n\n\t\tconst {\n\t\t\theader: { to, cc, bcc, 'return-path': returnPath },\n\t\t} = message;\n\n\t\tif ((typeof to === 'string' || Array.isArray(to)) && to.length > 0) {\n\t\t\tstack.to = addressparser(to);\n\t\t}\n\n\t\tif ((typeof cc === 'string' || Array.isArray(cc)) && cc.length > 0) {\n\t\t\tstack.to = stack.to.concat(\n\t\t\t\taddressparser(cc).filter(\n\t\t\t\t\t(x) => stack.to.some((y) => y.address === x.address) === false\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif ((typeof bcc === 'string' || Array.isArray(bcc)) && bcc.length > 0) {\n\t\t\tstack.to = stack.to.concat(\n\t\t\t\taddressparser(bcc).filter(\n\t\t\t\t\t(x) => stack.to.some((y) => y.address === x.address) === false\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif (typeof returnPath === 'string' && returnPath.length > 0) {\n\t\t\tconst parsedReturnPath = addressparser(returnPath);\n\t\t\tif (parsedReturnPath.length > 0) {\n\t\t\t\tconst [{ address: returnPathAddress }] = parsedReturnPath;\n\t\t\t\tstack.returnPath = returnPathAddress as string;\n\t\t\t}\n\t\t}\n\n\t\treturn stack;\n\t}\n\n\t/**\n\t * @protected\n\t * @returns {void}\n\t */\n\tprotected _poll() {\n\t\tif (this.timer != null) {\n\t\t\tclearTimeout(this.timer);\n\t\t}\n\n\t\tif (this.queue.length) {\n\t\t\tif (this.smtp.state() == SMTPState.NOTCONNECTED) {\n\t\t\t\tthis._connect(this.queue[0]);\n\t\t\t} else if (\n\t\t\t\tthis.smtp.state() == SMTPState.CONNECTED &&\n\t\t\t\t!this.sending &&\n\t\t\t\tthis.ready\n\t\t\t) {\n\t\t\t\tthis._sendmail(this.queue.shift() as MessageStack);\n\t\t\t}\n\t\t}\n\t\t// wait around 1 seconds in case something does come in,\n\t\t// otherwise close out SMTP connection if still open\n\t\telse if (this.smtp.state() == SMTPState.CONNECTED) {\n\t\t\tthis.timer = setTimeout(() => this.smtp.quit(), 1000);\n\t\t}\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageStack} stack stack\n\t * @returns {void}\n\t */\n\tprotected _connect(stack: MessageStack) {\n\t\t/**\n\t\t * @param {Error} err callback error\n\t\t * @returns {void}\n\t\t */\n\t\tconst connect = (err: Error) => {\n\t\t\tif (!err) {\n\t\t\t\tconst begin = (err: Error) => {\n\t\t\t\t\tif (!err) {\n\t\t\t\t\t\tthis.ready = true;\n\t\t\t\t\t\tthis._poll();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstack.callback(err, stack.message);\n\n\t\t\t\t\t\t// clear out the queue so all callbacks can be called with the same error message\n\t\t\t\t\t\tthis.queue.shift();\n\t\t\t\t\t\tthis._poll();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tif (!this.smtp.authorized()) {\n\t\t\t\t\tthis.smtp.login(begin);\n\t\t\t\t} else {\n\t\t\t\t\tthis.smtp.ehlo_or_helo_if_needed(begin);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstack.callback(err, stack.message);\n\n\t\t\t\t// clear out the queue so all callbacks can be called with the same error message\n\t\t\t\tthis.queue.shift();\n\t\t\t\tthis._poll();\n\t\t\t}\n\t\t};\n\n\t\tthis.ready = false;\n\t\tthis.smtp.connect(connect);\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageStack} msg message stack\n\t * @returns {boolean} can make message\n\t */\n\tprotected _canMakeMessage(msg: MessageHeaders) {\n\t\treturn (\n\t\t\tmsg.from &&\n\t\t\t(msg.to || msg.cc || msg.bcc) &&\n\t\t\t(msg.text !== undefined || this._containsInlinedHtml(msg.attachment))\n\t\t);\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageAttachment | MessageAttachment[]} attachment attachment\n\t * @returns {boolean} whether the attachment contains inlined html\n\t */\n\tprotected _containsInlinedHtml(\n\t\tattachment?: MessageAttachment | MessageAttachment[]\n\t) {\n\t\tif (Array.isArray(attachment)) {\n\t\t\treturn attachment.some((att) => {\n\t\t\t\treturn this._isAttachmentInlinedHtml(att);\n\t\t\t});\n\t\t} else {\n\t\t\treturn this._isAttachmentInlinedHtml(attachment);\n\t\t}\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageAttachment} attachment attachment\n\t * @returns {boolean} whether the attachment is inlined html\n\t */\n\tprotected _isAttachmentInlinedHtml(attachment?: MessageAttachment) {\n\t\treturn (\n\t\t\tattachment &&\n\t\t\t(attachment.data || attachment.path) &&\n\t\t\tattachment.alternative === true\n\t\t);\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageStack} stack stack\n\t * @param {function(MessageStack): void} next next\n\t * @returns {function(Error): void} callback\n\t */\n\tprotected _sendsmtp(stack: MessageStack, next: (msg: MessageStack) => void) {\n\t\t/**\n\t\t * @param {Error} [err] error\n\t\t * @returns {void}\n\t\t */\n\t\treturn (err: Error) => {\n\t\t\tif (!err && next) {\n\t\t\t\tnext.apply(this, [stack]);\n\t\t\t} else {\n\t\t\t\t// if we snag on SMTP commands, call done, passing the error\n\t\t\t\t// but first reset SMTP state so queue can continue polling\n\t\t\t\tthis.smtp.rset(() => this._senddone(err, stack));\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageStack} stack stack\n\t * @returns {void}\n\t */\n\tprotected _sendmail(stack: MessageStack) {\n\t\tconst from = stack.returnPath || stack.from;\n\t\tthis.sending = true;\n\t\tthis.smtp.mail(this._sendsmtp(stack, this._sendrcpt), '<' + from + '>');\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageStack} stack stack\n\t * @returns {void}\n\t */\n\tprotected _sendrcpt(stack: MessageStack) {\n\t\tif (stack.to == null || typeof stack.to === 'string') {\n\t\t\tthrow new TypeError('stack.to must be array');\n\t\t}\n\n\t\tconst to = stack.to.shift()?.address;\n\t\tthis.smtp.rcpt(\n\t\t\tthis._sendsmtp(stack, stack.to.length ? this._sendrcpt : this._senddata),\n\t\t\t`<${to}>`\n\t\t);\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageStack} stack stack\n\t * @returns {void}\n\t */\n\tprotected _senddata(stack: MessageStack) {\n\t\tthis.smtp.data(this._sendsmtp(stack, this._sendmessage));\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageStack} stack stack\n\t * @returns {void}\n\t */\n\tprotected _sendmessage(stack: MessageStack) {\n\t\tconst stream = stack.message.stream();\n\n\t\tstream.on('data', (data) => this.smtp.message(data));\n\t\tstream.on('end', () => {\n\t\t\tthis.smtp.data_end(\n\t\t\t\tthis._sendsmtp(stack, () => this._senddone(null, stack))\n\t\t\t);\n\t\t});\n\n\t\t// there is no way to cancel a message while in the DATA portion,\n\t\t// so we have to close the socket to prevent a bad email from going out\n\t\tstream.on('error', (err) => {\n\t\t\tthis.smtp.close();\n\t\t\tthis._senddone(err, stack);\n\t\t});\n\t}\n\n\t/**\n\t * @protected\n\t * @param {Error} err err\n\t * @param {MessageStack} stack stack\n\t * @returns {void}\n\t */\n\tprotected _senddone(err: Error | null, stack: MessageStack) {\n\t\tthis.sending = false;\n\t\tstack.callback(err, stack.message);\n\t\tthis._poll();\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}